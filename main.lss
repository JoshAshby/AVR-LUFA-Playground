
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800100  000016ec  00001780  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  0080016c  0080016c  000017ec  2**0
                  ALLOC
  3 .stab         00002484  00000000  00000000  000017ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c5b  00000000  00000000  00003c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  000048cb  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000410  00000000  00000000  000048ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000066c8  00000000  00000000  00004cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001baf  00000000  00000000  0000b3c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002a77  00000000  00000000  0000cf74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b74  00000000  00000000  0000f9ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002b66  00000000  00000000  00010560  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000047e3  00000000  00000000  000130c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000780  00000000  00000000  000178a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
       0:	9b c0       	rjmp	.+310    	; 0x138 <__ctors_end>
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
       2:	00 00       	nop
       4:	b5 c0       	rjmp	.+362    	; 0x170 <__bad_interrupt>
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
       6:	00 00       	nop
       8:	b3 c0       	rjmp	.+358    	; 0x170 <__bad_interrupt>
       a:	00 00       	nop
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
       c:	b1 c0       	rjmp	.+354    	; 0x170 <__bad_interrupt>
       e:	00 00       	nop
      10:	af c0       	rjmp	.+350    	; 0x170 <__bad_interrupt>
      12:	00 00       	nop
      14:	ad c0       	rjmp	.+346    	; 0x170 <__bad_interrupt>
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
      16:	00 00       	nop
      18:	ab c0       	rjmp	.+342    	; 0x170 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a9 c0       	rjmp	.+338    	; 0x170 <__bad_interrupt>
      1e:	00 00       	nop
	while (UDCON & (1 << RMWKUP));
      20:	a7 c0       	rjmp	.+334    	; 0x170 <__bad_interrupt>
      22:	00 00       	nop
      24:	a5 c0       	rjmp	.+330    	; 0x170 <__bad_interrupt>
      26:	00 00       	nop
}
      28:	be c1       	rjmp	.+892    	; 0x3a6 <__vector_10>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
      2a:	00 00       	nop
	USB_Device_ConfigurationNumber  = 0;
      2c:	a1 c0       	rjmp	.+322    	; 0x170 <__bad_interrupt>
      2e:	00 00       	nop

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
      30:	9f c0       	rjmp	.+318    	; 0x170 <__bad_interrupt>
      32:	00 00       	nop
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
      34:	9d c0       	rjmp	.+314    	; 0x170 <__bad_interrupt>
      36:	00 00       	nop
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
      38:	9b c0       	rjmp	.+310    	; 0x170 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	99 c0       	rjmp	.+306    	; 0x170 <__bad_interrupt>
      3e:	00 00       	nop
      40:	97 c0       	rjmp	.+302    	; 0x170 <__bad_interrupt>
      42:	00 00       	nop
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
      44:	95 c0       	rjmp	.+298    	; 0x170 <__bad_interrupt>
      46:	00 00       	nop
      48:	93 c0       	rjmp	.+294    	; 0x170 <__bad_interrupt>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
      4a:	00 00       	nop
      4c:	91 c0       	rjmp	.+290    	; 0x170 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8f c0       	rjmp	.+286    	; 0x170 <__bad_interrupt>
      52:	00 00       	nop
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
      54:	8d c0       	rjmp	.+282    	; 0x170 <__bad_interrupt>
      56:	00 00       	nop
      58:	8b c0       	rjmp	.+278    	; 0x170 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	89 c0       	rjmp	.+274    	; 0x170 <__bad_interrupt>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
      5e:	00 00       	nop
      60:	87 c0       	rjmp	.+270    	; 0x170 <__bad_interrupt>
      62:	00 00       	nop
      64:	85 c0       	rjmp	.+266    	; 0x170 <__bad_interrupt>
      66:	00 00       	nop
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
      68:	83 c0       	rjmp	.+262    	; 0x170 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	81 c0       	rjmp	.+258    	; 0x170 <__bad_interrupt>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
      6e:	00 00       	nop
      70:	7f c0       	rjmp	.+254    	; 0x170 <__bad_interrupt>
      72:	00 00       	nop
      74:	7d c0       	rjmp	.+250    	; 0x170 <__bad_interrupt>

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
      76:	00 00       	nop
      78:	7b c0       	rjmp	.+246    	; 0x170 <__bad_interrupt>
      7a:	00 00       	nop
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
      7c:	79 c0       	rjmp	.+242    	; 0x170 <__bad_interrupt>
      7e:	00 00       	nop
      80:	77 c0       	rjmp	.+238    	; 0x170 <__bad_interrupt>
      82:	00 00       	nop
      84:	75 c0       	rjmp	.+234    	; 0x170 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
      86:	00 00       	nop
      88:	73 c0       	rjmp	.+230    	; 0x170 <__bad_interrupt>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
      8a:	00 00       	nop

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      8c:	71 c0       	rjmp	.+226    	; 0x170 <__bad_interrupt>
      8e:	00 00       	nop
      90:	6f c0       	rjmp	.+222    	; 0x170 <__bad_interrupt>
      92:	00 00       	nop
      94:	6d c0       	rjmp	.+218    	; 0x170 <__bad_interrupt>
      96:	00 00       	nop
      98:	6b c0       	rjmp	.+214    	; 0x170 <__bad_interrupt>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
      9a:	00 00       	nop
      9c:	69 c0       	rjmp	.+210    	; 0x170 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	67 c0       	rjmp	.+206    	; 0x170 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	65 c0       	rjmp	.+202    	; 0x170 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	63 c0       	rjmp	.+198    	; 0x170 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ProductString>:

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      ac:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
      bc:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

000000ca <ManufacturerString>:
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      ca:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
      da:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e4 <LanguageString>:
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
      e4:	04 03 09 04                                         ....

000000e8 <ConfigurationDescriptor>:
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
      e8:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      f8:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     108:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     118:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000126 <DeviceDescriptor>:
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     126:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     136:	dc 01                                               ..

00000138 <__ctors_end>:
     138:	11 24       	eor	r1, r1
     13a:	1f be       	out	0x3f, r1	; 63
     13c:	cf ef       	ldi	r28, 0xFF	; 255
     13e:	da e0       	ldi	r29, 0x0A	; 10
     140:	de bf       	out	0x3e, r29	; 62
     142:	cd bf       	out	0x3d, r28	; 61

00000144 <__do_copy_data>:
     144:	11 e0       	ldi	r17, 0x01	; 1
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b1 e0       	ldi	r27, 0x01	; 1
     14a:	ec ee       	ldi	r30, 0xEC	; 236
     14c:	f6 e1       	ldi	r31, 0x16	; 22
     14e:	02 c0       	rjmp	.+4      	; 0x154 <__do_copy_data+0x10>
     150:	05 90       	lpm	r0, Z+
     152:	0d 92       	st	X+, r0
				ReportSize     -= 2;
     154:	ac 36       	cpi	r26, 0x6C	; 108
     156:	b1 07       	cpc	r27, r17
				ReportData     += 2;
     158:	d9 f7       	brne	.-10     	; 0x150 <__do_copy_data+0xc>

0000015a <__do_clear_bss>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	ac e6       	ldi	r26, 0x6C	; 108
				break;
     15e:	b1 e0       	ldi	r27, 0x01	; 1

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     160:	01 c0       	rjmp	.+2      	; 0x164 <.do_clear_bss_start>

00000162 <.do_clear_bss_loop>:
     162:	1d 92       	st	X+, r1

00000164 <.do_clear_bss_start>:
     164:	ab 38       	cpi	r26, 0x8B	; 139
     166:	b1 07       	cpc	r27, r17
     168:	e1 f7       	brne	.-8      	; 0x162 <.do_clear_bss_loop>
     16a:	31 d0       	rcall	.+98     	; 0x1ce <main>
				ReportSize     -= 1;
     16c:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <_exit>

00000170 <__bad_interrupt>:
				ReportData     += 1;
     170:	47 cf       	rjmp	.-370    	; 0x0 <__vectors>

00000172 <SetupHardware>:
     172:	84 b7       	in	r24, 0x34	; 52
     174:	87 7f       	andi	r24, 0xF7	; 247
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     176:	84 bf       	out	0x34, r24	; 52
     178:	88 e1       	ldi	r24, 0x18	; 24
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	80 93 60 00 	sts	0x0060, r24
     182:	10 92 60 00 	sts	0x0060, r1
     186:	0f be       	out	0x3f, r0	; 63
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	80 e8       	ldi	r24, 0x80	; 128
     18c:	0f b6       	in	r0, 0x3f	; 63
     18e:	f8 94       	cli
     190:	80 93 61 00 	sts	0x0061, r24
     194:	90 93 61 00 	sts	0x0061, r25
     198:	0f be       	out	0x3f, r0	; 63
     19a:	84 b1       	in	r24, 0x04	; 4
     19c:	84 b9       	out	0x04, r24	; 4
     19e:	8a b1       	in	r24, 0x0a	; 10
     1a0:	8a b9       	out	0x0a, r24	; 10
     1a2:	8d b1       	in	r24, 0x0d	; 13
     1a4:	8d b9       	out	0x0d, r24	; 13
     1a6:	85 b1       	in	r24, 0x05	; 5
     1a8:	85 b9       	out	0x05, r24	; 5
     1aa:	8b b1       	in	r24, 0x0b	; 11
     1ac:	8b b9       	out	0x0b, r24	; 11
     1ae:	8e b1       	in	r24, 0x0e	; 14
     1b0:	8e b9       	out	0x0e, r24	; 14
     1b2:	84 ea       	ldi	r24, 0xA4	; 164
     1b4:	80 93 7a 00 	sts	0x007A, r24
     1b8:	ec eb       	ldi	r30, 0xBC	; 188
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
     1bc:	80 81       	ld	r24, Z
     1be:	84 60       	ori	r24, 0x04	; 4
     1c0:	80 83       	st	Z, r24
     1c2:	10 92 b9 00 	sts	0x00B9, r1
     1c6:	8a e0       	ldi	r24, 0x0A	; 10
     1c8:	80 93 b8 00 	sts	0x00B8, r24
     1cc:	a0 c7       	rjmp	.+3904   	; 0x110e <LCDstart>

000001ce <main>:
     1ce:	d1 df       	rcall	.-94     	; 0x172 <SetupHardware>
     1d0:	78 94       	sei
     1d2:	45 d5       	rcall	.+2698   	; 0xc5e <ButtonManage>
     1d4:	40 d7       	rcall	.+3712   	; 0x1056 <LCDupdate>
     1d6:	17 d4       	rcall	.+2094   	; 0xa06 <USB_USBTask>
     1d8:	fc cf       	rjmp	.-8      	; 0x1d2 <main+0x4>

000001da <EVENT_USB_Device_Connect>:
     1da:	08 95       	ret

000001dc <EVENT_USB_Device_Disconnect>:
     1dc:	08 95       	ret

000001de <EVENT_USB_Device_ConfigurationChanged>:
     1de:	42 e0       	ldi	r20, 0x02	; 2
     1e0:	61 ec       	ldi	r22, 0xC1	; 193
     1e2:	82 e0       	ldi	r24, 0x02	; 2
     1e4:	88 d0       	rcall	.+272    	; 0x2f6 <Endpoint_ConfigureEndpoint_Prv>
     1e6:	42 e1       	ldi	r20, 0x12	; 18
     1e8:	61 e8       	ldi	r22, 0x81	; 129
     1ea:	83 e0       	ldi	r24, 0x03	; 3
     1ec:	84 d0       	rcall	.+264    	; 0x2f6 <Endpoint_ConfigureEndpoint_Prv>
     1ee:	42 e1       	ldi	r20, 0x12	; 18
     1f0:	60 e8       	ldi	r22, 0x80	; 128
     1f2:	84 e0       	ldi	r24, 0x04	; 4
     1f4:	80 d0       	rcall	.+256    	; 0x2f6 <Endpoint_ConfigureEndpoint_Prv>
     1f6:	10 92 00 01 	sts	0x0100, r1
     1fa:	10 92 01 01 	sts	0x0101, r1
     1fe:	10 92 02 01 	sts	0x0102, r1
     202:	10 92 03 01 	sts	0x0103, r1
     206:	08 95       	ret

00000208 <EVENT_USB_Device_ControlRequest>:
     208:	80 91 84 01 	lds	r24, 0x0184
     20c:	81 32       	cpi	r24, 0x21	; 33
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     20e:	29 f0       	breq	.+10     	; 0x21a <EVENT_USB_Device_ControlRequest+0x12>
     210:	82 32       	cpi	r24, 0x22	; 34
     212:	49 f1       	breq	.+82     	; 0x266 <EVENT_USB_Device_ControlRequest+0x5e>
     214:	80 32       	cpi	r24, 0x20	; 32
     216:	89 f5       	brne	.+98     	; 0x27a <EVENT_USB_Device_ControlRequest+0x72>
     218:	12 c0       	rjmp	.+36     	; 0x23e <EVENT_USB_Device_ControlRequest+0x36>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     21a:	80 91 83 01 	lds	r24, 0x0183
     21e:	81 3a       	cpi	r24, 0xA1	; 161
     220:	61 f5       	brne	.+88     	; 0x27a <EVENT_USB_Device_ControlRequest+0x72>
     222:	80 91 e8 00 	lds	r24, 0x00E8
     226:	87 7f       	andi	r24, 0xF7	; 247
     228:	80 93 e8 00 	sts	0x00E8, r24
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     22c:	67 e0       	ldi	r22, 0x07	; 7
				break;
     22e:	70 e0       	ldi	r23, 0x00	; 0
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	91 e0       	ldi	r25, 0x01	; 1
     234:	79 d1       	rcall	.+754    	; 0x528 <Endpoint_Write_Control_Stream_LE>
     236:	80 91 e8 00 	lds	r24, 0x00E8
     23a:	8b 77       	andi	r24, 0x7B	; 123
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     23c:	11 c0       	rjmp	.+34     	; 0x260 <EVENT_USB_Device_ControlRequest+0x58>
     23e:	80 91 83 01 	lds	r24, 0x0183
				break;
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     242:	81 32       	cpi	r24, 0x21	; 33
     244:	d1 f4       	brne	.+52     	; 0x27a <EVENT_USB_Device_ControlRequest+0x72>
     246:	80 91 e8 00 	lds	r24, 0x00E8
				break;
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     24a:	87 7f       	andi	r24, 0xF7	; 247
     24c:	80 93 e8 00 	sts	0x00E8, r24
     250:	67 e0       	ldi	r22, 0x07	; 7
     252:	70 e0       	ldi	r23, 0x00	; 0
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	91 e0       	ldi	r25, 0x01	; 1
				break;
     258:	c6 d1       	rcall	.+908    	; 0x5e6 <Endpoint_Read_Control_Stream_LE>
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     25a:	80 91 e8 00 	lds	r24, 0x00E8
     25e:	8e 77       	andi	r24, 0x7E	; 126
     260:	80 93 e8 00 	sts	0x00E8, r24
				break;
     264:	08 95       	ret
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     266:	80 91 83 01 	lds	r24, 0x0183
     26a:	81 32       	cpi	r24, 0x21	; 33
     26c:	31 f4       	brne	.+12     	; 0x27a <EVENT_USB_Device_ControlRequest+0x72>
     26e:	80 91 e8 00 	lds	r24, 0x00E8
     272:	87 7f       	andi	r24, 0xF7	; 247
				break;
     274:	80 93 e8 00 	sts	0x00E8, r24
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     278:	75 c0       	rjmp	.+234    	; 0x364 <Endpoint_ClearStatusStage>
     27a:	08 95       	ret

0000027c <CALLBACK_USB_GetDescriptor>:
     27c:	29 2f       	mov	r18, r25
     27e:	33 27       	eor	r19, r19
				break;
     280:	22 30       	cpi	r18, 0x02	; 2
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     282:	31 05       	cpc	r19, r1
     284:	39 f0       	breq	.+14     	; 0x294 <CALLBACK_USB_GetDescriptor+0x18>
     286:	23 30       	cpi	r18, 0x03	; 3
				break;
     288:	31 05       	cpc	r19, r1
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     28a:	49 f0       	breq	.+18     	; 0x29e <CALLBACK_USB_GetDescriptor+0x22>
     28c:	21 30       	cpi	r18, 0x01	; 1
     28e:	31 05       	cpc	r19, r1
     290:	21 f1       	breq	.+72     	; 0x2da <CALLBACK_USB_GetDescriptor+0x5e>
     292:	28 c0       	rjmp	.+80     	; 0x2e4 <CALLBACK_USB_GetDescriptor+0x68>
				break;
     294:	ee e3       	ldi	r30, 0x3E	; 62
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	88 ee       	ldi	r24, 0xE8	; 232
				break;
     29a:	90 e0       	ldi	r25, 0x00	; 0
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     29c:	27 c0       	rjmp	.+78     	; 0x2ec <CALLBACK_USB_GetDescriptor+0x70>
     29e:	99 27       	eor	r25, r25
				break;
     2a0:	81 30       	cpi	r24, 0x01	; 1
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2a2:	91 05       	cpc	r25, r1
     2a4:	61 f0       	breq	.+24     	; 0x2be <CALLBACK_USB_GetDescriptor+0x42>
     2a6:	82 30       	cpi	r24, 0x02	; 2
     2a8:	91 05       	cpc	r25, r1

				if (ParserData->UsingReportIDs)
     2aa:	81 f0       	breq	.+32     	; 0x2cc <CALLBACK_USB_GetDescriptor+0x50>
     2ac:	89 2b       	or	r24, r25
     2ae:	d1 f4       	brne	.+52     	; 0x2e4 <CALLBACK_USB_GetDescriptor+0x68>
     2b0:	e4 ee       	ldi	r30, 0xE4	; 228
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	e4 91       	lpm	r30, Z
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	84 ee       	ldi	r24, 0xE4	; 228
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	17 c0       	rjmp	.+46     	; 0x2ec <CALLBACK_USB_GetDescriptor+0x70>
     2be:	ea ec       	ldi	r30, 0xCA	; 202
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	e4 91       	lpm	r30, Z
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     2c6:	8a ec       	ldi	r24, 0xCA	; 202

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	10 c0       	rjmp	.+32     	; 0x2ec <CALLBACK_USB_GetDescriptor+0x70>
     2cc:	ec ea       	ldi	r30, 0xAC	; 172
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	e4 91       	lpm	r30, Z
     2d2:	f0 e0       	ldi	r31, 0x00	; 0
     2d4:	8c ea       	ldi	r24, 0xAC	; 172
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	09 c0       	rjmp	.+18     	; 0x2ec <CALLBACK_USB_GetDescriptor+0x70>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     2da:	e2 e1       	ldi	r30, 0x12	; 18
     2dc:	f0 e0       	ldi	r31, 0x00	; 0
     2de:	86 e2       	ldi	r24, 0x26	; 38
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	04 c0       	rjmp	.+8      	; 0x2ec <CALLBACK_USB_GetDescriptor+0x70>
     2e4:	e0 e0       	ldi	r30, 0x00	; 0
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	da 01       	movw	r26, r20
     2ee:	8d 93       	st	X+, r24
     2f0:	9c 93       	st	X, r25

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2f2:	cf 01       	movw	r24, r30
     2f4:	08 95       	ret

000002f6 <Endpoint_ConfigureEndpoint_Prv>:
     2f6:	98 2f       	mov	r25, r24
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     2f8:	2c c0       	rjmp	.+88     	; 0x352 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     2fa:	90 93 e9 00 	sts	0x00E9, r25
     2fe:	98 17       	cp	r25, r24
     300:	39 f0       	breq	.+14     	; 0x310 <Endpoint_ConfigureEndpoint_Prv+0x1a>
     302:	70 91 ec 00 	lds	r23, 0x00EC
     306:	20 91 ed 00 	lds	r18, 0x00ED
     30a:	50 91 f0 00 	lds	r21, 0x00F0
     30e:	03 c0       	rjmp	.+6      	; 0x316 <Endpoint_ConfigureEndpoint_Prv+0x20>
     310:	24 2f       	mov	r18, r20
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     312:	76 2f       	mov	r23, r22
     314:	50 e0       	ldi	r21, 0x00	; 0
     316:	21 fd       	sbrc	r18, 1
     318:	02 c0       	rjmp	.+4      	; 0x31e <Endpoint_ConfigureEndpoint_Prv+0x28>
					}
				}

				ParserData->UsingReportIDs = true;
     31a:	9f 5f       	subi	r25, 0xFF	; 255
     31c:	1a c0       	rjmp	.+52     	; 0x352 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     31e:	30 91 eb 00 	lds	r19, 0x00EB
     322:	3e 7f       	andi	r19, 0xFE	; 254

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     324:	30 93 eb 00 	sts	0x00EB, r19
     328:	30 91 ed 00 	lds	r19, 0x00ED
     32c:	3d 7f       	andi	r19, 0xFD	; 253
				break;
     32e:	30 93 ed 00 	sts	0x00ED, r19
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     332:	30 91 eb 00 	lds	r19, 0x00EB
     336:	31 60       	ori	r19, 0x01	; 1
     338:	30 93 eb 00 	sts	0x00EB, r19
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     33c:	70 93 ec 00 	sts	0x00EC, r23
     340:	20 93 ed 00 	sts	0x00ED, r18
     344:	50 93 f0 00 	sts	0x00F0, r21
     348:	20 91 ee 00 	lds	r18, 0x00EE
     34c:	27 fd       	sbrc	r18, 7
     34e:	e5 cf       	rjmp	.-54     	; 0x31a <Endpoint_ConfigureEndpoint_Prv+0x24>
     350:	07 c0       	rjmp	.+14     	; 0x360 <Endpoint_ConfigureEndpoint_Prv+0x6a>
     352:	97 30       	cpi	r25, 0x07	; 7
     354:	90 f2       	brcs	.-92     	; 0x2fa <Endpoint_ConfigureEndpoint_Prv+0x4>
				break;
     356:	8f 70       	andi	r24, 0x0F	; 15
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     358:	80 93 e9 00 	sts	0x00E9, r24
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	08 95       	ret
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	08 95       	ret

00000364 <Endpoint_ClearStatusStage>:
     364:	80 91 83 01 	lds	r24, 0x0183
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     368:	87 fd       	sbrc	r24, 7
     36a:	05 c0       	rjmp	.+10     	; 0x376 <Endpoint_ClearStatusStage+0x12>
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     36c:	80 91 e8 00 	lds	r24, 0x00E8
     370:	80 ff       	sbrs	r24, 0
     372:	0e c0       	rjmp	.+28     	; 0x390 <Endpoint_ClearStatusStage+0x2c>
     374:	12 c0       	rjmp	.+36     	; 0x39a <Endpoint_ClearStatusStage+0x36>
     376:	80 91 e8 00 	lds	r24, 0x00E8
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     37a:	82 fd       	sbrc	r24, 2
     37c:	05 c0       	rjmp	.+10     	; 0x388 <Endpoint_ClearStatusStage+0x24>
     37e:	80 91 82 01 	lds	r24, 0x0182
     382:	81 11       	cpse	r24, r1

					while (CurrCollectionPath->Parent != NULL)
     384:	f8 cf       	rjmp	.-16     	; 0x376 <Endpoint_ClearStatusStage+0x12>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     386:	08 95       	ret
     388:	80 91 e8 00 	lds	r24, 0x00E8
     38c:	8b 77       	andi	r24, 0x7B	; 123
     38e:	08 c0       	rjmp	.+16     	; 0x3a0 <Endpoint_ClearStatusStage+0x3c>
     390:	80 91 82 01 	lds	r24, 0x0182
     394:	81 11       	cpse	r24, r1
     396:	ea cf       	rjmp	.-44     	; 0x36c <Endpoint_ClearStatusStage+0x8>
     398:	08 95       	ret
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     39a:	80 91 e8 00 	lds	r24, 0x00E8
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     39e:	8e 77       	andi	r24, 0x7E	; 126
     3a0:	80 93 e8 00 	sts	0x00E8, r24
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3a4:	08 95       	ret

000003a6 <__vector_10>:
     3a6:	1f 92       	push	r1
     3a8:	0f 92       	push	r0
				}

				CurrCollectionPath->Type       = ReportItemData;
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	0f 92       	push	r0
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     3ae:	11 24       	eor	r1, r1
     3b0:	2f 93       	push	r18
     3b2:	3f 93       	push	r19
     3b4:	4f 93       	push	r20
     3b6:	5f 93       	push	r21
     3b8:	6f 93       	push	r22
     3ba:	7f 93       	push	r23

				if (UsageListSize)
     3bc:	8f 93       	push	r24
     3be:	9f 93       	push	r25
     3c0:	af 93       	push	r26
     3c2:	bf 93       	push	r27
     3c4:	ef 93       	push	r30
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     3c6:	ff 93       	push	r31
     3c8:	80 91 e1 00 	lds	r24, 0x00E1
     3cc:	82 ff       	sbrs	r24, 2
     3ce:	0a c0       	rjmp	.+20     	; 0x3e4 <__vector_10+0x3e>
     3d0:	80 91 e2 00 	lds	r24, 0x00E2
     3d4:	82 ff       	sbrs	r24, 2
     3d6:	06 c0       	rjmp	.+12     	; 0x3e4 <__vector_10+0x3e>

					for (uint8_t i = 0; i < UsageListSize; i++)
     3d8:	80 91 e1 00 	lds	r24, 0x00E1
					  UsageList[i] = UsageList[i + 1];
     3dc:	8b 7f       	andi	r24, 0xFB	; 251
     3de:	80 93 e1 00 	sts	0x00E1, r24

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
     3e2:	10 d3       	rcall	.+1568   	; 0xa04 <USB_Event_Stub>
     3e4:	80 91 da 00 	lds	r24, 0x00DA
     3e8:	80 ff       	sbrs	r24, 0
     3ea:	1b c0       	rjmp	.+54     	; 0x422 <__vector_10+0x7c>
     3ec:	80 91 d8 00 	lds	r24, 0x00D8
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
     3f0:	80 ff       	sbrs	r24, 0
     3f2:	17 c0       	rjmp	.+46     	; 0x422 <__vector_10+0x7c>
     3f4:	80 91 da 00 	lds	r24, 0x00DA
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     3f8:	8e 7f       	andi	r24, 0xFE	; 254
     3fa:	80 93 da 00 	sts	0x00DA, r24
     3fe:	80 91 d9 00 	lds	r24, 0x00D9
     402:	19 bc       	out	0x29, r1	; 41
     404:	80 ff       	sbrs	r24, 0
     406:	0a c0       	rjmp	.+20     	; 0x41c <__vector_10+0x76>
     408:	82 e0       	ldi	r24, 0x02	; 2
     40a:	89 bd       	out	0x29, r24	; 41
     40c:	09 b4       	in	r0, 0x29	; 41
     40e:	00 fe       	sbrs	r0, 0
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     410:	fd cf       	rjmp	.-6      	; 0x40c <__vector_10+0x66>
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	80 93 82 01 	sts	0x0182, r24
     418:	e0 de       	rcall	.-576    	; 0x1da <EVENT_USB_Device_Connect>
     41a:	03 c0       	rjmp	.+6      	; 0x422 <__vector_10+0x7c>
     41c:	10 92 82 01 	sts	0x0182, r1
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     420:	dd de       	rcall	.-582    	; 0x1dc <EVENT_USB_Device_Disconnect>
     422:	80 91 e1 00 	lds	r24, 0x00E1
     426:	80 ff       	sbrs	r24, 0
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     428:	18 c0       	rjmp	.+48     	; 0x45a <__vector_10+0xb4>
     42a:	80 91 e2 00 	lds	r24, 0x00E2
				break;
     42e:	80 ff       	sbrs	r24, 0
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     430:	14 c0       	rjmp	.+40     	; 0x45a <__vector_10+0xb4>
     432:	80 91 e2 00 	lds	r24, 0x00E2
     436:	8e 7f       	andi	r24, 0xFE	; 254
     438:	80 93 e2 00 	sts	0x00E2, r24
     43c:	80 91 e2 00 	lds	r24, 0x00E2
     440:	80 61       	ori	r24, 0x10	; 16
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     442:	80 93 e2 00 	sts	0x00E2, r24
					NewReportItem.CollectionPath = CurrCollectionPath;
     446:	80 91 d8 00 	lds	r24, 0x00D8
     44a:	80 62       	ori	r24, 0x20	; 32
     44c:	80 93 d8 00 	sts	0x00D8, r24
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     450:	19 bc       	out	0x29, r1	; 41
     452:	85 e0       	ldi	r24, 0x05	; 5
     454:	80 93 82 01 	sts	0x0182, r24

					if (UsageListSize)
     458:	d5 d2       	rcall	.+1450   	; 0xa04 <USB_Event_Stub>
     45a:	80 91 e1 00 	lds	r24, 0x00E1
     45e:	84 ff       	sbrs	r24, 4
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     460:	2c c0       	rjmp	.+88     	; 0x4ba <__vector_10+0x114>
     462:	80 91 e2 00 	lds	r24, 0x00E2
     466:	84 ff       	sbrs	r24, 4
     468:	28 c0       	rjmp	.+80     	; 0x4ba <__vector_10+0x114>
     46a:	19 bc       	out	0x29, r1	; 41
     46c:	82 e0       	ldi	r24, 0x02	; 2
     46e:	89 bd       	out	0x29, r24	; 41
     470:	09 b4       	in	r0, 0x29	; 41
     472:	00 fe       	sbrs	r0, 0
     474:	fd cf       	rjmp	.-6      	; 0x470 <__vector_10+0xca>

						for (uint8_t i = 0; i < UsageListSize; i++)
     476:	80 91 d8 00 	lds	r24, 0x00D8
						  UsageList[i] = UsageList[i + 1];
     47a:	8f 7d       	andi	r24, 0xDF	; 223
     47c:	80 93 d8 00 	sts	0x00D8, r24

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
     480:	80 91 e1 00 	lds	r24, 0x00E1
     484:	8f 7e       	andi	r24, 0xEF	; 239
     486:	80 93 e1 00 	sts	0x00E1, r24
     48a:	80 91 e2 00 	lds	r24, 0x00E2
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
     48e:	8f 7e       	andi	r24, 0xEF	; 239
     490:	80 93 e2 00 	sts	0x00E2, r24
     494:	80 91 e2 00 	lds	r24, 0x00E2
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     498:	81 60       	ori	r24, 0x01	; 1
     49a:	80 93 e2 00 	sts	0x00E2, r24
     49e:	80 91 7e 01 	lds	r24, 0x017E
     4a2:	81 11       	cpse	r24, r1
     4a4:	04 c0       	rjmp	.+8      	; 0x4ae <__vector_10+0x108>
     4a6:	80 91 e3 00 	lds	r24, 0x00E3
     4aa:	87 ff       	sbrs	r24, 7
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__vector_10+0x10c>
     4ae:	84 e0       	ldi	r24, 0x04	; 4
     4b0:	01 c0       	rjmp	.+2      	; 0x4b4 <__vector_10+0x10e>
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	80 93 82 01 	sts	0x0182, r24
     4b8:	a5 d2       	rcall	.+1354   	; 0xa04 <USB_Event_Stub>
     4ba:	80 91 e1 00 	lds	r24, 0x00E1
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     4be:	83 ff       	sbrs	r24, 3
     4c0:	22 c0       	rjmp	.+68     	; 0x506 <__vector_10+0x160>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     4c2:	80 91 e2 00 	lds	r24, 0x00E2
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     4c6:	83 ff       	sbrs	r24, 3
     4c8:	1e c0       	rjmp	.+60     	; 0x506 <__vector_10+0x160>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     4ca:	80 91 e1 00 	lds	r24, 0x00E1
     4ce:	87 7f       	andi	r24, 0xF7	; 247
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     4d0:	80 93 e1 00 	sts	0x00E1, r24

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     4d4:	82 e0       	ldi	r24, 0x02	; 2
     4d6:	80 93 82 01 	sts	0x0182, r24
     4da:	10 92 7e 01 	sts	0x017E, r1
     4de:	80 91 e1 00 	lds	r24, 0x00E1
     4e2:	8e 7f       	andi	r24, 0xFE	; 254
     4e4:	80 93 e1 00 	sts	0x00E1, r24

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     4e8:	80 91 e2 00 	lds	r24, 0x00E2
     4ec:	8e 7f       	andi	r24, 0xFE	; 254
     4ee:	80 93 e2 00 	sts	0x00E2, r24
     4f2:	80 91 e2 00 	lds	r24, 0x00E2
     4f6:	80 61       	ori	r24, 0x10	; 16

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     4f8:	80 93 e2 00 	sts	0x00E2, r24
     4fc:	42 e0       	ldi	r20, 0x02	; 2
     4fe:	60 e0       	ldi	r22, 0x00	; 0
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	f9 de       	rcall	.-526    	; 0x2f6 <Endpoint_ConfigureEndpoint_Prv>
     504:	7f d2       	rcall	.+1278   	; 0xa04 <USB_Event_Stub>
     506:	ff 91       	pop	r31
     508:	ef 91       	pop	r30
     50a:	bf 91       	pop	r27
     50c:	af 91       	pop	r26
     50e:	9f 91       	pop	r25
     510:	8f 91       	pop	r24
     512:	7f 91       	pop	r23
     514:	6f 91       	pop	r22
     516:	5f 91       	pop	r21
     518:	4f 91       	pop	r20
     51a:	3f 91       	pop	r19
     51c:	2f 91       	pop	r18
     51e:	0f 90       	pop	r0
     520:	0f be       	out	0x3f, r0	; 63
     522:	0f 90       	pop	r0
     524:	1f 90       	pop	r1
     526:	18 95       	reti

00000528 <Endpoint_Write_Control_Stream_LE>:
     528:	40 91 89 01 	lds	r20, 0x0189

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     52c:	50 91 8a 01 	lds	r21, 0x018A
     530:	46 17       	cp	r20, r22
					  return HID_PARSE_InsufficientReportItems;
     532:	57 07       	cpc	r21, r23
     534:	48 f0       	brcs	.+18     	; 0x548 <Endpoint_Write_Control_Stream_LE+0x20>

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     536:	61 15       	cp	r22, r1
     538:	71 05       	cpc	r23, r1
     53a:	39 f4       	brne	.+14     	; 0x54a <Endpoint_Write_Control_Stream_LE+0x22>
     53c:	40 91 e8 00 	lds	r20, 0x00E8
     540:	4e 77       	andi	r20, 0x7E	; 126
     542:	40 93 e8 00 	sts	0x00E8, r20
     546:	01 c0       	rjmp	.+2      	; 0x54a <Endpoint_Write_Control_Stream_LE+0x22>
     548:	ba 01       	movw	r22, r20
     54a:	fc 01       	movw	r30, r24
     54c:	40 e0       	ldi	r20, 0x00	; 0
     54e:	33 c0       	rjmp	.+102    	; 0x5b6 <Endpoint_Write_Control_Stream_LE+0x8e>
     550:	80 91 82 01 	lds	r24, 0x0182
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     554:	88 23       	and	r24, r24
     556:	09 f4       	brne	.+2      	; 0x55a <Endpoint_Write_Control_Stream_LE+0x32>
     558:	42 c0       	rjmp	.+132    	; 0x5de <Endpoint_Write_Control_Stream_LE+0xb6>
     55a:	85 30       	cpi	r24, 0x05	; 5
     55c:	09 f4       	brne	.+2      	; 0x560 <Endpoint_Write_Control_Stream_LE+0x38>
     55e:	41 c0       	rjmp	.+130    	; 0x5e2 <Endpoint_Write_Control_Stream_LE+0xba>
     560:	80 91 e8 00 	lds	r24, 0x00E8
     564:	83 fd       	sbrc	r24, 3
     566:	39 c0       	rjmp	.+114    	; 0x5da <Endpoint_Write_Control_Stream_LE+0xb2>
     568:	80 91 e8 00 	lds	r24, 0x00E8
     56c:	82 fd       	sbrc	r24, 2
     56e:	2f c0       	rjmp	.+94     	; 0x5ce <Endpoint_Write_Control_Stream_LE+0xa6>
     570:	80 91 e8 00 	lds	r24, 0x00E8
     574:	80 ff       	sbrs	r24, 0
     576:	1f c0       	rjmp	.+62     	; 0x5b6 <Endpoint_Write_Control_Stream_LE+0x8e>
     578:	90 91 f3 00 	lds	r25, 0x00F3
     57c:	80 91 f2 00 	lds	r24, 0x00F2
     580:	39 2f       	mov	r19, r25
     582:	20 e0       	ldi	r18, 0x00	; 0
     584:	a9 01       	movw	r20, r18
     586:	48 2b       	or	r20, r24
     588:	ca 01       	movw	r24, r20
     58a:	06 c0       	rjmp	.+12     	; 0x598 <Endpoint_Write_Control_Stream_LE+0x70>
     58c:	41 91       	ld	r20, Z+
     58e:	40 93 f1 00 	sts	0x00F1, r20
     592:	61 50       	subi	r22, 0x01	; 1
     594:	71 09       	sbc	r23, r1
     596:	01 96       	adiw	r24, 0x01	; 1
     598:	61 15       	cp	r22, r1
     59a:	71 05       	cpc	r23, r1
     59c:	19 f0       	breq	.+6      	; 0x5a4 <Endpoint_Write_Control_Stream_LE+0x7c>
     59e:	88 30       	cpi	r24, 0x08	; 8
     5a0:	91 05       	cpc	r25, r1
     5a2:	a0 f3       	brcs	.-24     	; 0x58c <Endpoint_Write_Control_Stream_LE+0x64>
     5a4:	41 e0       	ldi	r20, 0x01	; 1
     5a6:	08 97       	sbiw	r24, 0x08	; 8
     5a8:	09 f0       	breq	.+2      	; 0x5ac <Endpoint_Write_Control_Stream_LE+0x84>
     5aa:	40 e0       	ldi	r20, 0x00	; 0
     5ac:	80 91 e8 00 	lds	r24, 0x00E8
     5b0:	8e 77       	andi	r24, 0x7E	; 126
     5b2:	80 93 e8 00 	sts	0x00E8, r24
     5b6:	61 15       	cp	r22, r1
     5b8:	71 05       	cpc	r23, r1
     5ba:	51 f6       	brne	.-108    	; 0x550 <Endpoint_Write_Control_Stream_LE+0x28>
     5bc:	41 11       	cpse	r20, r1
     5be:	c8 cf       	rjmp	.-112    	; 0x550 <Endpoint_Write_Control_Stream_LE+0x28>
     5c0:	06 c0       	rjmp	.+12     	; 0x5ce <Endpoint_Write_Control_Stream_LE+0xa6>
     5c2:	80 91 82 01 	lds	r24, 0x0182
     5c6:	88 23       	and	r24, r24
     5c8:	51 f0       	breq	.+20     	; 0x5de <Endpoint_Write_Control_Stream_LE+0xb6>
     5ca:	85 30       	cpi	r24, 0x05	; 5
     5cc:	51 f0       	breq	.+20     	; 0x5e2 <Endpoint_Write_Control_Stream_LE+0xba>
     5ce:	80 91 e8 00 	lds	r24, 0x00E8
     5d2:	82 ff       	sbrs	r24, 2
     5d4:	f6 cf       	rjmp	.-20     	; 0x5c2 <Endpoint_Write_Control_Stream_LE+0x9a>
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	08 95       	ret
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	08 95       	ret
     5de:	82 e0       	ldi	r24, 0x02	; 2
     5e0:	08 95       	ret
     5e2:	83 e0       	ldi	r24, 0x03	; 3
     5e4:	08 95       	ret

000005e6 <Endpoint_Read_Control_Stream_LE>:
     5e6:	61 15       	cp	r22, r1
     5e8:	71 05       	cpc	r23, r1
     5ea:	29 f4       	brne	.+10     	; 0x5f6 <Endpoint_Read_Control_Stream_LE+0x10>
     5ec:	40 91 e8 00 	lds	r20, 0x00E8
					  ParserData->TotalReportItems++;
     5f0:	4b 77       	andi	r20, 0x7B	; 123
     5f2:	40 93 e8 00 	sts	0x00E8, r20
     5f6:	ac 01       	movw	r20, r24
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     5f8:	28 c0       	rjmp	.+80     	; 0x64a <Endpoint_Read_Control_Stream_LE+0x64>
     5fa:	80 91 82 01 	lds	r24, 0x0182
     5fe:	88 23       	and	r24, r24
     600:	b9 f1       	breq	.+110    	; 0x670 <Endpoint_Read_Control_Stream_LE+0x8a>
     602:	85 30       	cpi	r24, 0x05	; 5
     604:	79 f1       	breq	.+94     	; 0x664 <Endpoint_Read_Control_Stream_LE+0x7e>
     606:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     60a:	83 fd       	sbrc	r24, 3
     60c:	2d c0       	rjmp	.+90     	; 0x668 <Endpoint_Read_Control_Stream_LE+0x82>
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     60e:	80 91 e8 00 	lds	r24, 0x00E8
     612:	82 ff       	sbrs	r24, 2
     614:	f2 cf       	rjmp	.-28     	; 0x5fa <Endpoint_Read_Control_Stream_LE+0x14>
     616:	fa 01       	movw	r30, r20
     618:	07 c0       	rjmp	.+14     	; 0x628 <Endpoint_Read_Control_Stream_LE+0x42>
     61a:	80 91 f1 00 	lds	r24, 0x00F1
     61e:	81 93       	st	Z+, r24
     620:	af 01       	movw	r20, r30
     622:	61 50       	subi	r22, 0x01	; 1
     624:	71 09       	sbc	r23, r1
     626:	61 f0       	breq	.+24     	; 0x640 <Endpoint_Read_Control_Stream_LE+0x5a>
     628:	af 01       	movw	r20, r30
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     62a:	90 91 f3 00 	lds	r25, 0x00F3
     62e:	80 91 f2 00 	lds	r24, 0x00F2
     632:	39 2f       	mov	r19, r25
     634:	20 e0       	ldi	r18, 0x00	; 0
     636:	d9 01       	movw	r26, r18
     638:	a8 2b       	or	r26, r24
     63a:	cd 01       	movw	r24, r26
     63c:	89 2b       	or	r24, r25
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     63e:	69 f7       	brne	.-38     	; 0x61a <Endpoint_Read_Control_Stream_LE+0x34>
     640:	80 91 e8 00 	lds	r24, 0x00E8
			
			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     644:	8b 77       	andi	r24, 0x7B	; 123
     646:	80 93 e8 00 	sts	0x00E8, r24
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     64a:	61 15       	cp	r22, r1
     64c:	71 05       	cpc	r23, r1
     64e:	a9 f6       	brne	.-86     	; 0x5fa <Endpoint_Read_Control_Stream_LE+0x14>
     650:	80 91 e8 00 	lds	r24, 0x00E8
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     654:	80 fd       	sbrc	r24, 0
     656:	0a c0       	rjmp	.+20     	; 0x66c <Endpoint_Read_Control_Stream_LE+0x86>
     658:	80 91 82 01 	lds	r24, 0x0182
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     65c:	88 23       	and	r24, r24
     65e:	41 f0       	breq	.+16     	; 0x670 <Endpoint_Read_Control_Stream_LE+0x8a>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     660:	85 30       	cpi	r24, 0x05	; 5
     662:	b1 f7       	brne	.-20     	; 0x650 <Endpoint_Read_Control_Stream_LE+0x6a>
     664:	83 e0       	ldi	r24, 0x03	; 3
     666:	08 95       	ret
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	08 95       	ret
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	08 95       	ret
	  return HID_PARSE_NoUnfilteredReportItems;
     670:	82 e0       	ldi	r24, 0x02	; 2
     672:	08 95       	ret

00000674 <Endpoint_Write_Control_PStream_LE>:

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     674:	40 91 89 01 	lds	r20, 0x0189

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     678:	50 91 8a 01 	lds	r21, 0x018A

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     67c:	46 17       	cp	r20, r22
     67e:	57 07       	cpc	r21, r23
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     680:	48 f0       	brcs	.+18     	; 0x694 <Endpoint_Write_Control_PStream_LE+0x20>
     682:	61 15       	cp	r22, r1
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     684:	71 05       	cpc	r23, r1
     686:	39 f4       	brne	.+14     	; 0x696 <Endpoint_Write_Control_PStream_LE+0x22>
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     688:	40 91 e8 00 	lds	r20, 0x00E8
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     68c:	4e 77       	andi	r20, 0x7E	; 126
     68e:	40 93 e8 00 	sts	0x00E8, r20
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     692:	01 c0       	rjmp	.+2      	; 0x696 <Endpoint_Write_Control_PStream_LE+0x22>
     694:	ba 01       	movw	r22, r20
     696:	fc 01       	movw	r30, r24

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     698:	40 e0       	ldi	r20, 0x00	; 0
     69a:	34 c0       	rjmp	.+104    	; 0x704 <Endpoint_Write_Control_PStream_LE+0x90>
     69c:	80 91 82 01 	lds	r24, 0x0182
     6a0:	88 23       	and	r24, r24
     6a2:	09 f4       	brne	.+2      	; 0x6a6 <Endpoint_Write_Control_PStream_LE+0x32>
     6a4:	43 c0       	rjmp	.+134    	; 0x72c <Endpoint_Write_Control_PStream_LE+0xb8>
     6a6:	85 30       	cpi	r24, 0x05	; 5
     6a8:	09 f4       	brne	.+2      	; 0x6ac <Endpoint_Write_Control_PStream_LE+0x38>
     6aa:	42 c0       	rjmp	.+132    	; 0x730 <Endpoint_Write_Control_PStream_LE+0xbc>
     6ac:	80 91 e8 00 	lds	r24, 0x00E8
     6b0:	83 fd       	sbrc	r24, 3
     6b2:	3a c0       	rjmp	.+116    	; 0x728 <Endpoint_Write_Control_PStream_LE+0xb4>
     6b4:	80 91 e8 00 	lds	r24, 0x00E8
     6b8:	82 fd       	sbrc	r24, 2
     6ba:	30 c0       	rjmp	.+96     	; 0x71c <Endpoint_Write_Control_PStream_LE+0xa8>
     6bc:	80 91 e8 00 	lds	r24, 0x00E8
     6c0:	80 ff       	sbrs	r24, 0
     6c2:	20 c0       	rjmp	.+64     	; 0x704 <Endpoint_Write_Control_PStream_LE+0x90>
     6c4:	90 91 f3 00 	lds	r25, 0x00F3
     6c8:	80 91 f2 00 	lds	r24, 0x00F2
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     6cc:	39 2f       	mov	r19, r25
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	a9 01       	movw	r20, r18
     6d2:	48 2b       	or	r20, r24
     6d4:	ca 01       	movw	r24, r20

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     6d6:	07 c0       	rjmp	.+14     	; 0x6e6 <Endpoint_Write_Control_PStream_LE+0x72>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     6d8:	44 91       	lpm	r20, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     6da:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     6de:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     6e0:	61 50       	subi	r22, 0x01	; 1
     6e2:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     6e4:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     6e6:	61 15       	cp	r22, r1
     6e8:	71 05       	cpc	r23, r1
     6ea:	19 f0       	breq	.+6      	; 0x6f2 <Endpoint_Write_Control_PStream_LE+0x7e>
     6ec:	88 30       	cpi	r24, 0x08	; 8
     6ee:	91 05       	cpc	r25, r1
     6f0:	98 f3       	brcs	.-26     	; 0x6d8 <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     6f2:	41 e0       	ldi	r20, 0x01	; 1
     6f4:	08 97       	sbiw	r24, 0x08	; 8
     6f6:	09 f0       	breq	.+2      	; 0x6fa <Endpoint_Write_Control_PStream_LE+0x86>
     6f8:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     6fa:	80 91 e8 00 	lds	r24, 0x00E8
     6fe:	8e 77       	andi	r24, 0x7E	; 126
     700:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     704:	61 15       	cp	r22, r1
     706:	71 05       	cpc	r23, r1
     708:	49 f6       	brne	.-110    	; 0x69c <Endpoint_Write_Control_PStream_LE+0x28>
     70a:	41 11       	cpse	r20, r1
     70c:	c7 cf       	rjmp	.-114    	; 0x69c <Endpoint_Write_Control_PStream_LE+0x28>
     70e:	06 c0       	rjmp	.+12     	; 0x71c <Endpoint_Write_Control_PStream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     710:	80 91 82 01 	lds	r24, 0x0182

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     714:	88 23       	and	r24, r24
     716:	51 f0       	breq	.+20     	; 0x72c <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     718:	85 30       	cpi	r24, 0x05	; 5
     71a:	51 f0       	breq	.+20     	; 0x730 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     71c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     720:	82 ff       	sbrs	r24, 2
     722:	f6 cf       	rjmp	.-20     	; 0x710 <Endpoint_Write_Control_PStream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     72c:	82 e0       	ldi	r24, 0x02	; 2
     72e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     730:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     732:	08 95       	ret

00000734 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     734:	ef 92       	push	r14
     736:	ff 92       	push	r15
     738:	0f 93       	push	r16
     73a:	1f 93       	push	r17
     73c:	cf 93       	push	r28
     73e:	df 93       	push	r29
     740:	cd b7       	in	r28, 0x3d	; 61
     742:	de b7       	in	r29, 0x3e	; 62
     744:	ac 97       	sbiw	r28, 0x2c	; 44
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	f8 94       	cli
     74a:	de bf       	out	0x3e, r29	; 62
     74c:	0f be       	out	0x3f, r0	; 63
     74e:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     750:	e3 e8       	ldi	r30, 0x83	; 131
     752:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     754:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     758:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     75a:	21 e0       	ldi	r18, 0x01	; 1
     75c:	eb 38       	cpi	r30, 0x8B	; 139
     75e:	f2 07       	cpc	r31, r18
     760:	c9 f7       	brne	.-14     	; 0x754 <USB_Device_ProcessControlRequest+0x20>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     762:	52 dd       	rcall	.-1372   	; 0x208 <EVENT_USB_Device_ControlRequest>
     764:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     768:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     76a:	31 c1       	rjmp	.+610    	; 0x9ce <USB_Device_ProcessControlRequest+0x29a>
     76c:	80 91 83 01 	lds	r24, 0x0183
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     770:	90 91 84 01 	lds	r25, 0x0184

		switch (USB_ControlRequest.bRequest)
     774:	95 30       	cpi	r25, 0x05	; 5
     776:	09 f4       	brne	.+2      	; 0x77a <USB_Device_ProcessControlRequest+0x46>
     778:	87 c0       	rjmp	.+270    	; 0x888 <USB_Device_ProcessControlRequest+0x154>
     77a:	38 f4       	brcc	.+14     	; 0x78a <USB_Device_ProcessControlRequest+0x56>
     77c:	91 30       	cpi	r25, 0x01	; 1
     77e:	b1 f1       	breq	.+108    	; 0x7ec <USB_Device_ProcessControlRequest+0xb8>
     780:	70 f0       	brcs	.+28     	; 0x79e <USB_Device_ProcessControlRequest+0x6a>
     782:	93 30       	cpi	r25, 0x03	; 3
     784:	09 f0       	breq	.+2      	; 0x788 <USB_Device_ProcessControlRequest+0x54>
     786:	23 c1       	rjmp	.+582    	; 0x9ce <USB_Device_ProcessControlRequest+0x29a>
     788:	31 c0       	rjmp	.+98     	; 0x7ec <USB_Device_ProcessControlRequest+0xb8>
     78a:	98 30       	cpi	r25, 0x08	; 8
     78c:	09 f4       	brne	.+2      	; 0x790 <USB_Device_ProcessControlRequest+0x5c>
     78e:	f4 c0       	rjmp	.+488    	; 0x978 <USB_Device_ProcessControlRequest+0x244>
     790:	99 30       	cpi	r25, 0x09	; 9
     792:	09 f4       	brne	.+2      	; 0x796 <USB_Device_ProcessControlRequest+0x62>
     794:	00 c1       	rjmp	.+512    	; 0x996 <USB_Device_ProcessControlRequest+0x262>
     796:	96 30       	cpi	r25, 0x06	; 6
     798:	09 f0       	breq	.+2      	; 0x79c <USB_Device_ProcessControlRequest+0x68>
     79a:	19 c1       	rjmp	.+562    	; 0x9ce <USB_Device_ProcessControlRequest+0x29a>
     79c:	9c c0       	rjmp	.+312    	; 0x8d6 <USB_Device_ProcessControlRequest+0x1a2>
     79e:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     7a0:	21 f0       	breq	.+8      	; 0x7aa <USB_Device_ProcessControlRequest+0x76>
     7a2:	82 38       	cpi	r24, 0x82	; 130
     7a4:	09 f0       	breq	.+2      	; 0x7a8 <USB_Device_ProcessControlRequest+0x74>
     7a6:	13 c1       	rjmp	.+550    	; 0x9ce <USB_Device_ProcessControlRequest+0x29a>
     7a8:	08 c0       	rjmp	.+16     	; 0x7ba <USB_Device_ProcessControlRequest+0x86>
     7aa:	80 91 7f 01 	lds	r24, 0x017F
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     7ae:	90 91 80 01 	lds	r25, 0x0180
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     7b2:	99 23       	and	r25, r25
     7b4:	89 f0       	breq	.+34     	; 0x7d8 <USB_Device_ProcessControlRequest+0xa4>
     7b6:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     7b8:	0f c0       	rjmp	.+30     	; 0x7d8 <USB_Device_ProcessControlRequest+0xa4>
     7ba:	80 91 87 01 	lds	r24, 0x0187
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     7be:	90 91 88 01 	lds	r25, 0x0188
     7c2:	8f 70       	andi	r24, 0x0F	; 15
     7c4:	99 27       	eor	r25, r25
     7c6:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     7ca:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     7ce:	85 fb       	bst	r24, 5
     7d0:	88 27       	eor	r24, r24
     7d2:	80 f9       	bld	r24, 0
     7d4:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     7d8:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     7dc:	97 7f       	andi	r25, 0xF7	; 247
     7de:	90 93 e8 00 	sts	0x00E8, r25
     7e2:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     7e6:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     7ea:	d1 c0       	rjmp	.+418    	; 0x98e <USB_Device_ProcessControlRequest+0x25a>
     7ec:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     7ee:	19 f0       	breq	.+6      	; 0x7f6 <USB_Device_ProcessControlRequest+0xc2>
     7f0:	82 30       	cpi	r24, 0x02	; 2
     7f2:	09 f0       	breq	.+2      	; 0x7f6 <USB_Device_ProcessControlRequest+0xc2>
     7f4:	ec c0       	rjmp	.+472    	; 0x9ce <USB_Device_ProcessControlRequest+0x29a>
     7f6:	8f 71       	andi	r24, 0x1F	; 31
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     7f8:	21 f0       	breq	.+8      	; 0x802 <USB_Device_ProcessControlRequest+0xce>
     7fa:	82 30       	cpi	r24, 0x02	; 2
     7fc:	09 f0       	breq	.+2      	; 0x800 <USB_Device_ProcessControlRequest+0xcc>
     7fe:	e7 c0       	rjmp	.+462    	; 0x9ce <USB_Device_ProcessControlRequest+0x29a>
     800:	0b c0       	rjmp	.+22     	; 0x818 <USB_Device_ProcessControlRequest+0xe4>
     802:	80 91 85 01 	lds	r24, 0x0185
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     806:	81 30       	cpi	r24, 0x01	; 1
     808:	09 f0       	breq	.+2      	; 0x80c <USB_Device_ProcessControlRequest+0xd8>
     80a:	e1 c0       	rjmp	.+450    	; 0x9ce <USB_Device_ProcessControlRequest+0x29a>
     80c:	93 30       	cpi	r25, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     80e:	09 f0       	breq	.+2      	; 0x812 <USB_Device_ProcessControlRequest+0xde>
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	80 93 80 01 	sts	0x0180, r24
     816:	2f c0       	rjmp	.+94     	; 0x876 <USB_Device_ProcessControlRequest+0x142>
     818:	80 91 85 01 	lds	r24, 0x0185

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     81c:	81 11       	cpse	r24, r1
     81e:	2b c0       	rjmp	.+86     	; 0x876 <USB_Device_ProcessControlRequest+0x142>
     820:	80 91 87 01 	lds	r24, 0x0187
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     824:	90 91 88 01 	lds	r25, 0x0188
     828:	8f 70       	andi	r24, 0x0F	; 15
     82a:	99 27       	eor	r25, r25
     82c:	00 97       	sbiw	r24, 0x00	; 0

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     82e:	09 f4       	brne	.+2      	; 0x832 <USB_Device_ProcessControlRequest+0xfe>
     830:	ce c0       	rjmp	.+412    	; 0x9ce <USB_Device_ProcessControlRequest+0x29a>
     832:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     836:	20 91 eb 00 	lds	r18, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     83a:	20 ff       	sbrs	r18, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     83c:	1c c0       	rjmp	.+56     	; 0x876 <USB_Device_ProcessControlRequest+0x142>
     83e:	20 91 84 01 	lds	r18, 0x0184
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     842:	23 30       	cpi	r18, 0x03	; 3
     844:	21 f4       	brne	.+8      	; 0x84e <USB_Device_ProcessControlRequest+0x11a>
     846:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     84a:	80 62       	ori	r24, 0x20	; 32
     84c:	12 c0       	rjmp	.+36     	; 0x872 <USB_Device_ProcessControlRequest+0x13e>
     84e:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     852:	90 61       	ori	r25, 0x10	; 16
     854:	90 93 eb 00 	sts	0x00EB, r25
     858:	21 e0       	ldi	r18, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	01 c0       	rjmp	.+2      	; 0x860 <USB_Device_ProcessControlRequest+0x12c>
     85e:	22 0f       	add	r18, r18
     860:	8a 95       	dec	r24
     862:	ea f7       	brpl	.-6      	; 0x85e <USB_Device_ProcessControlRequest+0x12a>
     864:	20 93 ea 00 	sts	0x00EA, r18
     868:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     86c:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     870:	88 60       	ori	r24, 0x08	; 8
     872:	80 93 eb 00 	sts	0x00EB, r24
     876:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     87a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     87e:	87 7f       	andi	r24, 0xF7	; 247
     880:	80 93 e8 00 	sts	0x00E8, r24
     884:	6f dd       	rcall	.-1314   	; 0x364 <Endpoint_ClearStatusStage>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     886:	a3 c0       	rjmp	.+326    	; 0x9ce <USB_Device_ProcessControlRequest+0x29a>
     888:	81 11       	cpse	r24, r1
     88a:	a1 c0       	rjmp	.+322    	; 0x9ce <USB_Device_ProcessControlRequest+0x29a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     88c:	00 91 85 01 	lds	r16, 0x0185
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
     890:	10 91 86 01 	lds	r17, 0x0186
     894:	0f 77       	andi	r16, 0x7F	; 127
     896:	11 27       	eor	r17, r17
     898:	e0 2e       	mov	r14, r16
     89a:	ff b6       	in	r15, 0x3f	; 63
     89c:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     89e:	80 91 e8 00 	lds	r24, 0x00E8
     8a2:	87 7f       	andi	r24, 0xF7	; 247
     8a4:	80 93 e8 00 	sts	0x00E8, r24
     8a8:	5d dd       	rcall	.-1350   	; 0x364 <Endpoint_ClearStatusStage>
     8aa:	80 91 e8 00 	lds	r24, 0x00E8
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     8ae:	80 ff       	sbrs	r24, 0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     8b0:	fc cf       	rjmp	.-8      	; 0x8aa <USB_Device_ProcessControlRequest+0x176>
     8b2:	80 91 e3 00 	lds	r24, 0x00E3

	while (!(Endpoint_IsINReady()));
     8b6:	80 78       	andi	r24, 0x80	; 128
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     8b8:	80 2b       	or	r24, r16
     8ba:	80 93 e3 00 	sts	0x00E3, r24
     8be:	80 68       	ori	r24, 0x80	; 128

				UDADDR = Temp;
     8c0:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
     8c4:	ee 20       	and	r14, r14
     8c6:	11 f0       	breq	.+4      	; 0x8cc <USB_Device_ProcessControlRequest+0x198>
     8c8:	83 e0       	ldi	r24, 0x03	; 3

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     8ca:	01 c0       	rjmp	.+2      	; 0x8ce <USB_Device_ProcessControlRequest+0x19a>
     8cc:	82 e0       	ldi	r24, 0x02	; 2
     8ce:	80 93 82 01 	sts	0x0182, r24
     8d2:	ff be       	out	0x3f, r15	; 63
     8d4:	7c c0       	rjmp	.+248    	; 0x9ce <USB_Device_ProcessControlRequest+0x29a>
     8d6:	80 58       	subi	r24, 0x80	; 128
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     8d8:	82 30       	cpi	r24, 0x02	; 2
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
     8da:	08 f0       	brcs	.+2      	; 0x8de <USB_Device_ProcessControlRequest+0x1aa>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     8dc:	78 c0       	rjmp	.+240    	; 0x9ce <USB_Device_ProcessControlRequest+0x29a>
     8de:	80 91 85 01 	lds	r24, 0x0185
     8e2:	90 91 86 01 	lds	r25, 0x0186
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     8e6:	8c 3d       	cpi	r24, 0xDC	; 220
     8e8:	23 e0       	ldi	r18, 0x03	; 3
     8ea:	92 07       	cpc	r25, r18
     8ec:	71 f5       	brne	.+92     	; 0x94a <USB_Device_ProcessControlRequest+0x216>
     8ee:	83 e0       	ldi	r24, 0x03	; 3
     8f0:	8a 83       	std	Y+2, r24	; 0x02
     8f2:	8a e2       	ldi	r24, 0x2A	; 42
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     8f4:	89 83       	std	Y+1, r24	; 0x01
     8f6:	4f b7       	in	r20, 0x3f	; 63
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     8f8:	f8 94       	cli
     8fa:	de 01       	movw	r26, r28
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     8fc:	13 96       	adiw	r26, 0x03	; 3
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     8fe:	20 e0       	ldi	r18, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
     900:	3e e0       	ldi	r19, 0x0E	; 14
     902:	51 e2       	ldi	r21, 0x21	; 33
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     904:	e3 2f       	mov	r30, r19
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     906:	f0 e0       	ldi	r31, 0x00	; 0

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     908:	50 93 57 00 	sts	0x0057, r21
     90c:	e4 91       	lpm	r30, Z
     90e:	20 ff       	sbrs	r18, 0
     910:	03 c0       	rjmp	.+6      	; 0x918 <USB_Device_ProcessControlRequest+0x1e4>
     912:	e2 95       	swap	r30

					if (SerialCharNum & 0x01)
     914:	ef 70       	andi	r30, 0x0F	; 15
     916:	3f 5f       	subi	r19, 0xFF	; 255
					{
						SerialByte >>= 4;
     918:	ef 70       	andi	r30, 0x0F	; 15
     91a:	8e 2f       	mov	r24, r30
						SigReadAddress++;
     91c:	90 e0       	ldi	r25, 0x00	; 0
					}

					SerialByte &= 0x0F;
     91e:	ea 30       	cpi	r30, 0x0A	; 10
     920:	10 f0       	brcs	.+4      	; 0x926 <USB_Device_ProcessControlRequest+0x1f2>
     922:	c7 96       	adiw	r24, 0x37	; 55

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     924:	01 c0       	rjmp	.+2      	; 0x928 <USB_Device_ProcessControlRequest+0x1f4>
     926:	c0 96       	adiw	r24, 0x30	; 48
     928:	8d 93       	st	X+, r24
     92a:	9d 93       	st	X+, r25
     92c:	2f 5f       	subi	r18, 0xFF	; 255
     92e:	24 31       	cpi	r18, 0x14	; 20
     930:	49 f7       	brne	.-46     	; 0x904 <USB_Device_ProcessControlRequest+0x1d0>
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     932:	4f bf       	out	0x3f, r20	; 63
     934:	80 91 e8 00 	lds	r24, 0x00E8
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     938:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     93a:	80 93 e8 00 	sts	0x00E8, r24
     93e:	6a e2       	ldi	r22, 0x2A	; 42
     940:	70 e0       	ldi	r23, 0x00	; 0
     942:	ce 01       	movw	r24, r28

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     944:	01 96       	adiw	r24, 0x01	; 1
     946:	f0 dd       	rcall	.-1056   	; 0x528 <Endpoint_Write_Control_Stream_LE>
     948:	11 c0       	rjmp	.+34     	; 0x96c <USB_Device_ProcessControlRequest+0x238>
     94a:	ae 01       	movw	r20, r28
     94c:	45 5d       	subi	r20, 0xD5	; 213
     94e:	5f 4f       	sbci	r21, 0xFF	; 255
     950:	60 91 87 01 	lds	r22, 0x0187
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     954:	93 dc       	rcall	.-1754   	; 0x27c <CALLBACK_USB_GetDescriptor>
     956:	00 97       	sbiw	r24, 0x00	; 0
     958:	d1 f1       	breq	.+116    	; 0x9ce <USB_Device_ProcessControlRequest+0x29a>
     95a:	20 91 e8 00 	lds	r18, 0x00E8
     95e:	27 7f       	andi	r18, 0xF7	; 247
     960:	20 93 e8 00 	sts	0x00E8, r18
     964:	bc 01       	movw	r22, r24
     966:	8b a5       	ldd	r24, Y+43	; 0x2b
     968:	9c a5       	ldd	r25, Y+44	; 0x2c
     96a:	84 de       	rcall	.-760    	; 0x674 <Endpoint_Write_Control_PStream_LE>
     96c:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     970:	8b 77       	andi	r24, 0x7B	; 123
     972:	80 93 e8 00 	sts	0x00E8, r24
     976:	2b c0       	rjmp	.+86     	; 0x9ce <USB_Device_ProcessControlRequest+0x29a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     978:	80 38       	cpi	r24, 0x80	; 128
     97a:	49 f5       	brne	.+82     	; 0x9ce <USB_Device_ProcessControlRequest+0x29a>
     97c:	80 91 e8 00 	lds	r24, 0x00E8
     980:	87 7f       	andi	r24, 0xF7	; 247
     982:	80 93 e8 00 	sts	0x00E8, r24
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     986:	80 91 7e 01 	lds	r24, 0x017E
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     98a:	80 93 f1 00 	sts	0x00F1, r24
     98e:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     992:	8e 77       	andi	r24, 0x7E	; 126
     994:	75 cf       	rjmp	.-278    	; 0x880 <USB_Device_ProcessControlRequest+0x14c>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     996:	81 11       	cpse	r24, r1
     998:	1a c0       	rjmp	.+52     	; 0x9ce <USB_Device_ProcessControlRequest+0x29a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     99a:	90 91 85 01 	lds	r25, 0x0185
     99e:	92 30       	cpi	r25, 0x02	; 2
     9a0:	b0 f4       	brcc	.+44     	; 0x9ce <USB_Device_ProcessControlRequest+0x29a>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     9a2:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     9a6:	87 7f       	andi	r24, 0xF7	; 247
     9a8:	80 93 e8 00 	sts	0x00E8, r24
     9ac:	90 93 7e 01 	sts	0x017E, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     9b0:	d9 dc       	rcall	.-1614   	; 0x364 <Endpoint_ClearStatusStage>
     9b2:	80 91 7e 01 	lds	r24, 0x017E
     9b6:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     9b8:	04 c0       	rjmp	.+8      	; 0x9c2 <USB_Device_ProcessControlRequest+0x28e>
     9ba:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
     9be:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
     9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <USB_Device_ProcessControlRequest+0x292>
     9c2:	84 e0       	ldi	r24, 0x04	; 4
     9c4:	01 c0       	rjmp	.+2      	; 0x9c8 <USB_Device_ProcessControlRequest+0x294>
     9c6:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     9c8:	80 93 82 01 	sts	0x0182, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     9cc:	08 dc       	rcall	.-2032   	; 0x1de <EVENT_USB_Device_ConfigurationChanged>
     9ce:	80 91 e8 00 	lds	r24, 0x00E8
     9d2:	83 ff       	sbrs	r24, 3
     9d4:	0a c0       	rjmp	.+20     	; 0x9ea <USB_Device_ProcessControlRequest+0x2b6>
     9d6:	80 91 eb 00 	lds	r24, 0x00EB

	EVENT_USB_Device_ConfigurationChanged();
     9da:	80 62       	ori	r24, 0x20	; 32
     9dc:	80 93 eb 00 	sts	0x00EB, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     9e0:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     9e4:	87 7f       	andi	r24, 0xF7	; 247
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     9e6:	80 93 e8 00 	sts	0x00E8, r24
     9ea:	ac 96       	adiw	r28, 0x2c	; 44
     9ec:	0f b6       	in	r0, 0x3f	; 63
     9ee:	f8 94       	cli
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     9f0:	de bf       	out	0x3e, r29	; 62
     9f2:	0f be       	out	0x3f, r0	; 63
     9f4:	cd bf       	out	0x3d, r28	; 61
     9f6:	df 91       	pop	r29
     9f8:	cf 91       	pop	r28
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
     9fa:	1f 91       	pop	r17
     9fc:	0f 91       	pop	r16
     9fe:	ff 90       	pop	r15
     a00:	ef 90       	pop	r14
     a02:	08 95       	ret

00000a04 <USB_Event_Stub>:
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

// cppcheck-suppress unusedFunction
void USB_Event_Stub(void)
{
     a04:	08 95       	ret

00000a06 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     a06:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     a08:	80 91 82 01 	lds	r24, 0x0182
     a0c:	88 23       	and	r24, r24
     a0e:	a9 f0       	breq	.+42     	; 0xa3a <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     a10:	80 91 e9 00 	lds	r24, 0x00E9
     a14:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     a16:	90 91 ec 00 	lds	r25, 0x00EC
     a1a:	90 ff       	sbrs	r25, 0
     a1c:	02 c0       	rjmp	.+4      	; 0xa22 <USB_USBTask+0x1c>
     a1e:	90 e8       	ldi	r25, 0x80	; 128
     a20:	01 c0       	rjmp	.+2      	; 0xa24 <USB_USBTask+0x1e>
     a22:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     a24:	c9 2f       	mov	r28, r25
     a26:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a28:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a2c:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     a30:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     a32:	80 de       	rcall	.-768    	; 0x734 <USB_Device_ProcessControlRequest>
     a34:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a36:	c0 93 e9 00 	sts	0x00E9, r28
     a3a:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     a3c:	08 95       	ret

00000a3e <Serial_SendString>:
     a3e:	fc 01       	movw	r30, r24

void Serial_SendString(const char* StringPtr)
{
	uint8_t CurrByte;

	while ((CurrByte = *StringPtr) != 0x00)
     a40:	06 c0       	rjmp	.+12     	; 0xa4e <Serial_SendString+0x10>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     a42:	90 91 c8 00 	lds	r25, 0x00C8
     a46:	95 ff       	sbrs	r25, 5
     a48:	fc cf       	rjmp	.-8      	; 0xa42 <Serial_SendString+0x4>
				UDR1 = DataByte;
     a4a:	80 93 ce 00 	sts	0x00CE, r24
     a4e:	81 91       	ld	r24, Z+
     a50:	81 11       	cpse	r24, r1
     a52:	f7 cf       	rjmp	.-18     	; 0xa42 <Serial_SendString+0x4>
	{
		Serial_SendByte(CurrByte);
		StringPtr++;
	}
}
     a54:	08 95       	ret

00000a56 <TWI_StartTransmission>:
	for (;;)
	{
		bool     BusCaptured = false;
		uint16_t TimeoutRemaining;

		TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
     a56:	94 ea       	ldi	r25, 0xA4	; 164
     a58:	90 93 bc 00 	sts	0x00BC, r25

		TimeoutRemaining = (TimeoutMS * 100);
     a5c:	24 e6       	ldi	r18, 0x64	; 100
     a5e:	62 9f       	mul	r22, r18
     a60:	b0 01       	movw	r22, r0
     a62:	11 24       	eor	r1, r1
     a64:	61 50       	subi	r22, 0x01	; 1
     a66:	71 09       	sbc	r23, r1
		while (TimeoutRemaining-- && !(BusCaptured))
     a68:	9b 01       	movw	r18, r22
uint8_t TWI_StartTransmission(const uint8_t SlaveAddress,
                              const uint8_t TimeoutMS)
{
	for (;;)
	{
		bool     BusCaptured = false;
     a6a:	40 e0       	ldi	r20, 0x00	; 0
					case TW_START:
					case TW_REP_START:
						BusCaptured = true;
						break;
					case TW_MT_ARB_LOST:
						TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
     a6c:	54 ea       	ldi	r21, 0xA4	; 164
		uint16_t TimeoutRemaining;

		TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining-- && !(BusCaptured))
     a6e:	1d c0       	rjmp	.+58     	; 0xaaa <TWI_StartTransmission+0x54>
		{
			if (TWCR & (1 << TWINT))
     a70:	90 91 bc 00 	lds	r25, 0x00BC
     a74:	97 ff       	sbrs	r25, 7
     a76:	13 c0       	rjmp	.+38     	; 0xa9e <TWI_StartTransmission+0x48>
			{
				switch (TWSR & TW_STATUS_MASK)
     a78:	90 91 b9 00 	lds	r25, 0x00B9
     a7c:	98 7f       	andi	r25, 0xF8	; 248
     a7e:	90 31       	cpi	r25, 0x10	; 16
     a80:	69 f0       	breq	.+26     	; 0xa9c <TWI_StartTransmission+0x46>
     a82:	98 33       	cpi	r25, 0x38	; 56
     a84:	19 f0       	breq	.+6      	; 0xa8c <TWI_StartTransmission+0x36>
     a86:	98 30       	cpi	r25, 0x08	; 8
     a88:	21 f4       	brne	.+8      	; 0xa92 <TWI_StartTransmission+0x3c>
     a8a:	08 c0       	rjmp	.+16     	; 0xa9c <TWI_StartTransmission+0x46>
					case TW_START:
					case TW_REP_START:
						BusCaptured = true;
						break;
					case TW_MT_ARB_LOST:
						TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
     a8c:	50 93 bc 00 	sts	0x00BC, r21
						continue;
     a90:	0a c0       	rjmp	.+20     	; 0xaa6 <TWI_StartTransmission+0x50>
					default:
						TWCR = (1 << TWEN);
     a92:	84 e0       	ldi	r24, 0x04	; 4
     a94:	80 93 bc 00 	sts	0x00BC, r24
						return TWI_ERROR_BusFault;
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	08 95       	ret
			{
				switch (TWSR & TW_STATUS_MASK)
				{
					case TW_START:
					case TW_REP_START:
						BusCaptured = true;
     a9c:	41 e0       	ldi	r20, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a9e:	9a e1       	ldi	r25, 0x1A	; 26
     aa0:	9a 95       	dec	r25
     aa2:	f1 f7       	brne	.-4      	; 0xaa0 <TWI_StartTransmission+0x4a>
     aa4:	00 c0       	rjmp	.+0      	; 0xaa6 <TWI_StartTransmission+0x50>
     aa6:	21 50       	subi	r18, 0x01	; 1
     aa8:	31 09       	sbc	r19, r1
		uint16_t TimeoutRemaining;

		TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining-- && !(BusCaptured))
     aaa:	2f 3f       	cpi	r18, 0xFF	; 255
     aac:	9f ef       	ldi	r25, 0xFF	; 255
     aae:	39 07       	cpc	r19, r25
     ab0:	21 f4       	brne	.+8      	; 0xaba <TWI_StartTransmission+0x64>
     ab2:	0b c0       	rjmp	.+22     	; 0xaca <TWI_StartTransmission+0x74>
			}

			_delay_us(10);
		}

		if (!(TimeoutRemaining))
     ab4:	23 2b       	or	r18, r19
     ab6:	21 f0       	breq	.+8      	; 0xac0 <TWI_StartTransmission+0x6a>
     ab8:	08 c0       	rjmp	.+16     	; 0xaca <TWI_StartTransmission+0x74>
		uint16_t TimeoutRemaining;

		TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining-- && !(BusCaptured))
     aba:	44 23       	and	r20, r20
     abc:	c9 f2       	breq	.-78     	; 0xa70 <TWI_StartTransmission+0x1a>
     abe:	fa cf       	rjmp	.-12     	; 0xab4 <TWI_StartTransmission+0x5e>
			_delay_us(10);
		}

		if (!(TimeoutRemaining))
		{
			TWCR = (1 << TWEN);
     ac0:	84 e0       	ldi	r24, 0x04	; 4
     ac2:	80 93 bc 00 	sts	0x00BC, r24
			return TWI_ERROR_BusCaptureTimeout;
     ac6:	82 e0       	ldi	r24, 0x02	; 2
     ac8:	08 95       	ret
		}

		TWDR = SlaveAddress;
     aca:	80 93 bb 00 	sts	0x00BB, r24
		TWCR = ((1 << TWINT) | (1 << TWEN));
     ace:	84 e8       	ldi	r24, 0x84	; 132
     ad0:	80 93 bc 00 	sts	0x00BC, r24

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining--)
     ad4:	0e c0       	rjmp	.+28     	; 0xaf2 <TWI_StartTransmission+0x9c>
		{
			if (TWCR & (1 << TWINT))
     ad6:	20 91 bc 00 	lds	r18, 0x00BC
     ada:	cb 01       	movw	r24, r22
     adc:	01 97       	sbiw	r24, 0x01	; 1
     ade:	27 ff       	sbrs	r18, 7
     ae0:	03 c0       	rjmp	.+6      	; 0xae8 <TWI_StartTransmission+0x92>
			  break;

			_delay_us(10);
		}

		if (!(TimeoutRemaining))
     ae2:	67 2b       	or	r22, r23
     ae4:	b1 f0       	breq	.+44     	; 0xb12 <__stack+0x13>
     ae6:	09 c0       	rjmp	.+18     	; 0xafa <TWI_StartTransmission+0xa4>
     ae8:	2a e1       	ldi	r18, 0x1A	; 26
     aea:	2a 95       	dec	r18
     aec:	f1 f7       	brne	.-4      	; 0xaea <TWI_StartTransmission+0x94>
     aee:	00 c0       	rjmp	.+0      	; 0xaf0 <TWI_StartTransmission+0x9a>
     af0:	bc 01       	movw	r22, r24

		TWDR = SlaveAddress;
		TWCR = ((1 << TWINT) | (1 << TWEN));

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining--)
     af2:	6f 3f       	cpi	r22, 0xFF	; 255
     af4:	8f ef       	ldi	r24, 0xFF	; 255
     af6:	78 07       	cpc	r23, r24
     af8:	71 f7       	brne	.-36     	; 0xad6 <TWI_StartTransmission+0x80>
		}

		if (!(TimeoutRemaining))
		  return TWI_ERROR_SlaveResponseTimeout;

		switch (TWSR & TW_STATUS_MASK)
     afa:	80 91 b9 00 	lds	r24, 0x00B9
     afe:	88 7f       	andi	r24, 0xF8	; 248
     b00:	88 31       	cpi	r24, 0x18	; 24
     b02:	49 f0       	breq	.+18     	; 0xb16 <__stack+0x17>
     b04:	80 34       	cpi	r24, 0x40	; 64
     b06:	39 f0       	breq	.+14     	; 0xb16 <__stack+0x17>
		{
			case TW_MT_SLA_ACK:
			case TW_MR_SLA_ACK:
				return TWI_ERROR_NoError;
			default:
				TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
     b08:	84 e9       	ldi	r24, 0x94	; 148
     b0a:	80 93 bc 00 	sts	0x00BC, r24
				return TWI_ERROR_SlaveNotReady;
     b0e:	84 e0       	ldi	r24, 0x04	; 4
     b10:	08 95       	ret

			_delay_us(10);
		}

		if (!(TimeoutRemaining))
		  return TWI_ERROR_SlaveResponseTimeout;
     b12:	83 e0       	ldi	r24, 0x03	; 3
     b14:	08 95       	ret

		switch (TWSR & TW_STATUS_MASK)
		{
			case TW_MT_SLA_ACK:
			case TW_MR_SLA_ACK:
				return TWI_ERROR_NoError;
     b16:	80 e0       	ldi	r24, 0x00	; 0
			default:
				TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
				return TWI_ERROR_SlaveNotReady;
		}
	}
}
     b18:	08 95       	ret

00000b1a <TWI_SendByte>:

bool TWI_SendByte(const uint8_t Byte)
{
	TWDR = Byte;
     b1a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = ((1 << TWINT) | (1 << TWEN));
     b1e:	84 e8       	ldi	r24, 0x84	; 132
     b20:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR & (1 << TWINT)));
     b24:	80 91 bc 00 	lds	r24, 0x00BC
     b28:	87 ff       	sbrs	r24, 7
     b2a:	fc cf       	rjmp	.-8      	; 0xb24 <TWI_SendByte+0xa>

	return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
     b2c:	90 91 b9 00 	lds	r25, 0x00B9
     b30:	98 7f       	andi	r25, 0xF8	; 248
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	98 32       	cpi	r25, 0x28	; 40
     b36:	09 f0       	breq	.+2      	; 0xb3a <TWI_SendByte+0x20>
     b38:	80 e0       	ldi	r24, 0x00	; 0
}
     b3a:	08 95       	ret

00000b3c <TWI_WritePacket>:
                        const uint8_t TimeoutMS,
                        const uint8_t* InternalAddress,
                        uint8_t InternalAddressLen,
                        const uint8_t* Buffer,
                        uint8_t Length)
{
     b3c:	af 92       	push	r10
     b3e:	bf 92       	push	r11
     b40:	df 92       	push	r13
     b42:	ef 92       	push	r14
     b44:	ff 92       	push	r15
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <TWI_WritePacket+0x14>
     b50:	1f 92       	push	r1
     b52:	cd b7       	in	r28, 0x3d	; 61
     b54:	de b7       	in	r29, 0x3e	; 62
     b56:	f1 2e       	mov	r15, r17
	uint8_t ErrorCode;

	if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
     b58:	8e 7f       	andi	r24, 0xFE	; 254
     b5a:	29 83       	std	Y+1, r18	; 0x01
     b5c:	4a 83       	std	Y+2, r20	; 0x02
     b5e:	5b 83       	std	Y+3, r21	; 0x03
     b60:	7a df       	rcall	.-268    	; 0xa56 <TWI_StartTransmission>
     b62:	18 2f       	mov	r17, r24
     b64:	29 81       	ldd	r18, Y+1	; 0x01
     b66:	4a 81       	ldd	r20, Y+2	; 0x02
     b68:	5b 81       	ldd	r21, Y+3	; 0x03
     b6a:	88 23       	and	r24, r24
     b6c:	49 f0       	breq	.+18     	; 0xb80 <TWI_WritePacket+0x44>
     b6e:	1e c0       	rjmp	.+60     	; 0xbac <TWI_WritePacket+0x70>
     b70:	f5 01       	movw	r30, r10
	                                       TimeoutMS)) == TWI_ERROR_NoError)
	{
		while (InternalAddressLen--)
		{
			if (!(TWI_SendByte(*(InternalAddress++))))
     b72:	81 91       	ld	r24, Z+
     b74:	5f 01       	movw	r10, r30
     b76:	d1 df       	rcall	.-94     	; 0xb1a <TWI_SendByte>
     b78:	81 11       	cpse	r24, r1
     b7a:	05 c0       	rjmp	.+10     	; 0xb86 <TWI_WritePacket+0x4a>
     b7c:	15 e0       	ldi	r17, 0x05	; 5
     b7e:	0e c0       	rjmp	.+28     	; 0xb9c <TWI_WritePacket+0x60>
			{
				ErrorCode = TWI_ERROR_SlaveNAK;
     b80:	5a 01       	movw	r10, r20
     b82:	d2 2e       	mov	r13, r18
                        const uint8_t* Buffer,
                        uint8_t Length)
{
	uint8_t ErrorCode;

	if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
     b84:	d4 0e       	add	r13, r20
	}

	return ErrorCode;
}

uint8_t TWI_WritePacket(const uint8_t SlaveAddress,
     b86:	da 10       	cpse	r13, r10
     b88:	f3 cf       	rjmp	.-26     	; 0xb70 <TWI_WritePacket+0x34>
	uint8_t ErrorCode;

	if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
	                                       TimeoutMS)) == TWI_ERROR_NoError)
	{
		while (InternalAddressLen--)
     b8a:	08 c0       	rjmp	.+16     	; 0xb9c <TWI_WritePacket+0x60>
     b8c:	f5 01       	movw	r30, r10
     b8e:	81 91       	ld	r24, Z+
			}
		}

		while (Length--)
		{
			if (!(TWI_SendByte(*(Buffer++))))
     b90:	5f 01       	movw	r10, r30
     b92:	c3 df       	rcall	.-122    	; 0xb1a <TWI_SendByte>
     b94:	81 11       	cpse	r24, r1
     b96:	05 c0       	rjmp	.+10     	; 0xba2 <TWI_WritePacket+0x66>
     b98:	15 e0       	ldi	r17, 0x05	; 5
     b9a:	05 c0       	rjmp	.+10     	; 0xba6 <TWI_WritePacket+0x6a>
     b9c:	a0 2e       	mov	r10, r16
			{
				ErrorCode = TWI_ERROR_SlaveNAK;
     b9e:	bf 2c       	mov	r11, r15
     ba0:	0e 0d       	add	r16, r14
	{
		while (InternalAddressLen--)
		{
			if (!(TWI_SendByte(*(InternalAddress++))))
			{
				ErrorCode = TWI_ERROR_SlaveNAK;
     ba2:	0a 11       	cpse	r16, r10
     ba4:	f3 cf       	rjmp	.-26     	; 0xb8c <TWI_WritePacket+0x50>
	}

	return ErrorCode;
}

uint8_t TWI_WritePacket(const uint8_t SlaveAddress,
     ba6:	84 e9       	ldi	r24, 0x94	; 148
				ErrorCode = TWI_ERROR_SlaveNAK;
				break;
			}
		}

		while (Length--)
     ba8:	80 93 bc 00 	sts	0x00BC, r24

			/** Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
			static inline void TWI_StopTransmission(void) ATTR_ALWAYS_INLINE;
			static inline void TWI_StopTransmission(void)
			{
				TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
     bac:	81 2f       	mov	r24, r17
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0

		TWI_StopTransmission();
	}

	return ErrorCode;
}
     bb2:	0f 90       	pop	r0
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	1f 91       	pop	r17
     bba:	0f 91       	pop	r16
     bbc:	ff 90       	pop	r15
     bbe:	ef 90       	pop	r14
     bc0:	df 90       	pop	r13
     bc2:	bf 90       	pop	r11
     bc4:	af 90       	pop	r10
     bc6:	08 95       	ret

00000bc8 <ADC_StartReading>:
     bc8:	80 93 7c 00 	sts	0x007C, r24
     bcc:	90 ff       	sbrs	r25, 0
			static inline void ADC_StartReading(const uint16_t MUXMask)
			{
				ADMUX = MUXMask;

				#if (defined(__AVR_ATmega16U4__)  || defined(__AVR_ATmega32U4__) || defined(__DOXYGEN__))
				if (MUXMask & (1 << 8))
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <ADC_StartReading+0x10>
				  ADCSRB |=  (1 << MUX5);
     bd0:	80 91 7b 00 	lds	r24, 0x007B
     bd4:	80 62       	ori	r24, 0x20	; 32
     bd6:	03 c0       	rjmp	.+6      	; 0xbde <ADC_StartReading+0x16>
				else
				  ADCSRB &= ~(1 << MUX5);
     bd8:	80 91 7b 00 	lds	r24, 0x007B
     bdc:	8f 7d       	andi	r24, 0xDF	; 223
     bde:	80 93 7b 00 	sts	0x007B, r24
				#endif

				ADCSRA |= (1 << ADSC);
     be2:	80 91 7a 00 	lds	r24, 0x007A
     be6:	80 64       	ori	r24, 0x40	; 64
     be8:	80 93 7a 00 	sts	0x007A, r24
     bec:	08 95       	ret

00000bee <LCDbrightnessUpdate>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     bee:	80 91 c8 00 	lds	r24, 0x00C8
     bf2:	85 ff       	sbrs	r24, 5
     bf4:	fc cf       	rjmp	.-8      	; 0xbee <LCDbrightnessUpdate>
				UDR1 = DataByte;
     bf6:	8c e7       	ldi	r24, 0x7C	; 124
     bf8:	80 93 ce 00 	sts	0x00CE, r24
        Serial_SendString(data);
}

static void LCDbrightnessUpdate(void) {
    Serial_SendByte(0x7C);
    Serial_SendByte(128+brightness);
     bfc:	80 91 07 01 	lds	r24, 0x0107
     c00:	80 58       	subi	r24, 0x80	; 128
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     c02:	90 91 c8 00 	lds	r25, 0x00C8
     c06:	95 ff       	sbrs	r25, 5
     c08:	fc cf       	rjmp	.-8      	; 0xc02 <LCDbrightnessUpdate+0x14>
				UDR1 = DataByte;
     c0a:	80 93 ce 00 	sts	0x00CE, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c0e:	2f e7       	ldi	r18, 0x7F	; 127
     c10:	8a e1       	ldi	r24, 0x1A	; 26
     c12:	96 e0       	ldi	r25, 0x06	; 6
     c14:	21 50       	subi	r18, 0x01	; 1
     c16:	80 40       	sbci	r24, 0x00	; 0
     c18:	90 40       	sbci	r25, 0x00	; 0
     c1a:	e1 f7       	brne	.-8      	; 0xc14 <LCDbrightnessUpdate+0x26>
     c1c:	00 c0       	rjmp	.+0      	; 0xc1e <LCDbrightnessUpdate+0x30>
     c1e:	00 00       	nop
     c20:	08 95       	ret

00000c22 <LCDwrite>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     c22:	20 91 c8 00 	lds	r18, 0x00C8
     c26:	25 ff       	sbrs	r18, 5
     c28:	fc cf       	rjmp	.-8      	; 0xc22 <LCDwrite>
				UDR1 = DataByte;
     c2a:	2e ef       	ldi	r18, 0xFE	; 254
     c2c:	20 93 ce 00 	sts	0x00CE, r18
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     c30:	20 91 c8 00 	lds	r18, 0x00C8
     c34:	25 ff       	sbrs	r18, 5
     c36:	fc cf       	rjmp	.-8      	; 0xc30 <LCDwrite+0xe>
				UDR1 = DataByte;
     c38:	21 e0       	ldi	r18, 0x01	; 1
     c3a:	20 93 ce 00 	sts	0x00CE, r18
}

static void LCDwrite(char* data) {
        Serial_SendByte(0xFE);
        Serial_SendByte(0x01);
        Serial_SendString(data);
     c3e:	ff ce       	rjmp	.-514    	; 0xa3e <Serial_SendString>

00000c40 <LCDnextLine>:
     c40:	20 91 c8 00 	lds	r18, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     c44:	25 ff       	sbrs	r18, 5
     c46:	fc cf       	rjmp	.-8      	; 0xc40 <LCDnextLine>
				UDR1 = DataByte;
     c48:	2e ef       	ldi	r18, 0xFE	; 254
     c4a:	20 93 ce 00 	sts	0x00CE, r18
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     c4e:	20 91 c8 00 	lds	r18, 0x00C8
     c52:	25 ff       	sbrs	r18, 5
     c54:	fc cf       	rjmp	.-8      	; 0xc4e <LCDnextLine+0xe>
				UDR1 = DataByte;
     c56:	20 ec       	ldi	r18, 0xC0	; 192
     c58:	20 93 ce 00 	sts	0x00CE, r18
}

static void LCDnextLine(char* data) {
        Serial_SendByte(0xFE);
        Serial_SendByte(192);
        Serial_SendString(data);
     c5c:	f0 ce       	rjmp	.-544    	; 0xa3e <Serial_SendString>

00000c5e <ButtonManage>:
     c5e:	af 92       	push	r10

    ADC_SetupChannel(4);
    ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_CHANNEL4);
}

void ButtonManage(void) {
     c60:	bf 92       	push	r11
     c62:	cf 92       	push	r12
     c64:	df 92       	push	r13
     c66:	ef 92       	push	r14
     c68:	ff 92       	push	r15
     c6a:	0f 93       	push	r16
     c6c:	1f 93       	push	r17
     c6e:	cf 93       	push	r28
     c70:	df 93       	push	r29
    uint8_t integrator = 0;
    int output         = 0;
    int pin            = 0;

    if (port == 'B')
        pin = (!(PINB & inputPin));
     c72:	33 b1       	in	r19, 0x03	; 3
     c74:	34 72       	andi	r19, 0x24	; 36
     c76:	84 e1       	ldi	r24, 0x14	; 20
     c78:	90 e0       	ldi	r25, 0x00	; 0
#define GZ_L    0x22

//Functions
//========================
inline int debounce(int inputPin, char port) {
    uint8_t integrator = 0;
     c7a:	20 e0       	ldi	r18, 0x00	; 0
        pin = (!(PIND & inputPin));
    else
        pin = (!(PINE & inputPin));

    for(int i=0; i < MAXIMUM; i++) {
        if (pin) {
     c7c:	31 11       	cpse	r19, r1
     c7e:	04 c0       	rjmp	.+8      	; 0xc88 <ButtonManage+0x2a>
            if (integrator > 0) {
     c80:	22 23       	and	r18, r18
     c82:	29 f0       	breq	.+10     	; 0xc8e <ButtonManage+0x30>
                integrator--;
     c84:	21 50       	subi	r18, 0x01	; 1
     c86:	03 c0       	rjmp	.+6      	; 0xc8e <ButtonManage+0x30>
            }
        } else if (integrator < MAXIMUM) {
     c88:	24 31       	cpi	r18, 0x14	; 20
     c8a:	08 f4       	brcc	.+2      	; 0xc8e <ButtonManage+0x30>
            integrator++;
     c8c:	2f 5f       	subi	r18, 0xFF	; 255
     c8e:	01 97       	sbiw	r24, 0x01	; 1
    else if (port == 'D')
        pin = (!(PIND & inputPin));
    else
        pin = (!(PINE & inputPin));

    for(int i=0; i < MAXIMUM; i++) {
     c90:	a9 f7       	brne	.-22     	; 0xc7c <ButtonManage+0x1e>
            }
        } else if (integrator < MAXIMUM) {
            integrator++;
        }
    }
    if (integrator == 0) {
     c92:	22 23       	and	r18, r18
     c94:	21 f0       	breq	.+8      	; 0xc9e <ButtonManage+0x40>
        output = 0;
    } else if (integrator >= MAXIMUM) {
     c96:	01 e0       	ldi	r16, 0x01	; 1
     c98:	10 e0       	ldi	r17, 0x00	; 0
     c9a:	24 31       	cpi	r18, 0x14	; 20
     c9c:	10 f4       	brcc	.+4      	; 0xca2 <ButtonManage+0x44>
        } else if (integrator < MAXIMUM) {
            integrator++;
        }
    }
    if (integrator == 0) {
        output = 0;
     c9e:	00 e0       	ldi	r16, 0x00	; 0
     ca0:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t integrator = 0;
    int output         = 0;
    int pin            = 0;

    if (port == 'B')
        pin = (!(PINB & inputPin));
     ca2:	33 b1       	in	r19, 0x03	; 3
     ca4:	38 70       	andi	r19, 0x08	; 8
     ca6:	84 e1       	ldi	r24, 0x14	; 20
     ca8:	90 e0       	ldi	r25, 0x00	; 0
#define GZ_L    0x22

//Functions
//========================
inline int debounce(int inputPin, char port) {
    uint8_t integrator = 0;
     caa:	20 e0       	ldi	r18, 0x00	; 0
        pin = (!(PIND & inputPin));
    else
        pin = (!(PINE & inputPin));

    for(int i=0; i < MAXIMUM; i++) {
        if (pin) {
     cac:	31 11       	cpse	r19, r1
     cae:	04 c0       	rjmp	.+8      	; 0xcb8 <ButtonManage+0x5a>
            if (integrator > 0) {
     cb0:	22 23       	and	r18, r18
     cb2:	29 f0       	breq	.+10     	; 0xcbe <ButtonManage+0x60>
                integrator--;
     cb4:	21 50       	subi	r18, 0x01	; 1
     cb6:	03 c0       	rjmp	.+6      	; 0xcbe <ButtonManage+0x60>
            }
        } else if (integrator < MAXIMUM) {
     cb8:	24 31       	cpi	r18, 0x14	; 20
     cba:	08 f4       	brcc	.+2      	; 0xcbe <ButtonManage+0x60>
            integrator++;
     cbc:	2f 5f       	subi	r18, 0xFF	; 255
     cbe:	01 97       	sbiw	r24, 0x01	; 1
    else if (port == 'D')
        pin = (!(PIND & inputPin));
    else
        pin = (!(PINE & inputPin));

    for(int i=0; i < MAXIMUM; i++) {
     cc0:	a9 f7       	brne	.-22     	; 0xcac <ButtonManage+0x4e>
            }
        } else if (integrator < MAXIMUM) {
            integrator++;
        }
    }
    if (integrator == 0) {
     cc2:	22 23       	and	r18, r18
     cc4:	21 f0       	breq	.+8      	; 0xcce <ButtonManage+0x70>
        output = 0;
    } else if (integrator >= MAXIMUM) {
     cc6:	c1 e0       	ldi	r28, 0x01	; 1
     cc8:	d0 e0       	ldi	r29, 0x00	; 0
     cca:	24 31       	cpi	r18, 0x14	; 20
     ccc:	10 f4       	brcc	.+4      	; 0xcd2 <ButtonManage+0x74>
        } else if (integrator < MAXIMUM) {
            integrator++;
        }
    }
    if (integrator == 0) {
        output = 0;
     cce:	c0 e0       	ldi	r28, 0x00	; 0
     cd0:	d0 e0       	ldi	r29, 0x00	; 0
    else if (port == 'C')
        pin = (!(PINC & inputPin));
    else if (port == 'D')
        pin = (!(PIND & inputPin));
    else
        pin = (!(PINE & inputPin));
     cd2:	3c b1       	in	r19, 0x0c	; 12
     cd4:	30 74       	andi	r19, 0x40	; 64
     cd6:	84 e1       	ldi	r24, 0x14	; 20
     cd8:	90 e0       	ldi	r25, 0x00	; 0
#define GZ_L    0x22

//Functions
//========================
inline int debounce(int inputPin, char port) {
    uint8_t integrator = 0;
     cda:	20 e0       	ldi	r18, 0x00	; 0
        pin = (!(PIND & inputPin));
    else
        pin = (!(PINE & inputPin));

    for(int i=0; i < MAXIMUM; i++) {
        if (pin) {
     cdc:	31 11       	cpse	r19, r1
     cde:	04 c0       	rjmp	.+8      	; 0xce8 <ButtonManage+0x8a>
            if (integrator > 0) {
     ce0:	22 23       	and	r18, r18
     ce2:	29 f0       	breq	.+10     	; 0xcee <ButtonManage+0x90>
                integrator--;
     ce4:	21 50       	subi	r18, 0x01	; 1
     ce6:	03 c0       	rjmp	.+6      	; 0xcee <ButtonManage+0x90>
            }
        } else if (integrator < MAXIMUM) {
     ce8:	24 31       	cpi	r18, 0x14	; 20
     cea:	08 f4       	brcc	.+2      	; 0xcee <ButtonManage+0x90>
            integrator++;
     cec:	2f 5f       	subi	r18, 0xFF	; 255
     cee:	01 97       	sbiw	r24, 0x01	; 1
    else if (port == 'D')
        pin = (!(PIND & inputPin));
    else
        pin = (!(PINE & inputPin));

    for(int i=0; i < MAXIMUM; i++) {
     cf0:	a9 f7       	brne	.-22     	; 0xcdc <ButtonManage+0x7e>
            }
        } else if (integrator < MAXIMUM) {
            integrator++;
        }
    }
    if (integrator == 0) {
     cf2:	22 23       	and	r18, r18
     cf4:	41 f0       	breq	.+16     	; 0xd06 <ButtonManage+0xa8>
        output = 0;
    } else if (integrator >= MAXIMUM) {
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	24 31       	cpi	r18, 0x14	; 20
     cfc:	10 f4       	brcc	.+4      	; 0xd02 <ButtonManage+0xa4>
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	90 e0       	ldi	r25, 0x00	; 0
        } else if (integrator < MAXIMUM) {
            integrator++;
        }
    }
    if (integrator == 0) {
        output = 0;
     d02:	7c 01       	movw	r14, r24
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <ButtonManage+0xac>
     d06:	e1 2c       	mov	r14, r1
     d08:	f1 2c       	mov	r15, r1
    uint8_t integrator = 0;
    int output         = 0;
    int pin            = 0;

    if (port == 'B')
        pin = (!(PINB & inputPin));
     d0a:	33 b1       	in	r19, 0x03	; 3
     d0c:	30 71       	andi	r19, 0x10	; 16
     d0e:	84 e1       	ldi	r24, 0x14	; 20
     d10:	90 e0       	ldi	r25, 0x00	; 0
#define GZ_L    0x22

//Functions
//========================
inline int debounce(int inputPin, char port) {
    uint8_t integrator = 0;
     d12:	20 e0       	ldi	r18, 0x00	; 0
        pin = (!(PIND & inputPin));
    else
        pin = (!(PINE & inputPin));

    for(int i=0; i < MAXIMUM; i++) {
        if (pin) {
     d14:	31 11       	cpse	r19, r1
     d16:	04 c0       	rjmp	.+8      	; 0xd20 <ButtonManage+0xc2>
            if (integrator > 0) {
     d18:	22 23       	and	r18, r18
     d1a:	29 f0       	breq	.+10     	; 0xd26 <ButtonManage+0xc8>
                integrator--;
     d1c:	21 50       	subi	r18, 0x01	; 1
     d1e:	03 c0       	rjmp	.+6      	; 0xd26 <ButtonManage+0xc8>
            }
        } else if (integrator < MAXIMUM) {
     d20:	24 31       	cpi	r18, 0x14	; 20
     d22:	08 f4       	brcc	.+2      	; 0xd26 <ButtonManage+0xc8>
            integrator++;
     d24:	2f 5f       	subi	r18, 0xFF	; 255
     d26:	01 97       	sbiw	r24, 0x01	; 1
    else if (port == 'D')
        pin = (!(PIND & inputPin));
    else
        pin = (!(PINE & inputPin));

    for(int i=0; i < MAXIMUM; i++) {
     d28:	a9 f7       	brne	.-22     	; 0xd14 <ButtonManage+0xb6>
            }
        } else if (integrator < MAXIMUM) {
            integrator++;
        }
    }
    if (integrator == 0) {
     d2a:	22 23       	and	r18, r18
     d2c:	41 f0       	breq	.+16     	; 0xd3e <ButtonManage+0xe0>
        output = 0;
    } else if (integrator >= MAXIMUM) {
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	24 31       	cpi	r18, 0x14	; 20
     d34:	10 f4       	brcc	.+4      	; 0xd3a <ButtonManage+0xdc>
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	90 e0       	ldi	r25, 0x00	; 0
        } else if (integrator < MAXIMUM) {
            integrator++;
        }
    }
    if (integrator == 0) {
        output = 0;
     d3a:	6c 01       	movw	r12, r24
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <ButtonManage+0xe4>
     d3e:	c1 2c       	mov	r12, r1
     d40:	d1 2c       	mov	r13, r1
    if (port == 'B')
        pin = (!(PINB & inputPin));
    else if (port == 'C')
        pin = (!(PINC & inputPin));
    else if (port == 'D')
        pin = (!(PIND & inputPin));
     d42:	39 b1       	in	r19, 0x09	; 9
     d44:	30 71       	andi	r19, 0x10	; 16
     d46:	84 e1       	ldi	r24, 0x14	; 20
     d48:	90 e0       	ldi	r25, 0x00	; 0
#define GZ_L    0x22

//Functions
//========================
inline int debounce(int inputPin, char port) {
    uint8_t integrator = 0;
     d4a:	20 e0       	ldi	r18, 0x00	; 0
        pin = (!(PIND & inputPin));
    else
        pin = (!(PINE & inputPin));

    for(int i=0; i < MAXIMUM; i++) {
        if (pin) {
     d4c:	31 11       	cpse	r19, r1
     d4e:	04 c0       	rjmp	.+8      	; 0xd58 <ButtonManage+0xfa>
            if (integrator > 0) {
     d50:	22 23       	and	r18, r18
     d52:	29 f0       	breq	.+10     	; 0xd5e <ButtonManage+0x100>
                integrator--;
     d54:	21 50       	subi	r18, 0x01	; 1
     d56:	03 c0       	rjmp	.+6      	; 0xd5e <ButtonManage+0x100>
            }
        } else if (integrator < MAXIMUM) {
     d58:	24 31       	cpi	r18, 0x14	; 20
     d5a:	08 f4       	brcc	.+2      	; 0xd5e <ButtonManage+0x100>
            integrator++;
     d5c:	2f 5f       	subi	r18, 0xFF	; 255
     d5e:	01 97       	sbiw	r24, 0x01	; 1
    else if (port == 'D')
        pin = (!(PIND & inputPin));
    else
        pin = (!(PINE & inputPin));

    for(int i=0; i < MAXIMUM; i++) {
     d60:	a9 f7       	brne	.-22     	; 0xd4c <ButtonManage+0xee>
            }
        } else if (integrator < MAXIMUM) {
            integrator++;
        }
    }
    if (integrator == 0) {
     d62:	22 23       	and	r18, r18
     d64:	41 f0       	breq	.+16     	; 0xd76 <ButtonManage+0x118>
        output = 0;
    } else if (integrator >= MAXIMUM) {
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	24 31       	cpi	r18, 0x14	; 20
     d6c:	10 f4       	brcc	.+4      	; 0xd72 <ButtonManage+0x114>
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	90 e0       	ldi	r25, 0x00	; 0
        } else if (integrator < MAXIMUM) {
            integrator++;
        }
    }
    if (integrator == 0) {
        output = 0;
     d72:	5c 01       	movw	r10, r24
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <ButtonManage+0x11c>
     d76:	a1 2c       	mov	r10, r1
     d78:	b1 2c       	mov	r11, r1
    int leftClick   = debounce(buttonLeft, 'B');
    int rightClick  = debounce(buttonRight, 'B');
    int upClick     = debounce(buttonUp, 'E');
    int downClick   = debounce(buttonDown, 'B');
    int centerClick = debounce(buttonCenter, 'D');
    if (!(leftClick || rightClick || upClick || downClick || centerClick)) {
     d7a:	01 15       	cp	r16, r1
     d7c:	11 05       	cpc	r17, r1
     d7e:	69 f4       	brne	.+26     	; 0xd9a <ButtonManage+0x13c>
     d80:	20 97       	sbiw	r28, 0x00	; 0
     d82:	59 f4       	brne	.+22     	; 0xd9a <ButtonManage+0x13c>
     d84:	e1 14       	cp	r14, r1
     d86:	f1 04       	cpc	r15, r1
     d88:	41 f4       	brne	.+16     	; 0xd9a <ButtonManage+0x13c>
     d8a:	c1 14       	cp	r12, r1
     d8c:	d1 04       	cpc	r13, r1
     d8e:	29 f4       	brne	.+10     	; 0xd9a <ButtonManage+0x13c>
     d90:	a1 14       	cp	r10, r1
     d92:	b1 04       	cpc	r11, r1
     d94:	11 f4       	brne	.+4      	; 0xd9a <ButtonManage+0x13c>
        click = false;
     d96:	10 92 6c 01 	sts	0x016C, r1
    }

    if (!click) {
     d9a:	80 91 6c 01 	lds	r24, 0x016C
     d9e:	81 11       	cpse	r24, r1
     da0:	17 c1       	rjmp	.+558    	; 0xfd0 <ButtonManage+0x372>
        switch (menuState) {
     da2:	80 91 6d 01 	lds	r24, 0x016D
     da6:	84 30       	cpi	r24, 0x04	; 4
     da8:	09 f4       	brne	.+2      	; 0xdac <ButtonManage+0x14e>
     daa:	71 c0       	rjmp	.+226    	; 0xe8e <ButtonManage+0x230>
     dac:	48 f4       	brcc	.+18     	; 0xdc0 <ButtonManage+0x162>
     dae:	81 30       	cpi	r24, 0x01	; 1
     db0:	09 f1       	breq	.+66     	; 0xdf4 <ButtonManage+0x196>
     db2:	90 f0       	brcs	.+36     	; 0xdd8 <ButtonManage+0x17a>
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	71 f1       	breq	.+92     	; 0xe14 <ButtonManage+0x1b6>
     db8:	83 30       	cpi	r24, 0x03	; 3
     dba:	09 f0       	breq	.+2      	; 0xdbe <ButtonManage+0x160>
     dbc:	fa c0       	rjmp	.+500    	; 0xfb2 <ButtonManage+0x354>
     dbe:	4e c0       	rjmp	.+156    	; 0xe5c <ButtonManage+0x1fe>
     dc0:	86 30       	cpi	r24, 0x06	; 6
     dc2:	09 f4       	brne	.+2      	; 0xdc6 <ButtonManage+0x168>
     dc4:	95 c0       	rjmp	.+298    	; 0xef0 <ButtonManage+0x292>
     dc6:	08 f4       	brcc	.+2      	; 0xdca <ButtonManage+0x16c>
     dc8:	76 c0       	rjmp	.+236    	; 0xeb6 <ButtonManage+0x258>
     dca:	87 30       	cpi	r24, 0x07	; 7
     dcc:	09 f4       	brne	.+2      	; 0xdd0 <ButtonManage+0x172>
     dce:	ad c0       	rjmp	.+346    	; 0xf2a <ButtonManage+0x2cc>
     dd0:	88 30       	cpi	r24, 0x08	; 8
     dd2:	09 f0       	breq	.+2      	; 0xdd6 <ButtonManage+0x178>
     dd4:	ee c0       	rjmp	.+476    	; 0xfb2 <ButtonManage+0x354>
     dd6:	bf c0       	rjmp	.+382    	; 0xf56 <ButtonManage+0x2f8>
            case menuState_init:
                if (upClick)
     dd8:	e1 14       	cp	r14, r1
     dda:	f1 04       	cpc	r15, r1
     ddc:	19 f0       	breq	.+6      	; 0xde4 <ButtonManage+0x186>
                    menuState=menuState_settings;
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	80 93 6d 01 	sts	0x016D, r24
                if (downClick)
     de4:	c1 14       	cp	r12, r1
     de6:	d1 04       	cpc	r13, r1
     de8:	09 f4       	brne	.+2      	; 0xdec <ButtonManage+0x18e>
     dea:	e3 c0       	rjmp	.+454    	; 0xfb2 <ButtonManage+0x354>
                    menuState=menuState_adc;
     dec:	83 e0       	ldi	r24, 0x03	; 3
     dee:	80 93 6d 01 	sts	0x016D, r24
     df2:	df c0       	rjmp	.+446    	; 0xfb2 <ButtonManage+0x354>
                break;
            case menuState_settings:
                if (upClick)
     df4:	e1 14       	cp	r14, r1
     df6:	f1 04       	cpc	r15, r1
     df8:	19 f0       	breq	.+6      	; 0xe00 <ButtonManage+0x1a2>
                    menuState=menuState_buttons;
     dfa:	88 e0       	ldi	r24, 0x08	; 8
     dfc:	80 93 6d 01 	sts	0x016D, r24
                if (downClick)
     e00:	c1 14       	cp	r12, r1
     e02:	d1 04       	cpc	r13, r1
     e04:	11 f0       	breq	.+4      	; 0xe0a <ButtonManage+0x1ac>
                    menuState=menuState_init;
     e06:	10 92 6d 01 	sts	0x016D, r1
                if (rightClick)
     e0a:	cd 2b       	or	r28, r29
     e0c:	09 f4       	brne	.+2      	; 0xe10 <ButtonManage+0x1b2>
     e0e:	15 c1       	rjmp	.+554    	; 0x103a <ButtonManage+0x3dc>
                    menuState=menuState_settings_brightness;
     e10:	82 e0       	ldi	r24, 0x02	; 2
     e12:	9e c0       	rjmp	.+316    	; 0xf50 <ButtonManage+0x2f2>
                break;
            case menuState_settings_brightness:
                if (leftClick)
     e14:	01 15       	cp	r16, r1
     e16:	11 05       	cpc	r17, r1
     e18:	19 f0       	breq	.+6      	; 0xe20 <ButtonManage+0x1c2>
                    menuState=menuState_settings;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	80 93 6d 01 	sts	0x016D, r24
                if (rightClick)
     e20:	20 97       	sbiw	r28, 0x00	; 0
     e22:	19 f0       	breq	.+6      	; 0xe2a <ButtonManage+0x1cc>
                    menuState=menuState_settings;
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	80 93 6d 01 	sts	0x016D, r24
                if (upClick) {
     e2a:	e1 14       	cp	r14, r1
     e2c:	f1 04       	cpc	r15, r1
     e2e:	39 f0       	breq	.+14     	; 0xe3e <ButtonManage+0x1e0>
                    if ((brightness<=30) && ((brightness+5)<=30)) {
     e30:	80 91 07 01 	lds	r24, 0x0107
     e34:	8a 31       	cpi	r24, 0x1A	; 26
     e36:	18 f4       	brcc	.+6      	; 0xe3e <ButtonManage+0x1e0>
                        brightness = brightness + 5;
     e38:	8b 5f       	subi	r24, 0xFB	; 251
     e3a:	80 93 07 01 	sts	0x0107, r24
                    }
                }
                if (downClick) {
     e3e:	c1 14       	cp	r12, r1
     e40:	d1 04       	cpc	r13, r1
     e42:	09 f4       	brne	.+2      	; 0xe46 <ButtonManage+0x1e8>
     e44:	b6 c0       	rjmp	.+364    	; 0xfb2 <ButtonManage+0x354>
                    if ((brightness>=0) && ((brightness-5)>=0)) {
     e46:	20 91 07 01 	lds	r18, 0x0107
     e4a:	82 2f       	mov	r24, r18
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	05 97       	sbiw	r24, 0x05	; 5
     e50:	0c f4       	brge	.+2      	; 0xe54 <ButtonManage+0x1f6>
     e52:	af c0       	rjmp	.+350    	; 0xfb2 <ButtonManage+0x354>
                        brightness = brightness - 5;
     e54:	25 50       	subi	r18, 0x05	; 5
     e56:	20 93 07 01 	sts	0x0107, r18
     e5a:	ab c0       	rjmp	.+342    	; 0xfb2 <ButtonManage+0x354>
                    }
                }
                break;
            case menuState_adc:
                if (upClick) {
     e5c:	e1 14       	cp	r14, r1
     e5e:	f1 04       	cpc	r15, r1
     e60:	11 f0       	breq	.+4      	; 0xe66 <ButtonManage+0x208>
                    menuState=menuState_init;
     e62:	10 92 6d 01 	sts	0x016D, r1
                }
                if (downClick) {
     e66:	c1 14       	cp	r12, r1
     e68:	d1 04       	cpc	r13, r1
     e6a:	19 f0       	breq	.+6      	; 0xe72 <ButtonManage+0x214>
                    menuState=menuState_buttons;
     e6c:	88 e0       	ldi	r24, 0x08	; 8
     e6e:	80 93 6d 01 	sts	0x016D, r24
                }
                if (rightClick) {
     e72:	cd 2b       	or	r28, r29
     e74:	09 f4       	brne	.+2      	; 0xe78 <ButtonManage+0x21a>
     e76:	e1 c0       	rjmp	.+450    	; 0x103a <ButtonManage+0x3dc>
				DDRF  &= ~(1 << ChannelIndex);
				DIDR0 |=  (1 << ChannelIndex);
				#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
				if (ChannelIndex < 8)
				{
					DDRF  &= ~(1 << ChannelIndex);
     e78:	84 98       	cbi	0x10, 4	; 16
					DIDR0 |=  (1 << ChannelIndex);
     e7a:	80 91 7e 00 	lds	r24, 0x007E
     e7e:	80 61       	ori	r24, 0x10	; 16
     e80:	80 93 7e 00 	sts	0x007E, r24
                    ADC_SetupChannel(4);
                    ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_CHANNEL4);
     e84:	84 e4       	ldi	r24, 0x44	; 68
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	9f de       	rcall	.-706    	; 0xbc8 <ADC_StartReading>
     e8a:	84 e0       	ldi	r24, 0x04	; 4
                    menuState=menuState_x;
     e8c:	61 c0       	rjmp	.+194    	; 0xf50 <ButtonManage+0x2f2>
     e8e:	01 15       	cp	r16, r1
                }
                break;
            case menuState_x:
                if (leftClick) {
     e90:	11 05       	cpc	r17, r1
     e92:	19 f0       	breq	.+6      	; 0xe9a <ButtonManage+0x23c>
     e94:	83 e0       	ldi	r24, 0x03	; 3
                    menuState=menuState_adc;
     e96:	80 93 6d 01 	sts	0x016D, r24
     e9a:	cd 2b       	or	r28, r29
                }
                if (rightClick) {
     e9c:	09 f4       	brne	.+2      	; 0xea0 <ButtonManage+0x242>
     e9e:	cd c0       	rjmp	.+410    	; 0x103a <ButtonManage+0x3dc>
     ea0:	85 98       	cbi	0x10, 5	; 16
				DDRF  &= ~(1 << ChannelIndex);
				DIDR0 |=  (1 << ChannelIndex);
				#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
				if (ChannelIndex < 8)
				{
					DDRF  &= ~(1 << ChannelIndex);
     ea2:	80 91 7e 00 	lds	r24, 0x007E
					DIDR0 |=  (1 << ChannelIndex);
     ea6:	80 62       	ori	r24, 0x20	; 32
     ea8:	80 93 7e 00 	sts	0x007E, r24
     eac:	85 e4       	ldi	r24, 0x45	; 69
                    ADC_SetupChannel(5);
                    ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_CHANNEL5);
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	8b de       	rcall	.-746    	; 0xbc8 <ADC_StartReading>
     eb2:	85 e0       	ldi	r24, 0x05	; 5
     eb4:	4d c0       	rjmp	.+154    	; 0xf50 <ButtonManage+0x2f2>
                    menuState=menuState_y;
     eb6:	01 15       	cp	r16, r1
     eb8:	11 05       	cpc	r17, r1
                }
                break;
            case menuState_y:
                if (leftClick) {
     eba:	61 f0       	breq	.+24     	; 0xed4 <ButtonManage+0x276>
     ebc:	84 98       	cbi	0x10, 4	; 16
     ebe:	80 91 7e 00 	lds	r24, 0x007E
     ec2:	80 61       	ori	r24, 0x10	; 16
     ec4:	80 93 7e 00 	sts	0x007E, r24
     ec8:	84 e4       	ldi	r24, 0x44	; 68
     eca:	90 e0       	ldi	r25, 0x00	; 0
                    ADC_SetupChannel(4);
                    ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_CHANNEL4);
     ecc:	7d de       	rcall	.-774    	; 0xbc8 <ADC_StartReading>
     ece:	84 e0       	ldi	r24, 0x04	; 4
     ed0:	80 93 6d 01 	sts	0x016D, r24
                    menuState=menuState_x;
     ed4:	cd 2b       	or	r28, r29
     ed6:	09 f4       	brne	.+2      	; 0xeda <ButtonManage+0x27c>
     ed8:	b0 c0       	rjmp	.+352    	; 0x103a <ButtonManage+0x3dc>
                }
                if (rightClick) {
     eda:	86 98       	cbi	0x10, 6	; 16
     edc:	80 91 7e 00 	lds	r24, 0x007E
				DDRF  &= ~(1 << ChannelIndex);
				DIDR0 |=  (1 << ChannelIndex);
				#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
				if (ChannelIndex < 8)
				{
					DDRF  &= ~(1 << ChannelIndex);
     ee0:	80 64       	ori	r24, 0x40	; 64
					DIDR0 |=  (1 << ChannelIndex);
     ee2:	80 93 7e 00 	sts	0x007E, r24
     ee6:	86 e4       	ldi	r24, 0x46	; 70
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	6e de       	rcall	.-804    	; 0xbc8 <ADC_StartReading>
                    ADC_SetupChannel(6);
                    ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_CHANNEL6);
     eec:	86 e0       	ldi	r24, 0x06	; 6
     eee:	30 c0       	rjmp	.+96     	; 0xf50 <ButtonManage+0x2f2>
     ef0:	01 15       	cp	r16, r1
     ef2:	11 05       	cpc	r17, r1
                    menuState=menuState_z;
     ef4:	61 f0       	breq	.+24     	; 0xf0e <ButtonManage+0x2b0>
     ef6:	85 98       	cbi	0x10, 5	; 16
                }
                break;
            case menuState_z:
                if (leftClick) {
     ef8:	80 91 7e 00 	lds	r24, 0x007E
     efc:	80 62       	ori	r24, 0x20	; 32
				DDRF  &= ~(1 << ChannelIndex);
				DIDR0 |=  (1 << ChannelIndex);
				#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
				if (ChannelIndex < 8)
				{
					DDRF  &= ~(1 << ChannelIndex);
     efe:	80 93 7e 00 	sts	0x007E, r24
					DIDR0 |=  (1 << ChannelIndex);
     f02:	85 e4       	ldi	r24, 0x45	; 69
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	60 de       	rcall	.-832    	; 0xbc8 <ADC_StartReading>
     f08:	85 e0       	ldi	r24, 0x05	; 5
                    ADC_SetupChannel(5);
                    ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_CHANNEL5);
     f0a:	80 93 6d 01 	sts	0x016D, r24
     f0e:	cd 2b       	or	r28, r29
     f10:	09 f4       	brne	.+2      	; 0xf14 <ButtonManage+0x2b6>
                    menuState=menuState_y;
     f12:	93 c0       	rjmp	.+294    	; 0x103a <ButtonManage+0x3dc>
     f14:	87 98       	cbi	0x10, 7	; 16
     f16:	80 91 7e 00 	lds	r24, 0x007E
                }
                if (rightClick) {
     f1a:	80 68       	ori	r24, 0x80	; 128
     f1c:	80 93 7e 00 	sts	0x007E, r24
     f20:	87 e4       	ldi	r24, 0x47	; 71
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	51 de       	rcall	.-862    	; 0xbc8 <ADC_StartReading>
     f26:	87 e0       	ldi	r24, 0x07	; 7
     f28:	13 c0       	rjmp	.+38     	; 0xf50 <ButtonManage+0x2f2>
                    ADC_SetupChannel(7);
                    ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_CHANNEL7);
     f2a:	01 15       	cp	r16, r1
     f2c:	11 05       	cpc	r17, r1
     f2e:	61 f0       	breq	.+24     	; 0xf48 <ButtonManage+0x2ea>
     f30:	86 98       	cbi	0x10, 6	; 16
                    menuState=menuState_pot;
     f32:	80 91 7e 00 	lds	r24, 0x007E
                }
                break;
            case menuState_pot:
                if (leftClick) {
     f36:	80 64       	ori	r24, 0x40	; 64
     f38:	80 93 7e 00 	sts	0x007E, r24
				DDRF  &= ~(1 << ChannelIndex);
				DIDR0 |=  (1 << ChannelIndex);
				#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
				if (ChannelIndex < 8)
				{
					DDRF  &= ~(1 << ChannelIndex);
     f3c:	86 e4       	ldi	r24, 0x46	; 70
					DIDR0 |=  (1 << ChannelIndex);
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	43 de       	rcall	.-890    	; 0xbc8 <ADC_StartReading>
     f42:	86 e0       	ldi	r24, 0x06	; 6
     f44:	80 93 6d 01 	sts	0x016D, r24
                    ADC_SetupChannel(6);
                    ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_CHANNEL6);
     f48:	cd 2b       	or	r28, r29
     f4a:	09 f4       	brne	.+2      	; 0xf4e <ButtonManage+0x2f0>
     f4c:	76 c0       	rjmp	.+236    	; 0x103a <ButtonManage+0x3dc>
     f4e:	83 e0       	ldi	r24, 0x03	; 3
                    menuState=menuState_z;
     f50:	80 93 6d 01 	sts	0x016D, r24
     f54:	38 c0       	rjmp	.+112    	; 0xfc6 <ButtonManage+0x368>
                }
                if (rightClick) {
     f56:	e1 14       	cp	r14, r1
     f58:	f1 04       	cpc	r15, r1
     f5a:	39 f0       	breq	.+14     	; 0xf6a <ButtonManage+0x30c>
                    menuState=menuState_adc;
     f5c:	83 e0       	ldi	r24, 0x03	; 3
     f5e:	80 93 6d 01 	sts	0x016D, r24
     f62:	10 92 6f 01 	sts	0x016F, r1
                }
                break;
            case menuState_buttons:
                if (upClick) {
     f66:	10 92 6e 01 	sts	0x016E, r1
                    menuState=menuState_adc;
     f6a:	c1 14       	cp	r12, r1
     f6c:	d1 04       	cpc	r13, r1
     f6e:	39 f0       	breq	.+14     	; 0xf7e <ButtonManage+0x320>
                    button = NULL;
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	80 93 6d 01 	sts	0x016D, r24
     f76:	10 92 6f 01 	sts	0x016F, r1
                }
                if (downClick) {
     f7a:	10 92 6e 01 	sts	0x016E, r1
                    menuState=menuState_settings;
     f7e:	01 15       	cp	r16, r1
     f80:	11 05       	cpc	r17, r1
     f82:	31 f0       	breq	.+12     	; 0xf90 <ButtonManage+0x332>
                    button = NULL;
     f84:	8a e0       	ldi	r24, 0x0A	; 10
     f86:	91 e0       	ldi	r25, 0x01	; 1
     f88:	90 93 6f 01 	sts	0x016F, r25
                }
                if (leftClick)
     f8c:	80 93 6e 01 	sts	0x016E, r24
     f90:	20 97       	sbiw	r28, 0x00	; 0
                    button = "Left";
     f92:	31 f0       	breq	.+12     	; 0xfa0 <ButtonManage+0x342>
     f94:	8f e0       	ldi	r24, 0x0F	; 15
     f96:	91 e0       	ldi	r25, 0x01	; 1
     f98:	90 93 6f 01 	sts	0x016F, r25
     f9c:	80 93 6e 01 	sts	0x016E, r24
                if (rightClick)
     fa0:	a1 14       	cp	r10, r1
                    button = "Right";
     fa2:	b1 04       	cpc	r11, r1
     fa4:	31 f0       	breq	.+12     	; 0xfb2 <ButtonManage+0x354>
     fa6:	85 e1       	ldi	r24, 0x15	; 21
     fa8:	91 e0       	ldi	r25, 0x01	; 1
     faa:	90 93 6f 01 	sts	0x016F, r25
                if (centerClick)
     fae:	80 93 6e 01 	sts	0x016E, r24
     fb2:	01 2b       	or	r16, r17
                    button = "Center";
     fb4:	41 f4       	brne	.+16     	; 0xfc6 <ButtonManage+0x368>
     fb6:	cd 2b       	or	r28, r29
     fb8:	31 f4       	brne	.+12     	; 0xfc6 <ButtonManage+0x368>
     fba:	ef 28       	or	r14, r15
     fbc:	21 f4       	brne	.+8      	; 0xfc6 <ButtonManage+0x368>
     fbe:	cd 28       	or	r12, r13
                break;
            default:
                break;
        }

        if (leftClick || rightClick || upClick || downClick || centerClick) {
     fc0:	11 f4       	brne	.+4      	; 0xfc6 <ButtonManage+0x368>
     fc2:	ab 28       	or	r10, r11
     fc4:	29 f0       	breq	.+10     	; 0xfd0 <ButtonManage+0x372>
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	80 93 6c 01 	sts	0x016C, r24
     fcc:	80 93 08 01 	sts	0x0108, r24
     fd0:	80 91 6d 01 	lds	r24, 0x016D
            click = true;
     fd4:	84 50       	subi	r24, 0x04	; 4
     fd6:	84 30       	cpi	r24, 0x04	; 4
     fd8:	98 f5       	brcc	.+102    	; 0x1040 <ButtonManage+0x3e2>
            update = true;
     fda:	80 91 7a 00 	lds	r24, 0x007A
        }
    }
    switch (menuState) {
     fde:	84 ff       	sbrs	r24, 4
     fe0:	fc cf       	rjmp	.-8      	; 0xfda <ButtonManage+0x37c>
     fe2:	80 91 7a 00 	lds	r24, 0x007A
     fe6:	80 61       	ori	r24, 0x10	; 16
			 *          complete and ready to be read out with \ref ADC_GetResult().
			 */
			static inline bool ADC_IsReadingComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool ADC_IsReadingComplete(void)
			{
				return ((ADCSRA & (1 << ADIF)) ? true : false);
     fe8:	80 93 7a 00 	sts	0x007A, r24
        case menuState_x:
        case menuState_y:
        case menuState_z:
        case menuState_pot:
            while (!(ADC_IsReadingComplete())) {};
     fec:	80 91 78 00 	lds	r24, 0x0078
			 *  \return The result of the last ADC conversion as an unsigned value.
			 */
			static inline uint16_t ADC_GetResult(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t ADC_GetResult(void)
			{
				ADCSRA |= (1 << ADIF);
     ff0:	90 91 79 00 	lds	r25, 0x0079
     ff4:	90 93 71 01 	sts	0x0171, r25
     ff8:	80 93 70 01 	sts	0x0170, r24
				return ADC;
     ffc:	9f 93       	push	r25
     ffe:	8f 93       	push	r24
    1000:	8c e1       	ldi	r24, 0x1C	; 28
            adc_value = ADC_GetResult();
    1002:	91 e0       	ldi	r25, 0x01	; 1
    1004:	9f 93       	push	r25
    1006:	8f 93       	push	r24
    1008:	82 e7       	ldi	r24, 0x72	; 114
            sprintf(adcStr, "%d", adc_value);
    100a:	91 e0       	ldi	r25, 0x01	; 1
    100c:	9f 93       	push	r25
    100e:	8f 93       	push	r24
    1010:	a5 d0       	rcall	.+330    	; 0x115c <sprintf>
    1012:	82 e7       	ldi	r24, 0x72	; 114
    1014:	91 e0       	ldi	r25, 0x01	; 1
    1016:	14 de       	rcall	.-984    	; 0xc40 <LCDnextLine>
    1018:	82 e0       	ldi	r24, 0x02	; 2
    101a:	e8 2e       	mov	r14, r24
    101c:	00 e7       	ldi	r16, 0x70	; 112
    101e:	11 e0       	ldi	r17, 0x01	; 1
    1020:	21 e0       	ldi	r18, 0x01	; 1
            LCDnextLine(adcStr);
    1022:	49 e0       	ldi	r20, 0x09	; 9
    1024:	51 e0       	ldi	r21, 0x01	; 1
    1026:	6a e0       	ldi	r22, 0x0A	; 10
    1028:	80 ec       	ldi	r24, 0xC0	; 192
            TWI_WritePacket(MCP_ADDRESS, 10, &dacOutput, sizeof(dacOutput), &adc_value, sizeof(adc_value));
    102a:	88 dd       	rcall	.-1264   	; 0xb3c <TWI_WritePacket>
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	03 c0       	rjmp	.+6      	; 0x1040 <ButtonManage+0x3e2>
    103a:	01 2b       	or	r16, r17
    103c:	21 f6       	brne	.-120    	; 0xfc6 <ButtonManage+0x368>
    103e:	bd cf       	rjmp	.-134    	; 0xfba <ButtonManage+0x35c>
            break;
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	1f 91       	pop	r17
    1046:	0f 91       	pop	r16
    1048:	ff 90       	pop	r15
    104a:	ef 90       	pop	r14
    104c:	df 90       	pop	r13
                break;
            default:
                break;
        }

        if (leftClick || rightClick || upClick || downClick || centerClick) {
    104e:	cf 90       	pop	r12
    1050:	bf 90       	pop	r11
    1052:	af 90       	pop	r10
            TWI_WritePacket(MCP_ADDRESS, 10, &dacOutput, sizeof(dacOutput), &adc_value, sizeof(adc_value));
            break;
        default:
            break;
    }
}
    1054:	08 95       	ret

00001056 <LCDupdate>:
    1056:	80 91 08 01 	lds	r24, 0x0108
    105a:	88 23       	and	r24, r24
    105c:	09 f4       	brne	.+2      	; 0x1060 <LCDupdate+0xa>
    105e:	56 c0       	rjmp	.+172    	; 0x110c <LCDupdate+0xb6>
    1060:	80 91 6d 01 	lds	r24, 0x016D
    1064:	84 30       	cpi	r24, 0x04	; 4
    1066:	09 f4       	brne	.+2      	; 0x106a <LCDupdate+0x14>
    1068:	3b c0       	rjmp	.+118    	; 0x10e0 <LCDupdate+0x8a>

void LCDupdate(void) {
    if (update) {
        switch (menuState) {
    106a:	48 f4       	brcc	.+18     	; 0x107e <LCDupdate+0x28>
    106c:	81 30       	cpi	r24, 0x01	; 1
    106e:	99 f0       	breq	.+38     	; 0x1096 <LCDupdate+0x40>
    1070:	78 f0       	brcs	.+30     	; 0x1090 <LCDupdate+0x3a>
    1072:	82 30       	cpi	r24, 0x02	; 2
    1074:	b1 f0       	breq	.+44     	; 0x10a2 <LCDupdate+0x4c>
    1076:	83 30       	cpi	r24, 0x03	; 3
    1078:	09 f0       	breq	.+2      	; 0x107c <LCDupdate+0x26>
    107a:	46 c0       	rjmp	.+140    	; 0x1108 <LCDupdate+0xb2>
    107c:	2d c0       	rjmp	.+90     	; 0x10d8 <LCDupdate+0x82>
    107e:	86 30       	cpi	r24, 0x06	; 6
    1080:	a9 f1       	breq	.+106    	; 0x10ec <LCDupdate+0x96>
    1082:	88 f1       	brcs	.+98     	; 0x10e6 <LCDupdate+0x90>
    1084:	87 30       	cpi	r24, 0x07	; 7
    1086:	a9 f1       	breq	.+106    	; 0x10f2 <LCDupdate+0x9c>
    1088:	88 30       	cpi	r24, 0x08	; 8
    108a:	09 f0       	breq	.+2      	; 0x108e <LCDupdate+0x38>
    108c:	3d c0       	rjmp	.+122    	; 0x1108 <LCDupdate+0xb2>
    108e:	34 c0       	rjmp	.+104    	; 0x10f8 <LCDupdate+0xa2>
            case menuState_init:
                LCDwrite("Hello, Josh!");
    1090:	8f e1       	ldi	r24, 0x1F	; 31
    1092:	91 e0       	ldi	r25, 0x01	; 1
    1094:	23 c0       	rjmp	.+70     	; 0x10dc <LCDupdate+0x86>
                break;
            case menuState_settings:
                LCDwrite("Settings:");
    1096:	8c e2       	ldi	r24, 0x2C	; 44
    1098:	91 e0       	ldi	r25, 0x01	; 1
    109a:	c3 dd       	rcall	.-1146   	; 0xc22 <LCDwrite>
    109c:	86 e3       	ldi	r24, 0x36	; 54
                LCDnextLine("Nothing!");
    109e:	91 e0       	ldi	r25, 0x01	; 1
    10a0:	32 c0       	rjmp	.+100    	; 0x1106 <LCDupdate+0xb0>
    10a2:	8f e3       	ldi	r24, 0x3F	; 63
                break;
            case menuState_settings_brightness:
                LCDwrite("S: Brightness");
    10a4:	91 e0       	ldi	r25, 0x01	; 1
    10a6:	bd dd       	rcall	.-1158   	; 0xc22 <LCDwrite>
    10a8:	80 91 07 01 	lds	r24, 0x0107
                sprintf(brightnessStr, "%d", brightness);
    10ac:	1f 92       	push	r1
    10ae:	8f 93       	push	r24
    10b0:	8c e1       	ldi	r24, 0x1C	; 28
    10b2:	91 e0       	ldi	r25, 0x01	; 1
    10b4:	9f 93       	push	r25
    10b6:	8f 93       	push	r24
    10b8:	8c e7       	ldi	r24, 0x7C	; 124
    10ba:	91 e0       	ldi	r25, 0x01	; 1
    10bc:	9f 93       	push	r25
    10be:	8f 93       	push	r24
    10c0:	4d d0       	rcall	.+154    	; 0x115c <sprintf>
    10c2:	8c e7       	ldi	r24, 0x7C	; 124
    10c4:	91 e0       	ldi	r25, 0x01	; 1
    10c6:	bc dd       	rcall	.-1160   	; 0xc40 <LCDnextLine>
                LCDnextLine(brightnessStr);
    10c8:	92 dd       	rcall	.-1244   	; 0xbee <LCDbrightnessUpdate>
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
                LCDbrightnessUpdate();
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
                break;
    10d4:	0f 90       	pop	r0
    10d6:	18 c0       	rjmp	.+48     	; 0x1108 <LCDupdate+0xb2>
    10d8:	8d e4       	ldi	r24, 0x4D	; 77
    10da:	91 e0       	ldi	r25, 0x01	; 1
    10dc:	a2 dd       	rcall	.-1212   	; 0xc22 <LCDwrite>
    10de:	14 c0       	rjmp	.+40     	; 0x1108 <LCDupdate+0xb2>
    10e0:	88 e5       	ldi	r24, 0x58	; 88
            case menuState_adc:
                LCDwrite("ADC values");
    10e2:	91 e0       	ldi	r25, 0x01	; 1
    10e4:	fb cf       	rjmp	.-10     	; 0x10dc <LCDupdate+0x86>
    10e6:	8a e5       	ldi	r24, 0x5A	; 90
    10e8:	91 e0       	ldi	r25, 0x01	; 1
                break;
    10ea:	f8 cf       	rjmp	.-16     	; 0x10dc <LCDupdate+0x86>
            case menuState_x:
                LCDwrite("X");
    10ec:	8c e5       	ldi	r24, 0x5C	; 92
    10ee:	91 e0       	ldi	r25, 0x01	; 1
    10f0:	f5 cf       	rjmp	.-22     	; 0x10dc <LCDupdate+0x86>
                break;
            case menuState_y:
                LCDwrite("Y");
    10f2:	8e e5       	ldi	r24, 0x5E	; 94
    10f4:	91 e0       	ldi	r25, 0x01	; 1
    10f6:	f2 cf       	rjmp	.-28     	; 0x10dc <LCDupdate+0x86>
                break;
            case menuState_z:
                LCDwrite("Z");
    10f8:	82 e6       	ldi	r24, 0x62	; 98
    10fa:	91 e0       	ldi	r25, 0x01	; 1
    10fc:	92 dd       	rcall	.-1244   	; 0xc22 <LCDwrite>
                break;
            case menuState_pot:
                LCDwrite("Pot");
    10fe:	80 91 6e 01 	lds	r24, 0x016E
    1102:	90 91 6f 01 	lds	r25, 0x016F
                break;
            case menuState_buttons:
                LCDwrite("Buttons!");
    1106:	9c dd       	rcall	.-1224   	; 0xc40 <LCDnextLine>
    1108:	10 92 08 01 	sts	0x0108, r1
                LCDnextLine(button);
    110c:	08 95       	ret

0000110e <LCDstart>:
    110e:	2f ef       	ldi	r18, 0xFF	; 255
    1110:	89 e6       	ldi	r24, 0x69	; 105
    1112:	98 e1       	ldi	r25, 0x18	; 24
    1114:	21 50       	subi	r18, 0x01	; 1
    1116:	80 40       	sbci	r24, 0x00	; 0
                break;
            default:
                break;
        }
        update = false;
    1118:	90 40       	sbci	r25, 0x00	; 0
    111a:	e1 f7       	brne	.-8      	; 0x1114 <LCDstart+0x6>
    111c:	00 c0       	rjmp	.+0      	; 0x111e <LCDstart+0x10>
    111e:	00 00       	nop
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
    1120:	83 e3       	ldi	r24, 0x33	; 51
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	90 93 cd 00 	sts	0x00CD, r25
    1128:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
    112c:	86 e0       	ldi	r24, 0x06	; 6
    112e:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
    1132:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
    1136:	88 e1       	ldi	r24, 0x18	; 24
    1138:	80 93 c9 00 	sts	0x00C9, r24

				DDRD  |= (1 << 3);
    113c:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
    113e:	5a 9a       	sbi	0x0b, 2	; 11
static enum menuStates_t menuState=menuState_init;

void LCDstart(void) {
    _delay_ms(1000);
    Serial_Init(9600, false);
    LCDupdate();
    1140:	8a df       	rcall	.-236    	; 0x1056 <LCDupdate>
    1142:	8f e0       	ldi	r24, 0x0F	; 15
    brightness = 15;
    1144:	80 93 07 01 	sts	0x0107, r24
    1148:	52 dd       	rcall	.-1372   	; 0xbee <LCDbrightnessUpdate>
    LCDbrightnessUpdate();
    114a:	84 98       	cbi	0x10, 4	; 16
    114c:	ee e7       	ldi	r30, 0x7E	; 126
				DDRF  &= ~(1 << ChannelIndex);
				DIDR0 |=  (1 << ChannelIndex);
				#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
				if (ChannelIndex < 8)
				{
					DDRF  &= ~(1 << ChannelIndex);
    114e:	f0 e0       	ldi	r31, 0x00	; 0
					DIDR0 |=  (1 << ChannelIndex);
    1150:	80 81       	ld	r24, Z
    1152:	80 61       	ori	r24, 0x10	; 16
    1154:	80 83       	st	Z, r24
    1156:	84 e4       	ldi	r24, 0x44	; 68
    1158:	90 e0       	ldi	r25, 0x00	; 0

    ADC_SetupChannel(4);
    ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_CHANNEL4);
    115a:	36 cd       	rjmp	.-1428   	; 0xbc8 <ADC_StartReading>

0000115c <sprintf>:
    115c:	a0 e1       	ldi	r26, 0x10	; 16
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	e3 eb       	ldi	r30, 0xB3	; 179
    1162:	f8 e0       	ldi	r31, 0x08	; 8
    1164:	98 c2       	rjmp	.+1328   	; 0x1696 <__prologue_saves__+0x1c>
    1166:	0f 89       	ldd	r16, Y+23	; 0x17
    1168:	18 8d       	ldd	r17, Y+24	; 0x18
    116a:	86 e0       	ldi	r24, 0x06	; 6
    116c:	8c 83       	std	Y+4, r24	; 0x04
    116e:	1a 83       	std	Y+2, r17	; 0x02
    1170:	09 83       	std	Y+1, r16	; 0x01
    1172:	8f ef       	ldi	r24, 0xFF	; 255
    1174:	9f e7       	ldi	r25, 0x7F	; 127
    1176:	9e 83       	std	Y+6, r25	; 0x06
    1178:	8d 83       	std	Y+5, r24	; 0x05
    117a:	ae 01       	movw	r20, r28
    117c:	45 5e       	subi	r20, 0xE5	; 229
    117e:	5f 4f       	sbci	r21, 0xFF	; 255
    1180:	58 8b       	std	Y+16, r21	; 0x10
    1182:	4f 87       	std	Y+15, r20	; 0x0f
    1184:	69 8d       	ldd	r22, Y+25	; 0x19
    1186:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1188:	ce 01       	movw	r24, r28
    118a:	01 96       	adiw	r24, 0x01	; 1
    118c:	08 d0       	rcall	.+16     	; 0x119e <vfprintf>
    118e:	ef 81       	ldd	r30, Y+7	; 0x07
    1190:	f8 85       	ldd	r31, Y+8	; 0x08
    1192:	e0 0f       	add	r30, r16
    1194:	f1 1f       	adc	r31, r17
    1196:	10 82       	st	Z, r1
    1198:	60 96       	adiw	r28, 0x10	; 16
    119a:	e4 e0       	ldi	r30, 0x04	; 4
    119c:	98 c2       	rjmp	.+1328   	; 0x16ce <__epilogue_restores__+0x1c>

0000119e <vfprintf>:
    119e:	ac e0       	ldi	r26, 0x0C	; 12
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e4 ed       	ldi	r30, 0xD4	; 212
    11a4:	f8 e0       	ldi	r31, 0x08	; 8
    11a6:	69 c2       	rjmp	.+1234   	; 0x167a <__prologue_saves__>
    11a8:	7c 01       	movw	r14, r24
    11aa:	6b 01       	movw	r12, r22
    11ac:	8a 01       	movw	r16, r20
    11ae:	fc 01       	movw	r30, r24
    11b0:	17 82       	std	Z+7, r1	; 0x07
    11b2:	16 82       	std	Z+6, r1	; 0x06
    11b4:	83 81       	ldd	r24, Z+3	; 0x03
    11b6:	81 ff       	sbrs	r24, 1
    11b8:	ba c1       	rjmp	.+884    	; 0x152e <vfprintf+0x390>
    11ba:	88 24       	eor	r8, r8
    11bc:	83 94       	inc	r8
    11be:	91 2c       	mov	r9, r1
    11c0:	8c 0e       	add	r8, r28
    11c2:	9d 1e       	adc	r9, r29
    11c4:	f7 01       	movw	r30, r14
    11c6:	93 81       	ldd	r25, Z+3	; 0x03
    11c8:	f6 01       	movw	r30, r12
    11ca:	93 fd       	sbrc	r25, 3
    11cc:	85 91       	lpm	r24, Z+
    11ce:	93 ff       	sbrs	r25, 3
    11d0:	81 91       	ld	r24, Z+
    11d2:	6f 01       	movw	r12, r30
    11d4:	88 23       	and	r24, r24
    11d6:	09 f4       	brne	.+2      	; 0x11da <vfprintf+0x3c>
    11d8:	a6 c1       	rjmp	.+844    	; 0x1526 <vfprintf+0x388>
    11da:	85 32       	cpi	r24, 0x25	; 37
    11dc:	39 f4       	brne	.+14     	; 0x11ec <vfprintf+0x4e>
    11de:	93 fd       	sbrc	r25, 3
    11e0:	85 91       	lpm	r24, Z+
    11e2:	93 ff       	sbrs	r25, 3
    11e4:	81 91       	ld	r24, Z+
    11e6:	6f 01       	movw	r12, r30
    11e8:	85 32       	cpi	r24, 0x25	; 37
    11ea:	21 f4       	brne	.+8      	; 0x11f4 <vfprintf+0x56>
    11ec:	b7 01       	movw	r22, r14
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	ba d1       	rcall	.+884    	; 0x1566 <fputc>
    11f2:	e8 cf       	rjmp	.-48     	; 0x11c4 <vfprintf+0x26>
    11f4:	71 2c       	mov	r7, r1
    11f6:	31 2c       	mov	r3, r1
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	20 32       	cpi	r18, 0x20	; 32
    11fc:	a8 f4       	brcc	.+42     	; 0x1228 <vfprintf+0x8a>
    11fe:	8b 32       	cpi	r24, 0x2B	; 43
    1200:	61 f0       	breq	.+24     	; 0x121a <vfprintf+0x7c>
    1202:	28 f4       	brcc	.+10     	; 0x120e <vfprintf+0x70>
    1204:	80 32       	cpi	r24, 0x20	; 32
    1206:	51 f0       	breq	.+20     	; 0x121c <vfprintf+0x7e>
    1208:	83 32       	cpi	r24, 0x23	; 35
    120a:	71 f4       	brne	.+28     	; 0x1228 <vfprintf+0x8a>
    120c:	0b c0       	rjmp	.+22     	; 0x1224 <vfprintf+0x86>
    120e:	8d 32       	cpi	r24, 0x2D	; 45
    1210:	39 f0       	breq	.+14     	; 0x1220 <vfprintf+0x82>
    1212:	80 33       	cpi	r24, 0x30	; 48
    1214:	49 f4       	brne	.+18     	; 0x1228 <vfprintf+0x8a>
    1216:	21 60       	ori	r18, 0x01	; 1
    1218:	28 c0       	rjmp	.+80     	; 0x126a <vfprintf+0xcc>
    121a:	22 60       	ori	r18, 0x02	; 2
    121c:	24 60       	ori	r18, 0x04	; 4
    121e:	25 c0       	rjmp	.+74     	; 0x126a <vfprintf+0xcc>
    1220:	28 60       	ori	r18, 0x08	; 8
    1222:	23 c0       	rjmp	.+70     	; 0x126a <vfprintf+0xcc>
    1224:	20 61       	ori	r18, 0x10	; 16
    1226:	21 c0       	rjmp	.+66     	; 0x126a <vfprintf+0xcc>
    1228:	27 fd       	sbrc	r18, 7
    122a:	27 c0       	rjmp	.+78     	; 0x127a <vfprintf+0xdc>
    122c:	38 2f       	mov	r19, r24
    122e:	30 53       	subi	r19, 0x30	; 48
    1230:	3a 30       	cpi	r19, 0x0A	; 10
    1232:	78 f4       	brcc	.+30     	; 0x1252 <vfprintf+0xb4>
    1234:	26 ff       	sbrs	r18, 6
    1236:	06 c0       	rjmp	.+12     	; 0x1244 <vfprintf+0xa6>
    1238:	fa e0       	ldi	r31, 0x0A	; 10
    123a:	7f 9e       	mul	r7, r31
    123c:	30 0d       	add	r19, r0
    123e:	11 24       	eor	r1, r1
    1240:	73 2e       	mov	r7, r19
    1242:	13 c0       	rjmp	.+38     	; 0x126a <vfprintf+0xcc>
    1244:	8a e0       	ldi	r24, 0x0A	; 10
    1246:	38 9e       	mul	r3, r24
    1248:	30 0d       	add	r19, r0
    124a:	11 24       	eor	r1, r1
    124c:	33 2e       	mov	r3, r19
    124e:	20 62       	ori	r18, 0x20	; 32
    1250:	0c c0       	rjmp	.+24     	; 0x126a <vfprintf+0xcc>
    1252:	8e 32       	cpi	r24, 0x2E	; 46
    1254:	21 f4       	brne	.+8      	; 0x125e <vfprintf+0xc0>
    1256:	26 fd       	sbrc	r18, 6
    1258:	66 c1       	rjmp	.+716    	; 0x1526 <vfprintf+0x388>
    125a:	20 64       	ori	r18, 0x40	; 64
    125c:	06 c0       	rjmp	.+12     	; 0x126a <vfprintf+0xcc>
    125e:	8c 36       	cpi	r24, 0x6C	; 108
    1260:	11 f4       	brne	.+4      	; 0x1266 <vfprintf+0xc8>
    1262:	20 68       	ori	r18, 0x80	; 128
    1264:	02 c0       	rjmp	.+4      	; 0x126a <vfprintf+0xcc>
    1266:	88 36       	cpi	r24, 0x68	; 104
    1268:	41 f4       	brne	.+16     	; 0x127a <vfprintf+0xdc>
    126a:	f6 01       	movw	r30, r12
    126c:	93 fd       	sbrc	r25, 3
    126e:	85 91       	lpm	r24, Z+
    1270:	93 ff       	sbrs	r25, 3
    1272:	81 91       	ld	r24, Z+
    1274:	6f 01       	movw	r12, r30
    1276:	81 11       	cpse	r24, r1
    1278:	c0 cf       	rjmp	.-128    	; 0x11fa <vfprintf+0x5c>
    127a:	98 2f       	mov	r25, r24
    127c:	95 54       	subi	r25, 0x45	; 69
    127e:	93 30       	cpi	r25, 0x03	; 3
    1280:	18 f0       	brcs	.+6      	; 0x1288 <vfprintf+0xea>
    1282:	90 52       	subi	r25, 0x20	; 32
    1284:	93 30       	cpi	r25, 0x03	; 3
    1286:	28 f4       	brcc	.+10     	; 0x1292 <vfprintf+0xf4>
    1288:	0c 5f       	subi	r16, 0xFC	; 252
    128a:	1f 4f       	sbci	r17, 0xFF	; 255
    128c:	ff e3       	ldi	r31, 0x3F	; 63
    128e:	f9 83       	std	Y+1, r31	; 0x01
    1290:	0d c0       	rjmp	.+26     	; 0x12ac <vfprintf+0x10e>
    1292:	83 36       	cpi	r24, 0x63	; 99
    1294:	31 f0       	breq	.+12     	; 0x12a2 <vfprintf+0x104>
    1296:	83 37       	cpi	r24, 0x73	; 115
    1298:	71 f0       	breq	.+28     	; 0x12b6 <vfprintf+0x118>
    129a:	83 35       	cpi	r24, 0x53	; 83
    129c:	09 f0       	breq	.+2      	; 0x12a0 <vfprintf+0x102>
    129e:	5a c0       	rjmp	.+180    	; 0x1354 <vfprintf+0x1b6>
    12a0:	22 c0       	rjmp	.+68     	; 0x12e6 <vfprintf+0x148>
    12a2:	f8 01       	movw	r30, r16
    12a4:	80 81       	ld	r24, Z
    12a6:	89 83       	std	Y+1, r24	; 0x01
    12a8:	0e 5f       	subi	r16, 0xFE	; 254
    12aa:	1f 4f       	sbci	r17, 0xFF	; 255
    12ac:	66 24       	eor	r6, r6
    12ae:	63 94       	inc	r6
    12b0:	71 2c       	mov	r7, r1
    12b2:	54 01       	movw	r10, r8
    12b4:	14 c0       	rjmp	.+40     	; 0x12de <vfprintf+0x140>
    12b6:	28 01       	movw	r4, r16
    12b8:	f2 e0       	ldi	r31, 0x02	; 2
    12ba:	4f 0e       	add	r4, r31
    12bc:	51 1c       	adc	r5, r1
    12be:	f8 01       	movw	r30, r16
    12c0:	a0 80       	ld	r10, Z
    12c2:	b1 80       	ldd	r11, Z+1	; 0x01
    12c4:	26 ff       	sbrs	r18, 6
    12c6:	03 c0       	rjmp	.+6      	; 0x12ce <vfprintf+0x130>
    12c8:	67 2d       	mov	r22, r7
    12ca:	70 e0       	ldi	r23, 0x00	; 0
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <vfprintf+0x134>
    12ce:	6f ef       	ldi	r22, 0xFF	; 255
    12d0:	7f ef       	ldi	r23, 0xFF	; 255
    12d2:	c5 01       	movw	r24, r10
    12d4:	2c 87       	std	Y+12, r18	; 0x0c
    12d6:	3c d1       	rcall	.+632    	; 0x1550 <strnlen>
    12d8:	3c 01       	movw	r6, r24
    12da:	82 01       	movw	r16, r4
    12dc:	2c 85       	ldd	r18, Y+12	; 0x0c
    12de:	6f e7       	ldi	r22, 0x7F	; 127
    12e0:	26 2e       	mov	r2, r22
    12e2:	22 22       	and	r2, r18
    12e4:	17 c0       	rjmp	.+46     	; 0x1314 <vfprintf+0x176>
    12e6:	28 01       	movw	r4, r16
    12e8:	f2 e0       	ldi	r31, 0x02	; 2
    12ea:	4f 0e       	add	r4, r31
    12ec:	51 1c       	adc	r5, r1
    12ee:	f8 01       	movw	r30, r16
    12f0:	a0 80       	ld	r10, Z
    12f2:	b1 80       	ldd	r11, Z+1	; 0x01
    12f4:	26 ff       	sbrs	r18, 6
    12f6:	03 c0       	rjmp	.+6      	; 0x12fe <vfprintf+0x160>
    12f8:	67 2d       	mov	r22, r7
    12fa:	70 e0       	ldi	r23, 0x00	; 0
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <vfprintf+0x164>
    12fe:	6f ef       	ldi	r22, 0xFF	; 255
    1300:	7f ef       	ldi	r23, 0xFF	; 255
    1302:	c5 01       	movw	r24, r10
    1304:	2c 87       	std	Y+12, r18	; 0x0c
    1306:	19 d1       	rcall	.+562    	; 0x153a <strnlen_P>
    1308:	3c 01       	movw	r6, r24
    130a:	2c 85       	ldd	r18, Y+12	; 0x0c
    130c:	50 e8       	ldi	r21, 0x80	; 128
    130e:	25 2e       	mov	r2, r21
    1310:	22 2a       	or	r2, r18
    1312:	82 01       	movw	r16, r4
    1314:	23 fc       	sbrc	r2, 3
    1316:	1a c0       	rjmp	.+52     	; 0x134c <vfprintf+0x1ae>
    1318:	05 c0       	rjmp	.+10     	; 0x1324 <vfprintf+0x186>
    131a:	b7 01       	movw	r22, r14
    131c:	80 e2       	ldi	r24, 0x20	; 32
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	22 d1       	rcall	.+580    	; 0x1566 <fputc>
    1322:	3a 94       	dec	r3
    1324:	83 2d       	mov	r24, r3
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	68 16       	cp	r6, r24
    132a:	79 06       	cpc	r7, r25
    132c:	b0 f3       	brcs	.-20     	; 0x131a <vfprintf+0x17c>
    132e:	0e c0       	rjmp	.+28     	; 0x134c <vfprintf+0x1ae>
    1330:	f5 01       	movw	r30, r10
    1332:	27 fc       	sbrc	r2, 7
    1334:	85 91       	lpm	r24, Z+
    1336:	27 fe       	sbrs	r2, 7
    1338:	81 91       	ld	r24, Z+
    133a:	5f 01       	movw	r10, r30
    133c:	b7 01       	movw	r22, r14
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	12 d1       	rcall	.+548    	; 0x1566 <fputc>
    1342:	31 10       	cpse	r3, r1
    1344:	3a 94       	dec	r3
    1346:	f1 e0       	ldi	r31, 0x01	; 1
    1348:	6f 1a       	sub	r6, r31
    134a:	71 08       	sbc	r7, r1
    134c:	61 14       	cp	r6, r1
    134e:	71 04       	cpc	r7, r1
    1350:	79 f7       	brne	.-34     	; 0x1330 <vfprintf+0x192>
    1352:	e6 c0       	rjmp	.+460    	; 0x1520 <vfprintf+0x382>
    1354:	84 36       	cpi	r24, 0x64	; 100
    1356:	11 f0       	breq	.+4      	; 0x135c <vfprintf+0x1be>
    1358:	89 36       	cpi	r24, 0x69	; 105
    135a:	39 f5       	brne	.+78     	; 0x13aa <vfprintf+0x20c>
    135c:	f8 01       	movw	r30, r16
    135e:	27 ff       	sbrs	r18, 7
    1360:	07 c0       	rjmp	.+14     	; 0x1370 <vfprintf+0x1d2>
    1362:	60 81       	ld	r22, Z
    1364:	71 81       	ldd	r23, Z+1	; 0x01
    1366:	82 81       	ldd	r24, Z+2	; 0x02
    1368:	93 81       	ldd	r25, Z+3	; 0x03
    136a:	0c 5f       	subi	r16, 0xFC	; 252
    136c:	1f 4f       	sbci	r17, 0xFF	; 255
    136e:	08 c0       	rjmp	.+16     	; 0x1380 <vfprintf+0x1e2>
    1370:	60 81       	ld	r22, Z
    1372:	71 81       	ldd	r23, Z+1	; 0x01
    1374:	88 27       	eor	r24, r24
    1376:	77 fd       	sbrc	r23, 7
    1378:	80 95       	com	r24
    137a:	98 2f       	mov	r25, r24
    137c:	0e 5f       	subi	r16, 0xFE	; 254
    137e:	1f 4f       	sbci	r17, 0xFF	; 255
    1380:	4f e6       	ldi	r20, 0x6F	; 111
    1382:	64 2e       	mov	r6, r20
    1384:	62 22       	and	r6, r18
    1386:	97 ff       	sbrs	r25, 7
    1388:	09 c0       	rjmp	.+18     	; 0x139c <vfprintf+0x1fe>
    138a:	90 95       	com	r25
    138c:	80 95       	com	r24
    138e:	70 95       	com	r23
    1390:	61 95       	neg	r22
    1392:	7f 4f       	sbci	r23, 0xFF	; 255
    1394:	8f 4f       	sbci	r24, 0xFF	; 255
    1396:	9f 4f       	sbci	r25, 0xFF	; 255
    1398:	f0 e8       	ldi	r31, 0x80	; 128
    139a:	6f 2a       	or	r6, r31
    139c:	2a e0       	ldi	r18, 0x0A	; 10
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	a4 01       	movw	r20, r8
    13a2:	0d d1       	rcall	.+538    	; 0x15be <__ultoa_invert>
    13a4:	a8 2e       	mov	r10, r24
    13a6:	a8 18       	sub	r10, r8
    13a8:	43 c0       	rjmp	.+134    	; 0x1430 <vfprintf+0x292>
    13aa:	85 37       	cpi	r24, 0x75	; 117
    13ac:	31 f4       	brne	.+12     	; 0x13ba <vfprintf+0x21c>
    13ae:	3f ee       	ldi	r19, 0xEF	; 239
    13b0:	b3 2e       	mov	r11, r19
    13b2:	b2 22       	and	r11, r18
    13b4:	2a e0       	ldi	r18, 0x0A	; 10
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	24 c0       	rjmp	.+72     	; 0x1402 <vfprintf+0x264>
    13ba:	99 ef       	ldi	r25, 0xF9	; 249
    13bc:	b9 2e       	mov	r11, r25
    13be:	b2 22       	and	r11, r18
    13c0:	8f 36       	cpi	r24, 0x6F	; 111
    13c2:	b9 f0       	breq	.+46     	; 0x13f2 <vfprintf+0x254>
    13c4:	20 f4       	brcc	.+8      	; 0x13ce <vfprintf+0x230>
    13c6:	88 35       	cpi	r24, 0x58	; 88
    13c8:	09 f0       	breq	.+2      	; 0x13cc <vfprintf+0x22e>
    13ca:	ad c0       	rjmp	.+346    	; 0x1526 <vfprintf+0x388>
    13cc:	0d c0       	rjmp	.+26     	; 0x13e8 <vfprintf+0x24a>
    13ce:	80 37       	cpi	r24, 0x70	; 112
    13d0:	21 f0       	breq	.+8      	; 0x13da <vfprintf+0x23c>
    13d2:	88 37       	cpi	r24, 0x78	; 120
    13d4:	09 f0       	breq	.+2      	; 0x13d8 <vfprintf+0x23a>
    13d6:	a7 c0       	rjmp	.+334    	; 0x1526 <vfprintf+0x388>
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <vfprintf+0x240>
    13da:	20 e1       	ldi	r18, 0x10	; 16
    13dc:	b2 2a       	or	r11, r18
    13de:	b4 fe       	sbrs	r11, 4
    13e0:	0b c0       	rjmp	.+22     	; 0x13f8 <vfprintf+0x25a>
    13e2:	84 e0       	ldi	r24, 0x04	; 4
    13e4:	b8 2a       	or	r11, r24
    13e6:	08 c0       	rjmp	.+16     	; 0x13f8 <vfprintf+0x25a>
    13e8:	24 ff       	sbrs	r18, 4
    13ea:	09 c0       	rjmp	.+18     	; 0x13fe <vfprintf+0x260>
    13ec:	e6 e0       	ldi	r30, 0x06	; 6
    13ee:	be 2a       	or	r11, r30
    13f0:	06 c0       	rjmp	.+12     	; 0x13fe <vfprintf+0x260>
    13f2:	28 e0       	ldi	r18, 0x08	; 8
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	05 c0       	rjmp	.+10     	; 0x1402 <vfprintf+0x264>
    13f8:	20 e1       	ldi	r18, 0x10	; 16
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <vfprintf+0x264>
    13fe:	20 e1       	ldi	r18, 0x10	; 16
    1400:	32 e0       	ldi	r19, 0x02	; 2
    1402:	f8 01       	movw	r30, r16
    1404:	b7 fe       	sbrs	r11, 7
    1406:	07 c0       	rjmp	.+14     	; 0x1416 <vfprintf+0x278>
    1408:	60 81       	ld	r22, Z
    140a:	71 81       	ldd	r23, Z+1	; 0x01
    140c:	82 81       	ldd	r24, Z+2	; 0x02
    140e:	93 81       	ldd	r25, Z+3	; 0x03
    1410:	0c 5f       	subi	r16, 0xFC	; 252
    1412:	1f 4f       	sbci	r17, 0xFF	; 255
    1414:	06 c0       	rjmp	.+12     	; 0x1422 <vfprintf+0x284>
    1416:	60 81       	ld	r22, Z
    1418:	71 81       	ldd	r23, Z+1	; 0x01
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	0e 5f       	subi	r16, 0xFE	; 254
    1420:	1f 4f       	sbci	r17, 0xFF	; 255
    1422:	a4 01       	movw	r20, r8
    1424:	cc d0       	rcall	.+408    	; 0x15be <__ultoa_invert>
    1426:	a8 2e       	mov	r10, r24
    1428:	a8 18       	sub	r10, r8
    142a:	8f e7       	ldi	r24, 0x7F	; 127
    142c:	68 2e       	mov	r6, r24
    142e:	6b 20       	and	r6, r11
    1430:	66 fe       	sbrs	r6, 6
    1432:	0b c0       	rjmp	.+22     	; 0x144a <vfprintf+0x2ac>
    1434:	36 2d       	mov	r19, r6
    1436:	3e 7f       	andi	r19, 0xFE	; 254
    1438:	a7 14       	cp	r10, r7
    143a:	50 f4       	brcc	.+20     	; 0x1450 <vfprintf+0x2b2>
    143c:	64 fe       	sbrs	r6, 4
    143e:	0a c0       	rjmp	.+20     	; 0x1454 <vfprintf+0x2b6>
    1440:	62 fc       	sbrc	r6, 2
    1442:	08 c0       	rjmp	.+16     	; 0x1454 <vfprintf+0x2b6>
    1444:	36 2d       	mov	r19, r6
    1446:	3e 7e       	andi	r19, 0xEE	; 238
    1448:	05 c0       	rjmp	.+10     	; 0x1454 <vfprintf+0x2b6>
    144a:	ba 2c       	mov	r11, r10
    144c:	36 2d       	mov	r19, r6
    144e:	03 c0       	rjmp	.+6      	; 0x1456 <vfprintf+0x2b8>
    1450:	ba 2c       	mov	r11, r10
    1452:	01 c0       	rjmp	.+2      	; 0x1456 <vfprintf+0x2b8>
    1454:	b7 2c       	mov	r11, r7
    1456:	34 ff       	sbrs	r19, 4
    1458:	0d c0       	rjmp	.+26     	; 0x1474 <vfprintf+0x2d6>
    145a:	fe 01       	movw	r30, r28
    145c:	ea 0d       	add	r30, r10
    145e:	f1 1d       	adc	r31, r1
    1460:	80 81       	ld	r24, Z
    1462:	80 33       	cpi	r24, 0x30	; 48
    1464:	11 f4       	brne	.+4      	; 0x146a <vfprintf+0x2cc>
    1466:	39 7e       	andi	r19, 0xE9	; 233
    1468:	09 c0       	rjmp	.+18     	; 0x147c <vfprintf+0x2de>
    146a:	32 ff       	sbrs	r19, 2
    146c:	06 c0       	rjmp	.+12     	; 0x147a <vfprintf+0x2dc>
    146e:	b3 94       	inc	r11
    1470:	b3 94       	inc	r11
    1472:	04 c0       	rjmp	.+8      	; 0x147c <vfprintf+0x2de>
    1474:	83 2f       	mov	r24, r19
    1476:	86 78       	andi	r24, 0x86	; 134
    1478:	09 f0       	breq	.+2      	; 0x147c <vfprintf+0x2de>
    147a:	b3 94       	inc	r11
    147c:	33 fd       	sbrc	r19, 3
    147e:	13 c0       	rjmp	.+38     	; 0x14a6 <vfprintf+0x308>
    1480:	30 ff       	sbrs	r19, 0
    1482:	0e c0       	rjmp	.+28     	; 0x14a0 <vfprintf+0x302>
    1484:	7a 2c       	mov	r7, r10
    1486:	b3 14       	cp	r11, r3
    1488:	58 f4       	brcc	.+22     	; 0x14a0 <vfprintf+0x302>
    148a:	73 0c       	add	r7, r3
    148c:	7b 18       	sub	r7, r11
    148e:	b3 2c       	mov	r11, r3
    1490:	07 c0       	rjmp	.+14     	; 0x14a0 <vfprintf+0x302>
    1492:	b7 01       	movw	r22, r14
    1494:	80 e2       	ldi	r24, 0x20	; 32
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	3c 87       	std	Y+12, r19	; 0x0c
    149a:	65 d0       	rcall	.+202    	; 0x1566 <fputc>
    149c:	b3 94       	inc	r11
    149e:	3c 85       	ldd	r19, Y+12	; 0x0c
    14a0:	b3 14       	cp	r11, r3
    14a2:	b8 f3       	brcs	.-18     	; 0x1492 <vfprintf+0x2f4>
    14a4:	04 c0       	rjmp	.+8      	; 0x14ae <vfprintf+0x310>
    14a6:	b3 14       	cp	r11, r3
    14a8:	10 f4       	brcc	.+4      	; 0x14ae <vfprintf+0x310>
    14aa:	3b 18       	sub	r3, r11
    14ac:	01 c0       	rjmp	.+2      	; 0x14b0 <vfprintf+0x312>
    14ae:	31 2c       	mov	r3, r1
    14b0:	34 ff       	sbrs	r19, 4
    14b2:	11 c0       	rjmp	.+34     	; 0x14d6 <vfprintf+0x338>
    14b4:	b7 01       	movw	r22, r14
    14b6:	80 e3       	ldi	r24, 0x30	; 48
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	3c 87       	std	Y+12, r19	; 0x0c
    14bc:	54 d0       	rcall	.+168    	; 0x1566 <fputc>
    14be:	3c 85       	ldd	r19, Y+12	; 0x0c
    14c0:	32 ff       	sbrs	r19, 2
    14c2:	1c c0       	rjmp	.+56     	; 0x14fc <vfprintf+0x35e>
    14c4:	31 ff       	sbrs	r19, 1
    14c6:	03 c0       	rjmp	.+6      	; 0x14ce <vfprintf+0x330>
    14c8:	88 e5       	ldi	r24, 0x58	; 88
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <vfprintf+0x334>
    14ce:	88 e7       	ldi	r24, 0x78	; 120
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	b7 01       	movw	r22, r14
    14d4:	0c c0       	rjmp	.+24     	; 0x14ee <vfprintf+0x350>
    14d6:	83 2f       	mov	r24, r19
    14d8:	86 78       	andi	r24, 0x86	; 134
    14da:	81 f0       	breq	.+32     	; 0x14fc <vfprintf+0x35e>
    14dc:	31 fd       	sbrc	r19, 1
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <vfprintf+0x346>
    14e0:	80 e2       	ldi	r24, 0x20	; 32
    14e2:	01 c0       	rjmp	.+2      	; 0x14e6 <vfprintf+0x348>
    14e4:	8b e2       	ldi	r24, 0x2B	; 43
    14e6:	37 fd       	sbrc	r19, 7
    14e8:	8d e2       	ldi	r24, 0x2D	; 45
    14ea:	b7 01       	movw	r22, r14
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	3b d0       	rcall	.+118    	; 0x1566 <fputc>
    14f0:	05 c0       	rjmp	.+10     	; 0x14fc <vfprintf+0x35e>
    14f2:	b7 01       	movw	r22, r14
    14f4:	80 e3       	ldi	r24, 0x30	; 48
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	36 d0       	rcall	.+108    	; 0x1566 <fputc>
    14fa:	7a 94       	dec	r7
    14fc:	a7 14       	cp	r10, r7
    14fe:	c8 f3       	brcs	.-14     	; 0x14f2 <vfprintf+0x354>
    1500:	aa 94       	dec	r10
    1502:	f4 01       	movw	r30, r8
    1504:	ea 0d       	add	r30, r10
    1506:	f1 1d       	adc	r31, r1
    1508:	b7 01       	movw	r22, r14
    150a:	80 81       	ld	r24, Z
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	2b d0       	rcall	.+86     	; 0x1566 <fputc>
    1510:	a1 10       	cpse	r10, r1
    1512:	f6 cf       	rjmp	.-20     	; 0x1500 <vfprintf+0x362>
    1514:	05 c0       	rjmp	.+10     	; 0x1520 <vfprintf+0x382>
    1516:	b7 01       	movw	r22, r14
    1518:	80 e2       	ldi	r24, 0x20	; 32
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	24 d0       	rcall	.+72     	; 0x1566 <fputc>
    151e:	3a 94       	dec	r3
    1520:	31 10       	cpse	r3, r1
    1522:	f9 cf       	rjmp	.-14     	; 0x1516 <vfprintf+0x378>
    1524:	4f ce       	rjmp	.-866    	; 0x11c4 <vfprintf+0x26>
    1526:	f7 01       	movw	r30, r14
    1528:	26 81       	ldd	r18, Z+6	; 0x06
    152a:	37 81       	ldd	r19, Z+7	; 0x07
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <vfprintf+0x394>
    152e:	2f ef       	ldi	r18, 0xFF	; 255
    1530:	3f ef       	ldi	r19, 0xFF	; 255
    1532:	c9 01       	movw	r24, r18
    1534:	2c 96       	adiw	r28, 0x0c	; 12
    1536:	e2 e1       	ldi	r30, 0x12	; 18
    1538:	bc c0       	rjmp	.+376    	; 0x16b2 <__epilogue_restores__>

0000153a <strnlen_P>:
    153a:	fc 01       	movw	r30, r24
    153c:	05 90       	lpm	r0, Z+
    153e:	61 50       	subi	r22, 0x01	; 1
    1540:	70 40       	sbci	r23, 0x00	; 0
    1542:	01 10       	cpse	r0, r1
    1544:	d8 f7       	brcc	.-10     	; 0x153c <strnlen_P+0x2>
    1546:	80 95       	com	r24
    1548:	90 95       	com	r25
    154a:	8e 0f       	add	r24, r30
    154c:	9f 1f       	adc	r25, r31
    154e:	08 95       	ret

00001550 <strnlen>:
    1550:	fc 01       	movw	r30, r24
    1552:	61 50       	subi	r22, 0x01	; 1
    1554:	70 40       	sbci	r23, 0x00	; 0
    1556:	01 90       	ld	r0, Z+
    1558:	01 10       	cpse	r0, r1
    155a:	d8 f7       	brcc	.-10     	; 0x1552 <strnlen+0x2>
    155c:	80 95       	com	r24
    155e:	90 95       	com	r25
    1560:	8e 0f       	add	r24, r30
    1562:	9f 1f       	adc	r25, r31
    1564:	08 95       	ret

00001566 <fputc>:
    1566:	0f 93       	push	r16
    1568:	1f 93       	push	r17
    156a:	cf 93       	push	r28
    156c:	df 93       	push	r29
    156e:	8c 01       	movw	r16, r24
    1570:	eb 01       	movw	r28, r22
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	81 fd       	sbrc	r24, 1
    1576:	03 c0       	rjmp	.+6      	; 0x157e <fputc+0x18>
    1578:	0f ef       	ldi	r16, 0xFF	; 255
    157a:	1f ef       	ldi	r17, 0xFF	; 255
    157c:	1a c0       	rjmp	.+52     	; 0x15b2 <fputc+0x4c>
    157e:	82 ff       	sbrs	r24, 2
    1580:	0d c0       	rjmp	.+26     	; 0x159c <fputc+0x36>
    1582:	2e 81       	ldd	r18, Y+6	; 0x06
    1584:	3f 81       	ldd	r19, Y+7	; 0x07
    1586:	8c 81       	ldd	r24, Y+4	; 0x04
    1588:	9d 81       	ldd	r25, Y+5	; 0x05
    158a:	28 17       	cp	r18, r24
    158c:	39 07       	cpc	r19, r25
    158e:	64 f4       	brge	.+24     	; 0x15a8 <fputc+0x42>
    1590:	e8 81       	ld	r30, Y
    1592:	f9 81       	ldd	r31, Y+1	; 0x01
    1594:	01 93       	st	Z+, r16
    1596:	f9 83       	std	Y+1, r31	; 0x01
    1598:	e8 83       	st	Y, r30
    159a:	06 c0       	rjmp	.+12     	; 0x15a8 <fputc+0x42>
    159c:	e8 85       	ldd	r30, Y+8	; 0x08
    159e:	f9 85       	ldd	r31, Y+9	; 0x09
    15a0:	80 2f       	mov	r24, r16
    15a2:	09 95       	icall
    15a4:	89 2b       	or	r24, r25
    15a6:	41 f7       	brne	.-48     	; 0x1578 <fputc+0x12>
    15a8:	8e 81       	ldd	r24, Y+6	; 0x06
    15aa:	9f 81       	ldd	r25, Y+7	; 0x07
    15ac:	01 96       	adiw	r24, 0x01	; 1
    15ae:	9f 83       	std	Y+7, r25	; 0x07
    15b0:	8e 83       	std	Y+6, r24	; 0x06
    15b2:	c8 01       	movw	r24, r16
    15b4:	df 91       	pop	r29
    15b6:	cf 91       	pop	r28
    15b8:	1f 91       	pop	r17
    15ba:	0f 91       	pop	r16
    15bc:	08 95       	ret

000015be <__ultoa_invert>:
    15be:	fa 01       	movw	r30, r20
    15c0:	aa 27       	eor	r26, r26
    15c2:	28 30       	cpi	r18, 0x08	; 8
    15c4:	51 f1       	breq	.+84     	; 0x161a <__ultoa_invert+0x5c>
    15c6:	20 31       	cpi	r18, 0x10	; 16
    15c8:	81 f1       	breq	.+96     	; 0x162a <__ultoa_invert+0x6c>
    15ca:	e8 94       	clt
    15cc:	6f 93       	push	r22
    15ce:	6e 7f       	andi	r22, 0xFE	; 254
    15d0:	6e 5f       	subi	r22, 0xFE	; 254
    15d2:	7f 4f       	sbci	r23, 0xFF	; 255
    15d4:	8f 4f       	sbci	r24, 0xFF	; 255
    15d6:	9f 4f       	sbci	r25, 0xFF	; 255
    15d8:	af 4f       	sbci	r26, 0xFF	; 255
    15da:	b1 e0       	ldi	r27, 0x01	; 1
    15dc:	3e d0       	rcall	.+124    	; 0x165a <__ultoa_invert+0x9c>
    15de:	b4 e0       	ldi	r27, 0x04	; 4
    15e0:	3c d0       	rcall	.+120    	; 0x165a <__ultoa_invert+0x9c>
    15e2:	67 0f       	add	r22, r23
    15e4:	78 1f       	adc	r23, r24
    15e6:	89 1f       	adc	r24, r25
    15e8:	9a 1f       	adc	r25, r26
    15ea:	a1 1d       	adc	r26, r1
    15ec:	68 0f       	add	r22, r24
    15ee:	79 1f       	adc	r23, r25
    15f0:	8a 1f       	adc	r24, r26
    15f2:	91 1d       	adc	r25, r1
    15f4:	a1 1d       	adc	r26, r1
    15f6:	6a 0f       	add	r22, r26
    15f8:	71 1d       	adc	r23, r1
    15fa:	81 1d       	adc	r24, r1
    15fc:	91 1d       	adc	r25, r1
    15fe:	a1 1d       	adc	r26, r1
    1600:	20 d0       	rcall	.+64     	; 0x1642 <__ultoa_invert+0x84>
    1602:	09 f4       	brne	.+2      	; 0x1606 <__ultoa_invert+0x48>
    1604:	68 94       	set
    1606:	3f 91       	pop	r19
    1608:	2a e0       	ldi	r18, 0x0A	; 10
    160a:	26 9f       	mul	r18, r22
    160c:	11 24       	eor	r1, r1
    160e:	30 19       	sub	r19, r0
    1610:	30 5d       	subi	r19, 0xD0	; 208
    1612:	31 93       	st	Z+, r19
    1614:	de f6       	brtc	.-74     	; 0x15cc <__ultoa_invert+0xe>
    1616:	cf 01       	movw	r24, r30
    1618:	08 95       	ret
    161a:	46 2f       	mov	r20, r22
    161c:	47 70       	andi	r20, 0x07	; 7
    161e:	40 5d       	subi	r20, 0xD0	; 208
    1620:	41 93       	st	Z+, r20
    1622:	b3 e0       	ldi	r27, 0x03	; 3
    1624:	0f d0       	rcall	.+30     	; 0x1644 <__ultoa_invert+0x86>
    1626:	c9 f7       	brne	.-14     	; 0x161a <__ultoa_invert+0x5c>
    1628:	f6 cf       	rjmp	.-20     	; 0x1616 <__ultoa_invert+0x58>
    162a:	46 2f       	mov	r20, r22
    162c:	4f 70       	andi	r20, 0x0F	; 15
    162e:	40 5d       	subi	r20, 0xD0	; 208
    1630:	4a 33       	cpi	r20, 0x3A	; 58
    1632:	18 f0       	brcs	.+6      	; 0x163a <__ultoa_invert+0x7c>
    1634:	49 5d       	subi	r20, 0xD9	; 217
    1636:	31 fd       	sbrc	r19, 1
    1638:	40 52       	subi	r20, 0x20	; 32
    163a:	41 93       	st	Z+, r20
    163c:	02 d0       	rcall	.+4      	; 0x1642 <__ultoa_invert+0x84>
    163e:	a9 f7       	brne	.-22     	; 0x162a <__ultoa_invert+0x6c>
    1640:	ea cf       	rjmp	.-44     	; 0x1616 <__ultoa_invert+0x58>
    1642:	b4 e0       	ldi	r27, 0x04	; 4
    1644:	a6 95       	lsr	r26
    1646:	97 95       	ror	r25
    1648:	87 95       	ror	r24
    164a:	77 95       	ror	r23
    164c:	67 95       	ror	r22
    164e:	ba 95       	dec	r27
    1650:	c9 f7       	brne	.-14     	; 0x1644 <__ultoa_invert+0x86>
    1652:	00 97       	sbiw	r24, 0x00	; 0
    1654:	61 05       	cpc	r22, r1
    1656:	71 05       	cpc	r23, r1
    1658:	08 95       	ret
    165a:	9b 01       	movw	r18, r22
    165c:	ac 01       	movw	r20, r24
    165e:	0a 2e       	mov	r0, r26
    1660:	06 94       	lsr	r0
    1662:	57 95       	ror	r21
    1664:	47 95       	ror	r20
    1666:	37 95       	ror	r19
    1668:	27 95       	ror	r18
    166a:	ba 95       	dec	r27
    166c:	c9 f7       	brne	.-14     	; 0x1660 <__ultoa_invert+0xa2>
    166e:	62 0f       	add	r22, r18
    1670:	73 1f       	adc	r23, r19
    1672:	84 1f       	adc	r24, r20
    1674:	95 1f       	adc	r25, r21
    1676:	a0 1d       	adc	r26, r0
    1678:	08 95       	ret

0000167a <__prologue_saves__>:
    167a:	2f 92       	push	r2
    167c:	3f 92       	push	r3
    167e:	4f 92       	push	r4
    1680:	5f 92       	push	r5
    1682:	6f 92       	push	r6
    1684:	7f 92       	push	r7
    1686:	8f 92       	push	r8
    1688:	9f 92       	push	r9
    168a:	af 92       	push	r10
    168c:	bf 92       	push	r11
    168e:	cf 92       	push	r12
    1690:	df 92       	push	r13
    1692:	ef 92       	push	r14
    1694:	ff 92       	push	r15
    1696:	0f 93       	push	r16
    1698:	1f 93       	push	r17
    169a:	cf 93       	push	r28
    169c:	df 93       	push	r29
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	ca 1b       	sub	r28, r26
    16a4:	db 0b       	sbc	r29, r27
    16a6:	0f b6       	in	r0, 0x3f	; 63
    16a8:	f8 94       	cli
    16aa:	de bf       	out	0x3e, r29	; 62
    16ac:	0f be       	out	0x3f, r0	; 63
    16ae:	cd bf       	out	0x3d, r28	; 61
    16b0:	09 94       	ijmp

000016b2 <__epilogue_restores__>:
    16b2:	2a 88       	ldd	r2, Y+18	; 0x12
    16b4:	39 88       	ldd	r3, Y+17	; 0x11
    16b6:	48 88       	ldd	r4, Y+16	; 0x10
    16b8:	5f 84       	ldd	r5, Y+15	; 0x0f
    16ba:	6e 84       	ldd	r6, Y+14	; 0x0e
    16bc:	7d 84       	ldd	r7, Y+13	; 0x0d
    16be:	8c 84       	ldd	r8, Y+12	; 0x0c
    16c0:	9b 84       	ldd	r9, Y+11	; 0x0b
    16c2:	aa 84       	ldd	r10, Y+10	; 0x0a
    16c4:	b9 84       	ldd	r11, Y+9	; 0x09
    16c6:	c8 84       	ldd	r12, Y+8	; 0x08
    16c8:	df 80       	ldd	r13, Y+7	; 0x07
    16ca:	ee 80       	ldd	r14, Y+6	; 0x06
    16cc:	fd 80       	ldd	r15, Y+5	; 0x05
    16ce:	0c 81       	ldd	r16, Y+4	; 0x04
    16d0:	1b 81       	ldd	r17, Y+3	; 0x03
    16d2:	aa 81       	ldd	r26, Y+2	; 0x02
    16d4:	b9 81       	ldd	r27, Y+1	; 0x01
    16d6:	ce 0f       	add	r28, r30
    16d8:	d1 1d       	adc	r29, r1
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	f8 94       	cli
    16de:	de bf       	out	0x3e, r29	; 62
    16e0:	0f be       	out	0x3f, r0	; 63
    16e2:	cd bf       	out	0x3d, r28	; 61
    16e4:	ed 01       	movw	r28, r26
    16e6:	08 95       	ret

000016e8 <_exit>:
    16e8:	f8 94       	cli

000016ea <__stop_program>:
    16ea:	ff cf       	rjmp	.-2      	; 0x16ea <__stop_program>
