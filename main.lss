
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800100  00001b10  00001ba4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  0080016c  0080016c  00001c10  2**0
                  ALLOC
  3 .stab         000039c0  00000000  00000000  00001c10  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000072b0  00000000  00000000  000055d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  0000c880  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003d0  00000000  00000000  0000c8a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000615e  00000000  00000000  0000cc72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000019ea  00000000  00000000  00012dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000282c  00000000  00000000  000147ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000aac  00000000  00000000  00016fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002994  00000000  00000000  00017a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000041ca  00000000  00000000  0001a428  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000750  00000000  00000000  0001e5f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
       0:	9b c0       	rjmp	.+310    	; 0x138 <__ctors_end>
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
       2:	00 00       	nop
       4:	b5 c0       	rjmp	.+362    	; 0x170 <__bad_interrupt>
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
       6:	00 00       	nop
       8:	b3 c0       	rjmp	.+358    	; 0x170 <__bad_interrupt>
       a:	00 00       	nop
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
       c:	b1 c0       	rjmp	.+354    	; 0x170 <__bad_interrupt>
       e:	00 00       	nop
      10:	af c0       	rjmp	.+350    	; 0x170 <__bad_interrupt>
      12:	00 00       	nop
      14:	ad c0       	rjmp	.+346    	; 0x170 <__bad_interrupt>
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
      16:	00 00       	nop
      18:	ab c0       	rjmp	.+342    	; 0x170 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a9 c0       	rjmp	.+338    	; 0x170 <__bad_interrupt>
      1e:	00 00       	nop
	while (UDCON & (1 << RMWKUP));
      20:	a7 c0       	rjmp	.+334    	; 0x170 <__bad_interrupt>
      22:	00 00       	nop
      24:	a5 c0       	rjmp	.+330    	; 0x170 <__bad_interrupt>
      26:	00 00       	nop
}
      28:	02 c4       	rjmp	.+2052   	; 0x82e <__vector_10>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
      2a:	00 00       	nop
	USB_Device_ConfigurationNumber  = 0;
      2c:	a1 c0       	rjmp	.+322    	; 0x170 <__bad_interrupt>
      2e:	00 00       	nop

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
      30:	9f c0       	rjmp	.+318    	; 0x170 <__bad_interrupt>
      32:	00 00       	nop
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
      34:	9d c0       	rjmp	.+314    	; 0x170 <__bad_interrupt>
      36:	00 00       	nop
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
      38:	9b c0       	rjmp	.+310    	; 0x170 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	99 c0       	rjmp	.+306    	; 0x170 <__bad_interrupt>
      3e:	00 00       	nop
      40:	97 c0       	rjmp	.+302    	; 0x170 <__bad_interrupt>
      42:	00 00       	nop
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
      44:	95 c0       	rjmp	.+298    	; 0x170 <__bad_interrupt>
      46:	00 00       	nop
      48:	93 c0       	rjmp	.+294    	; 0x170 <__bad_interrupt>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
      4a:	00 00       	nop
      4c:	91 c0       	rjmp	.+290    	; 0x170 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8f c0       	rjmp	.+286    	; 0x170 <__bad_interrupt>
      52:	00 00       	nop
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
      54:	8d c0       	rjmp	.+282    	; 0x170 <__bad_interrupt>
      56:	00 00       	nop
      58:	8b c0       	rjmp	.+278    	; 0x170 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	89 c0       	rjmp	.+274    	; 0x170 <__bad_interrupt>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
      5e:	00 00       	nop
      60:	87 c0       	rjmp	.+270    	; 0x170 <__bad_interrupt>
      62:	00 00       	nop
      64:	85 c0       	rjmp	.+266    	; 0x170 <__bad_interrupt>
      66:	00 00       	nop
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
      68:	83 c0       	rjmp	.+262    	; 0x170 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	81 c0       	rjmp	.+258    	; 0x170 <__bad_interrupt>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
      6e:	00 00       	nop
      70:	7f c0       	rjmp	.+254    	; 0x170 <__bad_interrupt>
      72:	00 00       	nop
      74:	7d c0       	rjmp	.+250    	; 0x170 <__bad_interrupt>

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
      76:	00 00       	nop
      78:	7b c0       	rjmp	.+246    	; 0x170 <__bad_interrupt>
      7a:	00 00       	nop
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
      7c:	79 c0       	rjmp	.+242    	; 0x170 <__bad_interrupt>
      7e:	00 00       	nop
      80:	77 c0       	rjmp	.+238    	; 0x170 <__bad_interrupt>
      82:	00 00       	nop
      84:	75 c0       	rjmp	.+234    	; 0x170 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
      86:	00 00       	nop
      88:	73 c0       	rjmp	.+230    	; 0x170 <__bad_interrupt>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
      8a:	00 00       	nop

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      8c:	71 c0       	rjmp	.+226    	; 0x170 <__bad_interrupt>
      8e:	00 00       	nop
      90:	6f c0       	rjmp	.+222    	; 0x170 <__bad_interrupt>
      92:	00 00       	nop
      94:	6d c0       	rjmp	.+218    	; 0x170 <__bad_interrupt>
      96:	00 00       	nop
      98:	6b c0       	rjmp	.+214    	; 0x170 <__bad_interrupt>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
      9a:	00 00       	nop
      9c:	69 c0       	rjmp	.+210    	; 0x170 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	67 c0       	rjmp	.+206    	; 0x170 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	65 c0       	rjmp	.+202    	; 0x170 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	63 c0       	rjmp	.+198    	; 0x170 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ProductString>:

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      ac:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
      bc:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

000000ca <ManufacturerString>:
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      ca:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
      da:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e4 <LanguageString>:
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
      e4:	04 03 09 04                                         ....

000000e8 <ConfigurationDescriptor>:
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
      e8:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      f8:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     108:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     118:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000126 <DeviceDescriptor>:
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     126:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     136:	dc 01                                               ..

00000138 <__ctors_end>:
     138:	11 24       	eor	r1, r1
     13a:	1f be       	out	0x3f, r1	; 63
     13c:	cf ef       	ldi	r28, 0xFF	; 255
     13e:	da e0       	ldi	r29, 0x0A	; 10
     140:	de bf       	out	0x3e, r29	; 62
     142:	cd bf       	out	0x3d, r28	; 61

00000144 <__do_copy_data>:
     144:	11 e0       	ldi	r17, 0x01	; 1
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b1 e0       	ldi	r27, 0x01	; 1
     14a:	e0 e1       	ldi	r30, 0x10	; 16
     14c:	fb e1       	ldi	r31, 0x1B	; 27
     14e:	02 c0       	rjmp	.+4      	; 0x154 <__do_copy_data+0x10>
     150:	05 90       	lpm	r0, Z+
     152:	0d 92       	st	X+, r0
				ReportSize     -= 2;
     154:	ac 36       	cpi	r26, 0x6C	; 108
     156:	b1 07       	cpc	r27, r17
				ReportData     += 2;
     158:	d9 f7       	brne	.-10     	; 0x150 <__do_copy_data+0xc>

0000015a <__do_clear_bss>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	ac e6       	ldi	r26, 0x6C	; 108
				break;
     15e:	b1 e0       	ldi	r27, 0x01	; 1

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     160:	01 c0       	rjmp	.+2      	; 0x164 <.do_clear_bss_start>

00000162 <.do_clear_bss_loop>:
     162:	1d 92       	st	X+, r1

00000164 <.do_clear_bss_start>:
     164:	a9 38       	cpi	r26, 0x89	; 137
     166:	b1 07       	cpc	r27, r17
     168:	e1 f7       	brne	.-8      	; 0x162 <.do_clear_bss_loop>
     16a:	75 d2       	rcall	.+1258   	; 0x656 <main>
				ReportSize     -= 1;
     16c:	0c 94 86 0d 	jmp	0x1b0c	; 0x1b0c <_exit>

00000170 <__bad_interrupt>:
				ReportData     += 1;
     170:	47 cf       	rjmp	.-370    	; 0x0 <__vectors>

00000172 <__gesf2>:
     172:	a8 e1       	ldi	r26, 0x18	; 24
     174:	b0 e0       	ldi	r27, 0x00	; 0
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     176:	ef eb       	ldi	r30, 0xBF	; 191
     178:	f0 e0       	ldi	r31, 0x00	; 0
     17a:	0c 94 b7 0a 	jmp	0x156e	; 0x156e <__prologue_saves__+0x20>
     17e:	6d 8b       	std	Y+21, r22	; 0x15
     180:	7e 8b       	std	Y+22, r23	; 0x16
     182:	8f 8b       	std	Y+23, r24	; 0x17
     184:	98 8f       	std	Y+24, r25	; 0x18
     186:	29 8b       	std	Y+17, r18	; 0x11
     188:	3a 8b       	std	Y+18, r19	; 0x12
     18a:	4b 8b       	std	Y+19, r20	; 0x13
     18c:	5c 8b       	std	Y+20, r21	; 0x14
     18e:	be 01       	movw	r22, r28
     190:	67 5f       	subi	r22, 0xF7	; 247
     192:	7f 4f       	sbci	r23, 0xFF	; 255
     194:	ce 01       	movw	r24, r28
     196:	45 96       	adiw	r24, 0x15	; 21
     198:	69 d1       	rcall	.+722    	; 0x46c <__unpack_f>
     19a:	be 01       	movw	r22, r28
     19c:	6f 5f       	subi	r22, 0xFF	; 255
     19e:	7f 4f       	sbci	r23, 0xFF	; 255
     1a0:	ce 01       	movw	r24, r28
     1a2:	41 96       	adiw	r24, 0x11	; 17
     1a4:	63 d1       	rcall	.+710    	; 0x46c <__unpack_f>
     1a6:	89 85       	ldd	r24, Y+9	; 0x09
     1a8:	82 30       	cpi	r24, 0x02	; 2
     1aa:	50 f0       	brcs	.+20     	; 0x1c0 <__gesf2+0x4e>
     1ac:	89 81       	ldd	r24, Y+1	; 0x01
     1ae:	82 30       	cpi	r24, 0x02	; 2
     1b0:	38 f0       	brcs	.+14     	; 0x1c0 <__gesf2+0x4e>
     1b2:	be 01       	movw	r22, r28
     1b4:	6f 5f       	subi	r22, 0xFF	; 255
     1b6:	7f 4f       	sbci	r23, 0xFF	; 255
     1b8:	ce 01       	movw	r24, r28
     1ba:	09 96       	adiw	r24, 0x09	; 9
     1bc:	c6 d1       	rcall	.+908    	; 0x54a <__fpcmp_parts_f>
     1be:	01 c0       	rjmp	.+2      	; 0x1c2 <__gesf2+0x50>
     1c0:	8f ef       	ldi	r24, 0xFF	; 255
     1c2:	68 96       	adiw	r28, 0x18	; 24
     1c4:	e2 e0       	ldi	r30, 0x02	; 2
     1c6:	0c 94 d3 0a 	jmp	0x15a6	; 0x15a6 <__epilogue_restores__+0x20>

000001ca <__ltsf2>:
     1ca:	a8 e1       	ldi	r26, 0x18	; 24
     1cc:	b0 e0       	ldi	r27, 0x00	; 0
     1ce:	eb ee       	ldi	r30, 0xEB	; 235
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	0c 94 b7 0a 	jmp	0x156e	; 0x156e <__prologue_saves__+0x20>
     1d6:	6d 8b       	std	Y+21, r22	; 0x15
     1d8:	7e 8b       	std	Y+22, r23	; 0x16
     1da:	8f 8b       	std	Y+23, r24	; 0x17
     1dc:	98 8f       	std	Y+24, r25	; 0x18
     1de:	29 8b       	std	Y+17, r18	; 0x11
     1e0:	3a 8b       	std	Y+18, r19	; 0x12
     1e2:	4b 8b       	std	Y+19, r20	; 0x13
     1e4:	5c 8b       	std	Y+20, r21	; 0x14
     1e6:	be 01       	movw	r22, r28
     1e8:	67 5f       	subi	r22, 0xF7	; 247
     1ea:	7f 4f       	sbci	r23, 0xFF	; 255
     1ec:	ce 01       	movw	r24, r28
     1ee:	45 96       	adiw	r24, 0x15	; 21
     1f0:	3d d1       	rcall	.+634    	; 0x46c <__unpack_f>
     1f2:	be 01       	movw	r22, r28
     1f4:	6f 5f       	subi	r22, 0xFF	; 255
     1f6:	7f 4f       	sbci	r23, 0xFF	; 255
     1f8:	ce 01       	movw	r24, r28
     1fa:	41 96       	adiw	r24, 0x11	; 17
     1fc:	37 d1       	rcall	.+622    	; 0x46c <__unpack_f>
     1fe:	89 85       	ldd	r24, Y+9	; 0x09
     200:	82 30       	cpi	r24, 0x02	; 2
     202:	50 f0       	brcs	.+20     	; 0x218 <__ltsf2+0x4e>
     204:	89 81       	ldd	r24, Y+1	; 0x01
     206:	82 30       	cpi	r24, 0x02	; 2
     208:	38 f0       	brcs	.+14     	; 0x218 <__ltsf2+0x4e>
     20a:	be 01       	movw	r22, r28
     20c:	6f 5f       	subi	r22, 0xFF	; 255
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     20e:	7f 4f       	sbci	r23, 0xFF	; 255
     210:	ce 01       	movw	r24, r28
     212:	09 96       	adiw	r24, 0x09	; 9
     214:	9a d1       	rcall	.+820    	; 0x54a <__fpcmp_parts_f>
     216:	01 c0       	rjmp	.+2      	; 0x21a <__ltsf2+0x50>
     218:	81 e0       	ldi	r24, 0x01	; 1
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     21a:	68 96       	adiw	r28, 0x18	; 24
     21c:	e2 e0       	ldi	r30, 0x02	; 2
     21e:	0c 94 d3 0a 	jmp	0x15a6	; 0x15a6 <__epilogue_restores__+0x20>

00000222 <__floatsisf>:
     222:	a8 e0       	ldi	r26, 0x08	; 8
     224:	b0 e0       	ldi	r27, 0x00	; 0
     226:	e7 e1       	ldi	r30, 0x17	; 23
     228:	f1 e0       	ldi	r31, 0x01	; 1
     22a:	0c 94 b5 0a 	jmp	0x156a	; 0x156a <__prologue_saves__+0x1c>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
     22e:	23 e0       	ldi	r18, 0x03	; 3
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     230:	29 83       	std	Y+1, r18	; 0x01
     232:	8b 01       	movw	r16, r22
     234:	9c 01       	movw	r18, r24
     236:	00 27       	eor	r16, r16
     238:	37 fd       	sbrc	r19, 7
     23a:	03 95       	inc	r16
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     23c:	11 27       	eor	r17, r17
     23e:	22 27       	eor	r18, r18
				break;
     240:	33 27       	eor	r19, r19
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     242:	40 2f       	mov	r20, r16
     244:	0a 83       	std	Y+2, r16	; 0x02
     246:	61 15       	cp	r22, r1
				break;
     248:	71 05       	cpc	r23, r1
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     24a:	81 05       	cpc	r24, r1
     24c:	91 05       	cpc	r25, r1
     24e:	19 f4       	brne	.+6      	; 0x256 <__floatsisf+0x34>
     250:	82 e0       	ldi	r24, 0x02	; 2
     252:	89 83       	std	Y+1, r24	; 0x01
     254:	35 c0       	rjmp	.+106    	; 0x2c0 <__floatsisf+0x9e>
     256:	2e e1       	ldi	r18, 0x1E	; 30
				break;
     258:	30 e0       	ldi	r19, 0x00	; 0
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     25a:	3c 83       	std	Y+4, r19	; 0x04
     25c:	2b 83       	std	Y+3, r18	; 0x03
     25e:	44 23       	and	r20, r20
     260:	71 f0       	breq	.+28     	; 0x27e <__floatsisf+0x5c>
     262:	61 15       	cp	r22, r1
				break;
     264:	71 05       	cpc	r23, r1
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     266:	81 05       	cpc	r24, r1
     268:	20 e8       	ldi	r18, 0x80	; 128
     26a:	92 07       	cpc	r25, r18
     26c:	69 f1       	breq	.+90     	; 0x2c8 <__floatsisf+0xa6>
     26e:	00 27       	eor	r16, r16
     270:	11 27       	eor	r17, r17
     272:	98 01       	movw	r18, r16
				break;
     274:	06 1b       	sub	r16, r22
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     276:	17 0b       	sbc	r17, r23
     278:	28 0b       	sbc	r18, r24
     27a:	39 0b       	sbc	r19, r25
     27c:	02 c0       	rjmp	.+4      	; 0x282 <__floatsisf+0x60>
     27e:	8b 01       	movw	r16, r22
				break;
     280:	9c 01       	movw	r18, r24
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     282:	c9 01       	movw	r24, r18
     284:	b8 01       	movw	r22, r16
     286:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__clzsi2>
				break;
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     28a:	01 97       	sbiw	r24, 0x01	; 1
     28c:	18 16       	cp	r1, r24
     28e:	19 06       	cpc	r1, r25
     290:	2c f0       	brlt	.+10     	; 0x29c <__floatsisf+0x7a>
     292:	0d 83       	std	Y+5, r16	; 0x05
				break;
     294:	1e 83       	std	Y+6, r17	; 0x06
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     296:	2f 83       	std	Y+7, r18	; 0x07
     298:	38 87       	std	Y+8, r19	; 0x08
				break;
     29a:	12 c0       	rjmp	.+36     	; 0x2c0 <__floatsisf+0x9e>
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     29c:	08 2e       	mov	r0, r24
     29e:	04 c0       	rjmp	.+8      	; 0x2a8 <__floatsisf+0x86>
				break;
     2a0:	00 0f       	add	r16, r16
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2a2:	11 1f       	adc	r17, r17
     2a4:	22 1f       	adc	r18, r18
     2a6:	33 1f       	adc	r19, r19
     2a8:	0a 94       	dec	r0

				if (ParserData->UsingReportIDs)
     2aa:	d2 f7       	brpl	.-12     	; 0x2a0 <__floatsisf+0x7e>
     2ac:	0d 83       	std	Y+5, r16	; 0x05
     2ae:	1e 83       	std	Y+6, r17	; 0x06
     2b0:	2f 83       	std	Y+7, r18	; 0x07
     2b2:	38 87       	std	Y+8, r19	; 0x08
     2b4:	2e e1       	ldi	r18, 0x1E	; 30
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	28 1b       	sub	r18, r24
     2ba:	39 0b       	sbc	r19, r25
     2bc:	3c 83       	std	Y+4, r19	; 0x04
     2be:	2b 83       	std	Y+3, r18	; 0x03
     2c0:	ce 01       	movw	r24, r28
     2c2:	01 96       	adiw	r24, 0x01	; 1
     2c4:	09 d0       	rcall	.+18     	; 0x2d8 <__pack_f>
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     2c6:	04 c0       	rjmp	.+8      	; 0x2d0 <__floatsisf+0xae>

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     2c8:	60 e0       	ldi	r22, 0x00	; 0
     2ca:	70 e0       	ldi	r23, 0x00	; 0
     2cc:	80 e0       	ldi	r24, 0x00	; 0
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     2ce:	9f ec       	ldi	r25, 0xCF	; 207
     2d0:	28 96       	adiw	r28, 0x08	; 8
     2d2:	e4 e0       	ldi	r30, 0x04	; 4
     2d4:	0c 94 d1 0a 	jmp	0x15a2	; 0x15a2 <__epilogue_restores__+0x1c>

000002d8 <__pack_f>:
     2d8:	0f 93       	push	r16
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     2da:	1f 93       	push	r17
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	dc 01       	movw	r26, r24
     2e2:	14 96       	adiw	r26, 0x04	; 4
     2e4:	4d 91       	ld	r20, X+
     2e6:	5d 91       	ld	r21, X+
     2e8:	6d 91       	ld	r22, X+
     2ea:	7c 91       	ld	r23, X
     2ec:	17 97       	sbiw	r26, 0x07	; 7
     2ee:	11 96       	adiw	r26, 0x01	; 1
     2f0:	ec 91       	ld	r30, X

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2f2:	11 97       	sbiw	r26, 0x01	; 1
     2f4:	8c 91       	ld	r24, X
     2f6:	82 30       	cpi	r24, 0x02	; 2
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     2f8:	20 f4       	brcc	.+8      	; 0x302 <__pack_f+0x2a>
     2fa:	60 61       	ori	r22, 0x10	; 16
     2fc:	8f ef       	ldi	r24, 0xFF	; 255
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	a6 c0       	rjmp	.+332    	; 0x44e <__pack_f+0x176>
     302:	84 30       	cpi	r24, 0x04	; 4
     304:	09 f4       	brne	.+2      	; 0x308 <__pack_f+0x30>
     306:	9e c0       	rjmp	.+316    	; 0x444 <__pack_f+0x16c>
     308:	82 30       	cpi	r24, 0x02	; 2
     30a:	09 f4       	brne	.+2      	; 0x30e <__pack_f+0x36>
     30c:	95 c0       	rjmp	.+298    	; 0x438 <__pack_f+0x160>
     30e:	41 15       	cp	r20, r1
     310:	51 05       	cpc	r21, r1
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     312:	61 05       	cpc	r22, r1
     314:	71 05       	cpc	r23, r1
     316:	09 f4       	brne	.+2      	; 0x31a <__pack_f+0x42>
     318:	92 c0       	rjmp	.+292    	; 0x43e <__pack_f+0x166>
					}
				}

				ParserData->UsingReportIDs = true;
     31a:	12 96       	adiw	r26, 0x02	; 2
     31c:	2d 91       	ld	r18, X+
     31e:	3c 91       	ld	r19, X
     320:	13 97       	sbiw	r26, 0x03	; 3
     322:	22 38       	cpi	r18, 0x82	; 130

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     324:	8f ef       	ldi	r24, 0xFF	; 255
     326:	38 07       	cpc	r19, r24
     328:	0c f0       	brlt	.+2      	; 0x32c <__pack_f+0x54>
     32a:	58 c0       	rjmp	.+176    	; 0x3dc <__pack_f+0x104>
     32c:	c2 e8       	ldi	r28, 0x82	; 130
				break;
     32e:	df ef       	ldi	r29, 0xFF	; 255
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     330:	c2 1b       	sub	r28, r18
     332:	d3 0b       	sbc	r29, r19
     334:	ca 31       	cpi	r28, 0x1A	; 26
     336:	d1 05       	cpc	r29, r1
     338:	6c f5       	brge	.+90     	; 0x394 <__pack_f+0xbc>
     33a:	8a 01       	movw	r16, r20
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     33c:	9b 01       	movw	r18, r22
     33e:	0c 2e       	mov	r0, r28
     340:	04 c0       	rjmp	.+8      	; 0x34a <__pack_f+0x72>
     342:	36 95       	lsr	r19
     344:	27 95       	ror	r18
     346:	17 95       	ror	r17
     348:	07 95       	ror	r16
     34a:	0a 94       	dec	r0
     34c:	d2 f7       	brpl	.-12     	; 0x342 <__pack_f+0x6a>
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	a0 e0       	ldi	r26, 0x00	; 0
     354:	b0 e0       	ldi	r27, 0x00	; 0
				break;
     356:	0c 2e       	mov	r0, r28
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     358:	04 c0       	rjmp	.+8      	; 0x362 <__pack_f+0x8a>
     35a:	88 0f       	add	r24, r24
     35c:	99 1f       	adc	r25, r25
     35e:	aa 1f       	adc	r26, r26
     360:	bb 1f       	adc	r27, r27
     362:	0a 94       	dec	r0
     364:	d2 f7       	brpl	.-12     	; 0x35a <__pack_f+0x82>
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     366:	01 97       	sbiw	r24, 0x01	; 1
     368:	a1 09       	sbc	r26, r1
     36a:	b1 09       	sbc	r27, r1
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     36c:	84 23       	and	r24, r20
     36e:	95 23       	and	r25, r21
     370:	a6 23       	and	r26, r22
     372:	b7 23       	and	r27, r23
     374:	41 e0       	ldi	r20, 0x01	; 1
     376:	50 e0       	ldi	r21, 0x00	; 0
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     378:	60 e0       	ldi	r22, 0x00	; 0
     37a:	70 e0       	ldi	r23, 0x00	; 0
     37c:	89 2b       	or	r24, r25
     37e:	8a 2b       	or	r24, r26
     380:	8b 2b       	or	r24, r27
     382:	19 f4       	brne	.+6      	; 0x38a <__pack_f+0xb2>

					while (CurrCollectionPath->Parent != NULL)
     384:	40 e0       	ldi	r20, 0x00	; 0
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     386:	50 e0       	ldi	r21, 0x00	; 0
     388:	ba 01       	movw	r22, r20
     38a:	40 2b       	or	r20, r16
     38c:	51 2b       	or	r21, r17
     38e:	62 2b       	or	r22, r18
     390:	73 2b       	or	r23, r19
     392:	03 c0       	rjmp	.+6      	; 0x39a <__pack_f+0xc2>
     394:	40 e0       	ldi	r20, 0x00	; 0
     396:	50 e0       	ldi	r21, 0x00	; 0
     398:	ba 01       	movw	r22, r20
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     39a:	db 01       	movw	r26, r22
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     39c:	ca 01       	movw	r24, r20
     39e:	8f 77       	andi	r24, 0x7F	; 127
     3a0:	99 27       	eor	r25, r25
     3a2:	aa 27       	eor	r26, r26
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3a4:	bb 27       	eor	r27, r27
     3a6:	80 34       	cpi	r24, 0x40	; 64
     3a8:	91 05       	cpc	r25, r1
				}

				CurrCollectionPath->Type       = ReportItemData;
     3aa:	a1 05       	cpc	r26, r1
     3ac:	b1 05       	cpc	r27, r1
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     3ae:	39 f4       	brne	.+14     	; 0x3be <__pack_f+0xe6>
     3b0:	47 ff       	sbrs	r20, 7
     3b2:	09 c0       	rjmp	.+18     	; 0x3c6 <__pack_f+0xee>
     3b4:	40 5c       	subi	r20, 0xC0	; 192
     3b6:	5f 4f       	sbci	r21, 0xFF	; 255
     3b8:	6f 4f       	sbci	r22, 0xFF	; 255
     3ba:	7f 4f       	sbci	r23, 0xFF	; 255

				if (UsageListSize)
     3bc:	04 c0       	rjmp	.+8      	; 0x3c6 <__pack_f+0xee>
     3be:	41 5c       	subi	r20, 0xC1	; 193
     3c0:	5f 4f       	sbci	r21, 0xFF	; 255
     3c2:	6f 4f       	sbci	r22, 0xFF	; 255
     3c4:	7f 4f       	sbci	r23, 0xFF	; 255
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	41 15       	cp	r20, r1
     3cc:	51 05       	cpc	r21, r1
     3ce:	61 05       	cpc	r22, r1
     3d0:	20 e4       	ldi	r18, 0x40	; 64
     3d2:	72 07       	cpc	r23, r18
     3d4:	48 f5       	brcc	.+82     	; 0x428 <__pack_f+0x150>
     3d6:	80 e0       	ldi	r24, 0x00	; 0

					for (uint8_t i = 0; i < UsageListSize; i++)
     3d8:	90 e0       	ldi	r25, 0x00	; 0
					  UsageList[i] = UsageList[i + 1];
     3da:	26 c0       	rjmp	.+76     	; 0x428 <__pack_f+0x150>
     3dc:	20 38       	cpi	r18, 0x80	; 128
     3de:	31 05       	cpc	r19, r1
     3e0:	8c f5       	brge	.+98     	; 0x444 <__pack_f+0x16c>

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
     3e2:	db 01       	movw	r26, r22
     3e4:	ca 01       	movw	r24, r20
     3e6:	8f 77       	andi	r24, 0x7F	; 127
     3e8:	99 27       	eor	r25, r25
     3ea:	aa 27       	eor	r26, r26
     3ec:	bb 27       	eor	r27, r27
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
     3ee:	80 34       	cpi	r24, 0x40	; 64
     3f0:	91 05       	cpc	r25, r1
     3f2:	a1 05       	cpc	r26, r1
     3f4:	b1 05       	cpc	r27, r1
     3f6:	39 f4       	brne	.+14     	; 0x406 <__pack_f+0x12e>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     3f8:	47 ff       	sbrs	r20, 7
     3fa:	09 c0       	rjmp	.+18     	; 0x40e <__pack_f+0x136>
     3fc:	40 5c       	subi	r20, 0xC0	; 192
     3fe:	5f 4f       	sbci	r21, 0xFF	; 255
     400:	6f 4f       	sbci	r22, 0xFF	; 255
     402:	7f 4f       	sbci	r23, 0xFF	; 255
     404:	04 c0       	rjmp	.+8      	; 0x40e <__pack_f+0x136>
     406:	41 5c       	subi	r20, 0xC1	; 193
     408:	5f 4f       	sbci	r21, 0xFF	; 255
     40a:	6f 4f       	sbci	r22, 0xFF	; 255
     40c:	7f 4f       	sbci	r23, 0xFF	; 255
     40e:	77 fd       	sbrc	r23, 7
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     410:	04 c0       	rjmp	.+8      	; 0x41a <__pack_f+0x142>
     412:	c9 01       	movw	r24, r18
     414:	81 58       	subi	r24, 0x81	; 129
     416:	9f 4f       	sbci	r25, 0xFF	; 255
     418:	07 c0       	rjmp	.+14     	; 0x428 <__pack_f+0x150>
     41a:	76 95       	lsr	r23
     41c:	67 95       	ror	r22
     41e:	57 95       	ror	r21
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     420:	47 95       	ror	r20
     422:	c9 01       	movw	r24, r18
     424:	80 58       	subi	r24, 0x80	; 128
     426:	9f 4f       	sbci	r25, 0xFF	; 255
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     428:	97 e0       	ldi	r25, 0x07	; 7
     42a:	76 95       	lsr	r23
     42c:	67 95       	ror	r22
				break;
     42e:	57 95       	ror	r21
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     430:	47 95       	ror	r20
     432:	9a 95       	dec	r25
     434:	d1 f7       	brne	.-12     	; 0x42a <__pack_f+0x152>
     436:	0b c0       	rjmp	.+22     	; 0x44e <__pack_f+0x176>
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	05 c0       	rjmp	.+10     	; 0x448 <__pack_f+0x170>
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	90 e0       	ldi	r25, 0x00	; 0
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     442:	05 c0       	rjmp	.+10     	; 0x44e <__pack_f+0x176>
     444:	8f ef       	ldi	r24, 0xFF	; 255
					NewReportItem.CollectionPath = CurrCollectionPath;
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	40 e0       	ldi	r20, 0x00	; 0
     44a:	50 e0       	ldi	r21, 0x00	; 0
     44c:	ba 01       	movw	r22, r20
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     44e:	98 2f       	mov	r25, r24
     450:	96 95       	lsr	r25
     452:	e0 fb       	bst	r30, 0
     454:	97 f9       	bld	r25, 7

					if (UsageListSize)
     456:	36 2f       	mov	r19, r22
     458:	80 fb       	bst	r24, 0
     45a:	37 f9       	bld	r19, 7
     45c:	64 2f       	mov	r22, r20
     45e:	75 2f       	mov	r23, r21
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     460:	83 2f       	mov	r24, r19
     462:	df 91       	pop	r29
     464:	cf 91       	pop	r28
     466:	1f 91       	pop	r17
     468:	0f 91       	pop	r16
     46a:	08 95       	ret

0000046c <__unpack_f>:
     46c:	cf 92       	push	r12
     46e:	df 92       	push	r13
     470:	ef 92       	push	r14
     472:	dc 01       	movw	r26, r24
     474:	fb 01       	movw	r30, r22

						for (uint8_t i = 0; i < UsageListSize; i++)
     476:	cc 90       	ld	r12, X
						  UsageList[i] = UsageList[i + 1];
     478:	11 96       	adiw	r26, 0x01	; 1
     47a:	dc 90       	ld	r13, X
     47c:	11 97       	sbiw	r26, 0x01	; 1
     47e:	12 96       	adiw	r26, 0x02	; 2

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
     480:	8c 91       	ld	r24, X
     482:	12 97       	sbiw	r26, 0x02	; 2
     484:	3f e7       	ldi	r19, 0x7F	; 127
     486:	e3 2e       	mov	r14, r19
     488:	e8 22       	and	r14, r24
     48a:	6e 2d       	mov	r22, r14
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
     48c:	a6 01       	movw	r20, r12
     48e:	70 e0       	ldi	r23, 0x00	; 0
     490:	98 2f       	mov	r25, r24
     492:	99 1f       	adc	r25, r25
     494:	99 27       	eor	r25, r25
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     496:	99 1f       	adc	r25, r25
     498:	13 96       	adiw	r26, 0x03	; 3
     49a:	2c 91       	ld	r18, X
     49c:	82 2f       	mov	r24, r18
     49e:	88 0f       	add	r24, r24
     4a0:	89 2b       	or	r24, r25
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	27 fb       	bst	r18, 7
     4a6:	22 27       	eor	r18, r18
     4a8:	20 f9       	bld	r18, 0
     4aa:	21 83       	std	Z+1, r18	; 0x01
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     4ac:	00 97       	sbiw	r24, 0x00	; 0
     4ae:	29 f5       	brne	.+74     	; 0x4fa <__unpack_f+0x8e>
     4b0:	41 15       	cp	r20, r1
     4b2:	51 05       	cpc	r21, r1
     4b4:	61 05       	cpc	r22, r1
     4b6:	71 05       	cpc	r23, r1
     4b8:	11 f4       	brne	.+4      	; 0x4be <__unpack_f+0x52>
     4ba:	82 e0       	ldi	r24, 0x02	; 2
     4bc:	27 c0       	rjmp	.+78     	; 0x50c <__unpack_f+0xa0>
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     4be:	82 e8       	ldi	r24, 0x82	; 130
     4c0:	9f ef       	ldi	r25, 0xFF	; 255
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     4c2:	93 83       	std	Z+3, r25	; 0x03
     4c4:	82 83       	std	Z+2, r24	; 0x02
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     4c6:	27 e0       	ldi	r18, 0x07	; 7
     4c8:	44 0f       	add	r20, r20
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     4ca:	55 1f       	adc	r21, r21
     4cc:	66 1f       	adc	r22, r22
     4ce:	77 1f       	adc	r23, r23
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     4d0:	2a 95       	dec	r18
     4d2:	d1 f7       	brne	.-12     	; 0x4c8 <__unpack_f+0x5c>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     4d4:	83 e0       	ldi	r24, 0x03	; 3
     4d6:	80 83       	st	Z, r24
     4d8:	09 c0       	rjmp	.+18     	; 0x4ec <__unpack_f+0x80>
     4da:	44 0f       	add	r20, r20
     4dc:	55 1f       	adc	r21, r21
     4de:	66 1f       	adc	r22, r22
     4e0:	77 1f       	adc	r23, r23
     4e2:	82 81       	ldd	r24, Z+2	; 0x02
     4e4:	93 81       	ldd	r25, Z+3	; 0x03
     4e6:	01 97       	sbiw	r24, 0x01	; 1

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     4e8:	93 83       	std	Z+3, r25	; 0x03
     4ea:	82 83       	std	Z+2, r24	; 0x02
     4ec:	41 15       	cp	r20, r1
     4ee:	51 05       	cpc	r21, r1
     4f0:	61 05       	cpc	r22, r1
     4f2:	80 e4       	ldi	r24, 0x40	; 64
     4f4:	78 07       	cpc	r23, r24
     4f6:	88 f3       	brcs	.-30     	; 0x4da <__unpack_f+0x6e>

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     4f8:	20 c0       	rjmp	.+64     	; 0x53a <__unpack_f+0xce>
     4fa:	8f 3f       	cpi	r24, 0xFF	; 255
     4fc:	91 05       	cpc	r25, r1
     4fe:	79 f4       	brne	.+30     	; 0x51e <__unpack_f+0xb2>
     500:	41 15       	cp	r20, r1
     502:	51 05       	cpc	r21, r1
     504:	61 05       	cpc	r22, r1
     506:	71 05       	cpc	r23, r1
     508:	19 f4       	brne	.+6      	; 0x510 <__unpack_f+0xa4>
     50a:	84 e0       	ldi	r24, 0x04	; 4
     50c:	80 83       	st	Z, r24
     50e:	19 c0       	rjmp	.+50     	; 0x542 <__unpack_f+0xd6>
     510:	e4 fe       	sbrs	r14, 4
     512:	03 c0       	rjmp	.+6      	; 0x51a <__unpack_f+0xae>
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	80 83       	st	Z, r24
     518:	10 c0       	rjmp	.+32     	; 0x53a <__unpack_f+0xce>
     51a:	10 82       	st	Z, r1
     51c:	0e c0       	rjmp	.+28     	; 0x53a <__unpack_f+0xce>
     51e:	8f 57       	subi	r24, 0x7F	; 127
     520:	91 09       	sbc	r25, r1
     522:	93 83       	std	Z+3, r25	; 0x03
     524:	82 83       	std	Z+2, r24	; 0x02
     526:	83 e0       	ldi	r24, 0x03	; 3
     528:	80 83       	st	Z, r24

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     52a:	87 e0       	ldi	r24, 0x07	; 7
     52c:	44 0f       	add	r20, r20
     52e:	55 1f       	adc	r21, r21
     530:	66 1f       	adc	r22, r22
					  return HID_PARSE_InsufficientReportItems;
     532:	77 1f       	adc	r23, r23
     534:	8a 95       	dec	r24

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     536:	d1 f7       	brne	.-12     	; 0x52c <__unpack_f+0xc0>
     538:	70 64       	ori	r23, 0x40	; 64
     53a:	44 83       	std	Z+4, r20	; 0x04
     53c:	55 83       	std	Z+5, r21	; 0x05
     53e:	66 83       	std	Z+6, r22	; 0x06
     540:	77 83       	std	Z+7, r23	; 0x07
     542:	ef 90       	pop	r14
     544:	df 90       	pop	r13
     546:	cf 90       	pop	r12
     548:	08 95       	ret

0000054a <__fpcmp_parts_f>:
     54a:	cf 93       	push	r28
     54c:	fc 01       	movw	r30, r24
     54e:	db 01       	movw	r26, r22
     550:	90 81       	ld	r25, Z
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     552:	92 30       	cpi	r25, 0x02	; 2
     554:	08 f4       	brcc	.+2      	; 0x558 <__fpcmp_parts_f+0xe>
     556:	52 c0       	rjmp	.+164    	; 0x5fc <__fpcmp_parts_f+0xb2>
     558:	8c 91       	ld	r24, X
     55a:	82 30       	cpi	r24, 0x02	; 2
     55c:	08 f4       	brcc	.+2      	; 0x560 <__fpcmp_parts_f+0x16>
     55e:	4e c0       	rjmp	.+156    	; 0x5fc <__fpcmp_parts_f+0xb2>
     560:	94 30       	cpi	r25, 0x04	; 4
     562:	71 f4       	brne	.+28     	; 0x580 <__fpcmp_parts_f+0x36>
     564:	84 30       	cpi	r24, 0x04	; 4
     566:	39 f4       	brne	.+14     	; 0x576 <__fpcmp_parts_f+0x2c>
     568:	11 96       	adiw	r26, 0x01	; 1
     56a:	2c 91       	ld	r18, X
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	81 81       	ldd	r24, Z+1	; 0x01
     570:	28 1b       	sub	r18, r24
     572:	31 09       	sbc	r19, r1
     574:	48 c0       	rjmp	.+144    	; 0x606 <__fpcmp_parts_f+0xbc>
     576:	81 81       	ldd	r24, Z+1	; 0x01
     578:	88 23       	and	r24, r24
     57a:	09 f4       	brne	.+2      	; 0x57e <__fpcmp_parts_f+0x34>
     57c:	3f c0       	rjmp	.+126    	; 0x5fc <__fpcmp_parts_f+0xb2>
     57e:	3b c0       	rjmp	.+118    	; 0x5f6 <__fpcmp_parts_f+0xac>
     580:	84 30       	cpi	r24, 0x04	; 4
     582:	29 f4       	brne	.+10     	; 0x58e <__fpcmp_parts_f+0x44>
     584:	11 96       	adiw	r26, 0x01	; 1
     586:	8c 91       	ld	r24, X
     588:	81 11       	cpse	r24, r1
     58a:	38 c0       	rjmp	.+112    	; 0x5fc <__fpcmp_parts_f+0xb2>
     58c:	34 c0       	rjmp	.+104    	; 0x5f6 <__fpcmp_parts_f+0xac>
     58e:	92 30       	cpi	r25, 0x02	; 2
     590:	19 f4       	brne	.+6      	; 0x598 <__fpcmp_parts_f+0x4e>
     592:	82 30       	cpi	r24, 0x02	; 2
     594:	b9 f7       	brne	.-18     	; 0x584 <__fpcmp_parts_f+0x3a>
     596:	35 c0       	rjmp	.+106    	; 0x602 <__fpcmp_parts_f+0xb8>
     598:	82 30       	cpi	r24, 0x02	; 2
     59a:	69 f3       	breq	.-38     	; 0x576 <__fpcmp_parts_f+0x2c>
     59c:	c1 81       	ldd	r28, Z+1	; 0x01
     59e:	11 96       	adiw	r26, 0x01	; 1
     5a0:	8c 91       	ld	r24, X
     5a2:	11 97       	sbiw	r26, 0x01	; 1
     5a4:	c8 13       	cpse	r28, r24
     5a6:	1d c0       	rjmp	.+58     	; 0x5e2 <__fpcmp_parts_f+0x98>
     5a8:	22 81       	ldd	r18, Z+2	; 0x02
     5aa:	33 81       	ldd	r19, Z+3	; 0x03
     5ac:	12 96       	adiw	r26, 0x02	; 2
     5ae:	8d 91       	ld	r24, X+
     5b0:	9c 91       	ld	r25, X
     5b2:	13 97       	sbiw	r26, 0x03	; 3
     5b4:	82 17       	cp	r24, r18
     5b6:	93 07       	cpc	r25, r19
     5b8:	0c f4       	brge	.+2      	; 0x5bc <__fpcmp_parts_f+0x72>
     5ba:	13 c0       	rjmp	.+38     	; 0x5e2 <__fpcmp_parts_f+0x98>
     5bc:	28 17       	cp	r18, r24
     5be:	39 07       	cpc	r19, r25
     5c0:	0c f4       	brge	.+2      	; 0x5c4 <__fpcmp_parts_f+0x7a>
     5c2:	17 c0       	rjmp	.+46     	; 0x5f2 <__fpcmp_parts_f+0xa8>
     5c4:	44 81       	ldd	r20, Z+4	; 0x04
     5c6:	55 81       	ldd	r21, Z+5	; 0x05
     5c8:	66 81       	ldd	r22, Z+6	; 0x06
     5ca:	77 81       	ldd	r23, Z+7	; 0x07
     5cc:	14 96       	adiw	r26, 0x04	; 4
     5ce:	8d 91       	ld	r24, X+
     5d0:	9d 91       	ld	r25, X+
     5d2:	0d 90       	ld	r0, X+
     5d4:	bc 91       	ld	r27, X
     5d6:	a0 2d       	mov	r26, r0
     5d8:	84 17       	cp	r24, r20
     5da:	95 07       	cpc	r25, r21
     5dc:	a6 07       	cpc	r26, r22
     5de:	b7 07       	cpc	r27, r23
     5e0:	18 f4       	brcc	.+6      	; 0x5e8 <__fpcmp_parts_f+0x9e>
     5e2:	c1 11       	cpse	r28, r1
     5e4:	08 c0       	rjmp	.+16     	; 0x5f6 <__fpcmp_parts_f+0xac>
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__fpcmp_parts_f+0xb2>
     5e8:	48 17       	cp	r20, r24
     5ea:	59 07       	cpc	r21, r25
     5ec:	6a 07       	cpc	r22, r26
     5ee:	7b 07       	cpc	r23, r27
					  ParserData->TotalReportItems++;
     5f0:	40 f4       	brcc	.+16     	; 0x602 <__fpcmp_parts_f+0xb8>
     5f2:	c1 11       	cpse	r28, r1
     5f4:	03 c0       	rjmp	.+6      	; 0x5fc <__fpcmp_parts_f+0xb2>
     5f6:	2f ef       	ldi	r18, 0xFF	; 255
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     5f8:	3f ef       	ldi	r19, 0xFF	; 255
     5fa:	05 c0       	rjmp	.+10     	; 0x606 <__fpcmp_parts_f+0xbc>
     5fc:	21 e0       	ldi	r18, 0x01	; 1
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	02 c0       	rjmp	.+4      	; 0x606 <__fpcmp_parts_f+0xbc>
     602:	20 e0       	ldi	r18, 0x00	; 0
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	c9 01       	movw	r24, r18
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     608:	cf 91       	pop	r28
     60a:	08 95       	ret

0000060c <SetupHardware>:
     60c:	84 b7       	in	r24, 0x34	; 52
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     60e:	87 7f       	andi	r24, 0xF7	; 247
     610:	84 bf       	out	0x34, r24	; 52
     612:	88 e1       	ldi	r24, 0x18	; 24
     614:	0f b6       	in	r0, 0x3f	; 63
     616:	f8 94       	cli
     618:	80 93 60 00 	sts	0x0060, r24
     61c:	10 92 60 00 	sts	0x0060, r1
     620:	0f be       	out	0x3f, r0	; 63
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	80 e8       	ldi	r24, 0x80	; 128
     626:	0f b6       	in	r0, 0x3f	; 63
     628:	f8 94       	cli
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     62a:	80 93 61 00 	sts	0x0061, r24
     62e:	90 93 61 00 	sts	0x0061, r25
     632:	0f be       	out	0x3f, r0	; 63
     634:	84 b1       	in	r24, 0x04	; 4
     636:	84 b9       	out	0x04, r24	; 4
     638:	8a b1       	in	r24, 0x0a	; 10
     63a:	8a b9       	out	0x0a, r24	; 10
     63c:	8d b1       	in	r24, 0x0d	; 13
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     63e:	8d b9       	out	0x0d, r24	; 13
     640:	85 b1       	in	r24, 0x05	; 5
			
			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     642:	85 b9       	out	0x05, r24	; 5
     644:	8b b1       	in	r24, 0x0b	; 11
     646:	8b b9       	out	0x0b, r24	; 11
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     648:	8e b1       	in	r24, 0x0e	; 14
     64a:	8e b9       	out	0x0e, r24	; 14
     64c:	62 d7       	rcall	.+3780   	; 0x1512 <LCDstart>
     64e:	85 ea       	ldi	r24, 0xA5	; 165
     650:	80 93 7a 00 	sts	0x007A, r24
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     654:	08 95       	ret

00000656 <main>:
     656:	da df       	rcall	.-76     	; 0x60c <SetupHardware>
     658:	78 94       	sei
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     65a:	8c d4       	rcall	.+2328   	; 0xf74 <ButtonManage>
     65c:	fe d6       	rcall	.+3580   	; 0x145a <LCDupdate>
     65e:	17 d4       	rcall	.+2094   	; 0xe8e <USB_USBTask>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     660:	fc cf       	rjmp	.-8      	; 0x65a <main+0x4>

00000662 <EVENT_USB_Device_Connect>:
     662:	08 95       	ret

00000664 <EVENT_USB_Device_Disconnect>:
     664:	08 95       	ret

00000666 <EVENT_USB_Device_ConfigurationChanged>:
     666:	42 e0       	ldi	r20, 0x02	; 2
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     668:	61 ec       	ldi	r22, 0xC1	; 193
     66a:	82 e0       	ldi	r24, 0x02	; 2
     66c:	88 d0       	rcall	.+272    	; 0x77e <Endpoint_ConfigureEndpoint_Prv>
     66e:	42 e1       	ldi	r20, 0x12	; 18
	  return HID_PARSE_NoUnfilteredReportItems;
     670:	61 e8       	ldi	r22, 0x81	; 129
     672:	83 e0       	ldi	r24, 0x03	; 3

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     674:	84 d0       	rcall	.+264    	; 0x77e <Endpoint_ConfigureEndpoint_Prv>
     676:	42 e1       	ldi	r20, 0x12	; 18

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     678:	60 e8       	ldi	r22, 0x80	; 128
     67a:	84 e0       	ldi	r24, 0x04	; 4

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     67c:	80 d0       	rcall	.+256    	; 0x77e <Endpoint_ConfigureEndpoint_Prv>
     67e:	10 92 00 01 	sts	0x0100, r1
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     682:	10 92 01 01 	sts	0x0101, r1
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     686:	10 92 02 01 	sts	0x0102, r1
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     68a:	10 92 03 01 	sts	0x0103, r1
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     68e:	08 95       	ret

00000690 <EVENT_USB_Device_ControlRequest>:
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     690:	80 91 82 01 	lds	r24, 0x0182
     694:	81 32       	cpi	r24, 0x21	; 33
     696:	29 f0       	breq	.+10     	; 0x6a2 <EVENT_USB_Device_ControlRequest+0x12>

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     698:	82 32       	cpi	r24, 0x22	; 34
     69a:	49 f1       	breq	.+82     	; 0x6ee <EVENT_USB_Device_ControlRequest+0x5e>
     69c:	80 32       	cpi	r24, 0x20	; 32
     69e:	89 f5       	brne	.+98     	; 0x702 <EVENT_USB_Device_ControlRequest+0x72>
     6a0:	12 c0       	rjmp	.+36     	; 0x6c6 <EVENT_USB_Device_ControlRequest+0x36>
     6a2:	80 91 81 01 	lds	r24, 0x0181
     6a6:	81 3a       	cpi	r24, 0xA1	; 161
     6a8:	61 f5       	brne	.+88     	; 0x702 <EVENT_USB_Device_ControlRequest+0x72>
     6aa:	80 91 e8 00 	lds	r24, 0x00E8
     6ae:	87 7f       	andi	r24, 0xF7	; 247
     6b0:	80 93 e8 00 	sts	0x00E8, r24
     6b4:	67 e0       	ldi	r22, 0x07	; 7
     6b6:	70 e0       	ldi	r23, 0x00	; 0
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	91 e0       	ldi	r25, 0x01	; 1
     6bc:	79 d1       	rcall	.+754    	; 0x9b0 <Endpoint_Write_Control_Stream_LE>
     6be:	80 91 e8 00 	lds	r24, 0x00E8
     6c2:	8b 77       	andi	r24, 0x7B	; 123
     6c4:	11 c0       	rjmp	.+34     	; 0x6e8 <EVENT_USB_Device_ControlRequest+0x58>
     6c6:	80 91 81 01 	lds	r24, 0x0181
     6ca:	81 32       	cpi	r24, 0x21	; 33
                Endpoint_ClearOUT();
            }

            break;
        case CDC_REQ_SetLineEncoding:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     6cc:	d1 f4       	brne	.+52     	; 0x702 <EVENT_USB_Device_ControlRequest+0x72>
     6ce:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     6d2:	87 7f       	andi	r24, 0xF7	; 247
     6d4:	80 93 e8 00 	sts	0x00E8, r24
     6d8:	67 e0       	ldi	r22, 0x07	; 7
            {
                Endpoint_ClearSETUP();

                /* Read the line coding data in from the host into the global struct */
                Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
     6da:	70 e0       	ldi	r23, 0x00	; 0
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	91 e0       	ldi	r25, 0x01	; 1
     6e0:	c6 d1       	rcall	.+908    	; 0xa6e <Endpoint_Read_Control_Stream_LE>
     6e2:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     6e6:	8e 77       	andi	r24, 0x7E	; 126
     6e8:	80 93 e8 00 	sts	0x00E8, r24
     6ec:	08 95       	ret
     6ee:	80 91 81 01 	lds	r24, 0x0181
                Endpoint_ClearIN();
            }

            break;
        case CDC_REQ_SetControlLineState:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     6f2:	81 32       	cpi	r24, 0x21	; 33
     6f4:	31 f4       	brne	.+12     	; 0x702 <EVENT_USB_Device_ControlRequest+0x72>
     6f6:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     6fa:	87 7f       	andi	r24, 0xF7	; 247
     6fc:	80 93 e8 00 	sts	0x00E8, r24
     700:	75 c0       	rjmp	.+234    	; 0x7ec <Endpoint_ClearStatusStage>
     702:	08 95       	ret

00000704 <CALLBACK_USB_GetDescriptor>:
			break;
	}

	*DescriptorAddress = Address;
	return Size;
}
     704:	29 2f       	mov	r18, r25
     706:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     708:	22 30       	cpi	r18, 0x02	; 2
     70a:	31 05       	cpc	r19, r1
     70c:	39 f0       	breq	.+14     	; 0x71c <CALLBACK_USB_GetDescriptor+0x18>
     70e:	23 30       	cpi	r18, 0x03	; 3
     710:	31 05       	cpc	r19, r1
     712:	49 f0       	breq	.+18     	; 0x726 <CALLBACK_USB_GetDescriptor+0x22>
     714:	21 30       	cpi	r18, 0x01	; 1
     716:	31 05       	cpc	r19, r1
     718:	21 f1       	breq	.+72     	; 0x762 <CALLBACK_USB_GetDescriptor+0x5e>
     71a:	28 c0       	rjmp	.+80     	; 0x76c <CALLBACK_USB_GetDescriptor+0x68>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     71c:	ee e3       	ldi	r30, 0x3E	; 62
     71e:	f0 e0       	ldi	r31, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     720:	88 ee       	ldi	r24, 0xE8	; 232
     722:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     724:	27 c0       	rjmp	.+78     	; 0x774 <CALLBACK_USB_GetDescriptor+0x70>
			break;
	}

	*DescriptorAddress = Address;
	return Size;
}
     726:	99 27       	eor	r25, r25
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     728:	81 30       	cpi	r24, 0x01	; 1
     72a:	91 05       	cpc	r25, r1
     72c:	61 f0       	breq	.+24     	; 0x746 <CALLBACK_USB_GetDescriptor+0x42>
     72e:	82 30       	cpi	r24, 0x02	; 2
     730:	91 05       	cpc	r25, r1
     732:	81 f0       	breq	.+32     	; 0x754 <CALLBACK_USB_GetDescriptor+0x50>
     734:	89 2b       	or	r24, r25
     736:	d1 f4       	brne	.+52     	; 0x76c <CALLBACK_USB_GetDescriptor+0x68>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     738:	e4 ee       	ldi	r30, 0xE4	; 228
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	e4 91       	lpm	r30, Z
     73e:	f0 e0       	ldi	r31, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = &LanguageString;
     740:	84 ee       	ldi	r24, 0xE4	; 228
     742:	90 e0       	ldi	r25, 0x00	; 0
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     744:	17 c0       	rjmp	.+46     	; 0x774 <CALLBACK_USB_GetDescriptor+0x70>
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     746:	ea ec       	ldi	r30, 0xCA	; 202
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	e4 91       	lpm	r30, Z
     74c:	f0 e0       	ldi	r31, 0x00	; 0
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case 0x01:
					Address = &ManufacturerString;
     74e:	8a ec       	ldi	r24, 0xCA	; 202
     750:	90 e0       	ldi	r25, 0x00	; 0
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     752:	10 c0       	rjmp	.+32     	; 0x774 <CALLBACK_USB_GetDescriptor+0x70>
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     754:	ec ea       	ldi	r30, 0xAC	; 172
     756:	f0 e0       	ldi	r31, 0x00	; 0
     758:	e4 91       	lpm	r30, Z
     75a:	f0 e0       	ldi	r31, 0x00	; 0
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
     75c:	8c ea       	ldi	r24, 0xAC	; 172
     75e:	90 e0       	ldi	r25, 0x00	; 0
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     760:	09 c0       	rjmp	.+18     	; 0x774 <CALLBACK_USB_GetDescriptor+0x70>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     762:	e2 e1       	ldi	r30, 0x12	; 18
     764:	f0 e0       	ldi	r31, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     766:	86 e2       	ldi	r24, 0x26	; 38
     768:	91 e0       	ldi	r25, 0x01	; 1
     76a:	04 c0       	rjmp	.+8      	; 0x774 <CALLBACK_USB_GetDescriptor+0x70>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     76c:	e0 e0       	ldi	r30, 0x00	; 0
     76e:	f0 e0       	ldi	r31, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	90 e0       	ldi	r25, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     774:	da 01       	movw	r26, r20
     776:	8d 93       	st	X+, r24
     778:	9c 93       	st	X, r25
	return Size;
}
     77a:	cf 01       	movw	r24, r30
     77c:	08 95       	ret

0000077e <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     77e:	98 2f       	mov	r25, r24
     780:	2c c0       	rjmp	.+88     	; 0x7da <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     782:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     786:	98 17       	cp	r25, r24
     788:	39 f0       	breq	.+14     	; 0x798 <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     78a:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     78e:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     792:	50 91 f0 00 	lds	r21, 0x00F0
     796:	03 c0       	rjmp	.+6      	; 0x79e <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     798:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     79a:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     79c:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     79e:	21 fd       	sbrc	r18, 1
     7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <Endpoint_ConfigureEndpoint_Prv+0x28>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     7a2:	9f 5f       	subi	r25, 0xFF	; 255
     7a4:	1a c0       	rjmp	.+52     	; 0x7da <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     7a6:	30 91 eb 00 	lds	r19, 0x00EB
     7aa:	3e 7f       	andi	r19, 0xFE	; 254
     7ac:	30 93 eb 00 	sts	0x00EB, r19

		if (!(UECFG1XTemp & (1 << ALLOC)))
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     7b0:	30 91 ed 00 	lds	r19, 0x00ED
     7b4:	3d 7f       	andi	r19, 0xFD	; 253
     7b6:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     7ba:	30 91 eb 00 	lds	r19, 0x00EB
     7be:	31 60       	ori	r19, 0x01	; 1
     7c0:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     7c4:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     7c8:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     7cc:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     7d0:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     7d4:	27 fd       	sbrc	r18, 7
     7d6:	e5 cf       	rjmp	.-54     	; 0x7a2 <Endpoint_ConfigureEndpoint_Prv+0x24>
     7d8:	07 c0       	rjmp	.+14     	; 0x7e8 <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     7da:	97 30       	cpi	r25, 0x07	; 7
     7dc:	90 f2       	brcs	.-92     	; 0x782 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     7de:	8f 70       	andi	r24, 0x0F	; 15
     7e0:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     7e8:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     7ea:	08 95       	ret

000007ec <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     7ec:	80 91 81 01 	lds	r24, 0x0181
     7f0:	87 fd       	sbrc	r24, 7
     7f2:	05 c0       	rjmp	.+10     	; 0x7fe <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7f4:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     7f8:	80 ff       	sbrs	r24, 0
     7fa:	0e c0       	rjmp	.+28     	; 0x818 <Endpoint_ClearStatusStage+0x2c>
     7fc:	12 c0       	rjmp	.+36     	; 0x822 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7fe:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     802:	82 fd       	sbrc	r24, 2
     804:	05 c0       	rjmp	.+10     	; 0x810 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     806:	80 91 80 01 	lds	r24, 0x0180
     80a:	81 11       	cpse	r24, r1
     80c:	f8 cf       	rjmp	.-16     	; 0x7fe <Endpoint_ClearStatusStage+0x12>
     80e:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     810:	80 91 e8 00 	lds	r24, 0x00E8
     814:	8b 77       	andi	r24, 0x7B	; 123
     816:	08 c0       	rjmp	.+16     	; 0x828 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     818:	80 91 80 01 	lds	r24, 0x0180
     81c:	81 11       	cpse	r24, r1
     81e:	ea cf       	rjmp	.-44     	; 0x7f4 <Endpoint_ClearStatusStage+0x8>
     820:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     822:	80 91 e8 00 	lds	r24, 0x00E8
     826:	8e 77       	andi	r24, 0x7E	; 126
     828:	80 93 e8 00 	sts	0x00E8, r24
     82c:	08 95       	ret

0000082e <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     82e:	1f 92       	push	r1
     830:	0f 92       	push	r0
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	0f 92       	push	r0
     836:	11 24       	eor	r1, r1
     838:	2f 93       	push	r18
     83a:	3f 93       	push	r19
     83c:	4f 93       	push	r20
     83e:	5f 93       	push	r21
     840:	6f 93       	push	r22
     842:	7f 93       	push	r23
     844:	8f 93       	push	r24
     846:	9f 93       	push	r25
     848:	af 93       	push	r26
     84a:	bf 93       	push	r27
     84c:	ef 93       	push	r30
     84e:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     850:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     854:	82 ff       	sbrs	r24, 2
     856:	0a c0       	rjmp	.+20     	; 0x86c <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     858:	80 91 e2 00 	lds	r24, 0x00E2
     85c:	82 ff       	sbrs	r24, 2
     85e:	06 c0       	rjmp	.+12     	; 0x86c <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     860:	80 91 e1 00 	lds	r24, 0x00E1
     864:	8b 7f       	andi	r24, 0xFB	; 251
     866:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     86a:	10 d3       	rcall	.+1568   	; 0xe8c <USB_Event_Stub>
     86c:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     870:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     872:	1b c0       	rjmp	.+54     	; 0x8aa <__vector_10+0x7c>
     874:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     878:	80 ff       	sbrs	r24, 0
     87a:	17 c0       	rjmp	.+46     	; 0x8aa <__vector_10+0x7c>
     87c:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     880:	8e 7f       	andi	r24, 0xFE	; 254
     882:	80 93 da 00 	sts	0x00DA, r24
     886:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     88a:	19 bc       	out	0x29, r1	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     88c:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     88e:	0a c0       	rjmp	.+20     	; 0x8a4 <__vector_10+0x76>
     890:	82 e0       	ldi	r24, 0x02	; 2
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     892:	89 bd       	out	0x29, r24	; 41
     894:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     896:	00 fe       	sbrs	r0, 0
     898:	fd cf       	rjmp	.-6      	; 0x894 <__vector_10+0x66>
     89a:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     89c:	80 93 80 01 	sts	0x0180, r24
     8a0:	e0 de       	rcall	.-576    	; 0x662 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
     8a2:	03 c0       	rjmp	.+6      	; 0x8aa <__vector_10+0x7c>
     8a4:	10 92 80 01 	sts	0x0180, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     8a8:	dd de       	rcall	.-582    	; 0x664 <EVENT_USB_Device_Disconnect>
     8aa:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
     8ae:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     8b0:	18 c0       	rjmp	.+48     	; 0x8e2 <__vector_10+0xb4>
     8b2:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     8b6:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     8b8:	14 c0       	rjmp	.+40     	; 0x8e2 <__vector_10+0xb4>
     8ba:	80 91 e2 00 	lds	r24, 0x00E2
     8be:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     8c0:	80 93 e2 00 	sts	0x00E2, r24
     8c4:	80 91 e2 00 	lds	r24, 0x00E2
     8c8:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     8ca:	80 93 e2 00 	sts	0x00E2, r24
     8ce:	80 91 d8 00 	lds	r24, 0x00D8
     8d2:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     8d4:	80 93 d8 00 	sts	0x00D8, r24
     8d8:	19 bc       	out	0x29, r1	; 41
     8da:	85 e0       	ldi	r24, 0x05	; 5
     8dc:	80 93 80 01 	sts	0x0180, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     8e0:	d5 d2       	rcall	.+1450   	; 0xe8c <USB_Event_Stub>
     8e2:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
     8e6:	84 ff       	sbrs	r24, 4
     8e8:	2c c0       	rjmp	.+88     	; 0x942 <__vector_10+0x114>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     8ea:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     8ee:	84 ff       	sbrs	r24, 4
     8f0:	28 c0       	rjmp	.+80     	; 0x942 <__vector_10+0x114>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     8f2:	19 bc       	out	0x29, r1	; 41
     8f4:	82 e0       	ldi	r24, 0x02	; 2
     8f6:	89 bd       	out	0x29, r24	; 41
     8f8:	09 b4       	in	r0, 0x29	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     8fa:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     8fc:	fd cf       	rjmp	.-6      	; 0x8f8 <__vector_10+0xca>
     8fe:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     902:	8f 7d       	andi	r24, 0xDF	; 223
     904:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     908:	80 91 e1 00 	lds	r24, 0x00E1
     90c:	8f 7e       	andi	r24, 0xEF	; 239
     90e:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     912:	80 91 e2 00 	lds	r24, 0x00E2
     916:	8f 7e       	andi	r24, 0xEF	; 239
     918:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     91c:	80 91 e2 00 	lds	r24, 0x00E2
     920:	81 60       	ori	r24, 0x01	; 1
     922:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     926:	80 91 7c 01 	lds	r24, 0x017C
     92a:	81 11       	cpse	r24, r1
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__vector_10+0x108>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     92e:	80 91 e3 00 	lds	r24, 0x00E3
     932:	87 ff       	sbrs	r24, 7
     934:	02 c0       	rjmp	.+4      	; 0x93a <__vector_10+0x10c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     936:	84 e0       	ldi	r24, 0x04	; 4
     938:	01 c0       	rjmp	.+2      	; 0x93c <__vector_10+0x10e>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	80 93 80 01 	sts	0x0180, r24
     940:	a5 d2       	rcall	.+1354   	; 0xe8c <USB_Event_Stub>
     942:	80 91 e1 00 	lds	r24, 0x00E1
     946:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     948:	22 c0       	rjmp	.+68     	; 0x98e <__vector_10+0x160>
     94a:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     94e:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     950:	1e c0       	rjmp	.+60     	; 0x98e <__vector_10+0x160>
     952:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     956:	87 7f       	andi	r24, 0xF7	; 247
     958:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	80 93 80 01 	sts	0x0180, r24
     962:	10 92 7c 01 	sts	0x017C, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     966:	80 91 e1 00 	lds	r24, 0x00E1
     96a:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
     96c:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     970:	80 91 e2 00 	lds	r24, 0x00E2
     974:	8e 7f       	andi	r24, 0xFE	; 254
     976:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     97a:	80 91 e2 00 	lds	r24, 0x00E2
     97e:	80 61       	ori	r24, 0x10	; 16
     980:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     984:	42 e0       	ldi	r20, 0x02	; 2
     986:	60 e0       	ldi	r22, 0x00	; 0
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	f9 de       	rcall	.-526    	; 0x77e <Endpoint_ConfigureEndpoint_Prv>
     98c:	7f d2       	rcall	.+1278   	; 0xe8c <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
     98e:	ff 91       	pop	r31
     990:	ef 91       	pop	r30
     992:	bf 91       	pop	r27
     994:	af 91       	pop	r26
     996:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     998:	8f 91       	pop	r24
     99a:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     99c:	6f 91       	pop	r22
     99e:	5f 91       	pop	r21
     9a0:	4f 91       	pop	r20
     9a2:	3f 91       	pop	r19
     9a4:	2f 91       	pop	r18
     9a6:	0f 90       	pop	r0
     9a8:	0f be       	out	0x3f, r0	; 63
     9aa:	0f 90       	pop	r0
     9ac:	1f 90       	pop	r1
     9ae:	18 95       	reti

000009b0 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     9b0:	40 91 87 01 	lds	r20, 0x0187
     9b4:	50 91 88 01 	lds	r21, 0x0188
     9b8:	46 17       	cp	r20, r22
     9ba:	57 07       	cpc	r21, r23
     9bc:	48 f0       	brcs	.+18     	; 0x9d0 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     9be:	61 15       	cp	r22, r1
     9c0:	71 05       	cpc	r23, r1
     9c2:	39 f4       	brne	.+14     	; 0x9d2 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9c4:	40 91 e8 00 	lds	r20, 0x00E8
     9c8:	4e 77       	andi	r20, 0x7E	; 126
     9ca:	40 93 e8 00 	sts	0x00E8, r20
     9ce:	01 c0       	rjmp	.+2      	; 0x9d2 <Endpoint_Write_Control_Stream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     9d0:	ba 01       	movw	r22, r20
     9d2:	fc 01       	movw	r30, r24
     9d4:	40 e0       	ldi	r20, 0x00	; 0
     9d6:	33 c0       	rjmp	.+102    	; 0xa3e <Endpoint_Write_Control_Stream_LE+0x8e>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     9d8:	80 91 80 01 	lds	r24, 0x0180

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     9dc:	88 23       	and	r24, r24
     9de:	09 f4       	brne	.+2      	; 0x9e2 <Endpoint_Write_Control_Stream_LE+0x32>
     9e0:	42 c0       	rjmp	.+132    	; 0xa66 <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     9e2:	85 30       	cpi	r24, 0x05	; 5
     9e4:	09 f4       	brne	.+2      	; 0x9e8 <Endpoint_Write_Control_Stream_LE+0x38>
     9e6:	41 c0       	rjmp	.+130    	; 0xa6a <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     9e8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     9ec:	83 fd       	sbrc	r24, 3
     9ee:	39 c0       	rjmp	.+114    	; 0xa62 <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9f0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     9f4:	82 fd       	sbrc	r24, 2
     9f6:	2f c0       	rjmp	.+94     	; 0xa56 <Endpoint_Write_Control_Stream_LE+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     9f8:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     9fc:	80 ff       	sbrs	r24, 0
     9fe:	1f c0       	rjmp	.+62     	; 0xa3e <Endpoint_Write_Control_Stream_LE+0x8e>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     a00:	90 91 f3 00 	lds	r25, 0x00F3
     a04:	80 91 f2 00 	lds	r24, 0x00F2
     a08:	39 2f       	mov	r19, r25
     a0a:	20 e0       	ldi	r18, 0x00	; 0
     a0c:	a9 01       	movw	r20, r18
     a0e:	48 2b       	or	r20, r24
     a10:	ca 01       	movw	r24, r20
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     a12:	06 c0       	rjmp	.+12     	; 0xa20 <Endpoint_Write_Control_Stream_LE+0x70>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     a14:	41 91       	ld	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     a16:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     a1a:	61 50       	subi	r22, 0x01	; 1
     a1c:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     a1e:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     a20:	61 15       	cp	r22, r1
     a22:	71 05       	cpc	r23, r1
     a24:	19 f0       	breq	.+6      	; 0xa2c <Endpoint_Write_Control_Stream_LE+0x7c>
     a26:	88 30       	cpi	r24, 0x08	; 8
     a28:	91 05       	cpc	r25, r1
     a2a:	a0 f3       	brcs	.-24     	; 0xa14 <Endpoint_Write_Control_Stream_LE+0x64>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     a2c:	41 e0       	ldi	r20, 0x01	; 1
     a2e:	08 97       	sbiw	r24, 0x08	; 8
     a30:	09 f0       	breq	.+2      	; 0xa34 <Endpoint_Write_Control_Stream_LE+0x84>
     a32:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a34:	80 91 e8 00 	lds	r24, 0x00E8
     a38:	8e 77       	andi	r24, 0x7E	; 126
     a3a:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     a3e:	61 15       	cp	r22, r1
     a40:	71 05       	cpc	r23, r1
     a42:	51 f6       	brne	.-108    	; 0x9d8 <Endpoint_Write_Control_Stream_LE+0x28>
     a44:	41 11       	cpse	r20, r1
     a46:	c8 cf       	rjmp	.-112    	; 0x9d8 <Endpoint_Write_Control_Stream_LE+0x28>
     a48:	06 c0       	rjmp	.+12     	; 0xa56 <Endpoint_Write_Control_Stream_LE+0xa6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     a4a:	80 91 80 01 	lds	r24, 0x0180

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     a4e:	88 23       	and	r24, r24
     a50:	51 f0       	breq	.+20     	; 0xa66 <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     a52:	85 30       	cpi	r24, 0x05	; 5
     a54:	51 f0       	breq	.+20     	; 0xa6a <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a56:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     a5a:	82 ff       	sbrs	r24, 2
     a5c:	f6 cf       	rjmp	.-20     	; 0xa4a <Endpoint_Write_Control_Stream_LE+0x9a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     a66:	82 e0       	ldi	r24, 0x02	; 2
     a68:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     a6a:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     a6c:	08 95       	ret

00000a6e <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     a6e:	61 15       	cp	r22, r1
     a70:	71 05       	cpc	r23, r1
     a72:	29 f4       	brne	.+10     	; 0xa7e <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     a74:	40 91 e8 00 	lds	r20, 0x00E8
     a78:	4b 77       	andi	r20, 0x7B	; 123
     a7a:	40 93 e8 00 	sts	0x00E8, r20

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
     a7e:	ac 01       	movw	r20, r24
     a80:	28 c0       	rjmp	.+80     	; 0xad2 <Endpoint_Read_Control_Stream_LE+0x64>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     a82:	80 91 80 01 	lds	r24, 0x0180

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     a86:	88 23       	and	r24, r24
     a88:	b9 f1       	breq	.+110    	; 0xaf8 <Endpoint_Read_Control_Stream_LE+0x8a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     a8a:	85 30       	cpi	r24, 0x05	; 5
     a8c:	79 f1       	breq	.+94     	; 0xaec <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a8e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     a92:	83 fd       	sbrc	r24, 3
     a94:	2d c0       	rjmp	.+90     	; 0xaf0 <Endpoint_Read_Control_Stream_LE+0x82>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a96:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     a9a:	82 ff       	sbrs	r24, 2
     a9c:	f2 cf       	rjmp	.-28     	; 0xa82 <Endpoint_Read_Control_Stream_LE+0x14>
     a9e:	fa 01       	movw	r30, r20
     aa0:	07 c0       	rjmp	.+14     	; 0xab0 <Endpoint_Read_Control_Stream_LE+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     aa2:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     aa6:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     aa8:	af 01       	movw	r20, r30
				Length--;
     aaa:	61 50       	subi	r22, 0x01	; 1
     aac:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     aae:	61 f0       	breq	.+24     	; 0xac8 <Endpoint_Read_Control_Stream_LE+0x5a>
     ab0:	af 01       	movw	r20, r30
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     ab2:	90 91 f3 00 	lds	r25, 0x00F3
     ab6:	80 91 f2 00 	lds	r24, 0x00F2
     aba:	39 2f       	mov	r19, r25
     abc:	20 e0       	ldi	r18, 0x00	; 0
     abe:	d9 01       	movw	r26, r18
     ac0:	a8 2b       	or	r26, r24
     ac2:	cd 01       	movw	r24, r26
     ac4:	89 2b       	or	r24, r25
     ac6:	69 f7       	brne	.-38     	; 0xaa2 <Endpoint_Read_Control_Stream_LE+0x34>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ac8:	80 91 e8 00 	lds	r24, 0x00E8
     acc:	8b 77       	andi	r24, 0x7B	; 123
     ace:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
     ad2:	61 15       	cp	r22, r1
     ad4:	71 05       	cpc	r23, r1
     ad6:	a9 f6       	brne	.-86     	; 0xa82 <Endpoint_Read_Control_Stream_LE+0x14>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ad8:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     adc:	80 fd       	sbrc	r24, 0
     ade:	0a c0       	rjmp	.+20     	; 0xaf4 <Endpoint_Read_Control_Stream_LE+0x86>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     ae0:	80 91 80 01 	lds	r24, 0x0180

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     ae4:	88 23       	and	r24, r24
     ae6:	41 f0       	breq	.+16     	; 0xaf8 <Endpoint_Read_Control_Stream_LE+0x8a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     ae8:	85 30       	cpi	r24, 0x05	; 5
     aea:	b1 f7       	brne	.-20     	; 0xad8 <Endpoint_Read_Control_Stream_LE+0x6a>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     aec:	83 e0       	ldi	r24, 0x03	; 3
     aee:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     af8:	82 e0       	ldi	r24, 0x02	; 2
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     afa:	08 95       	ret

00000afc <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     afc:	40 91 87 01 	lds	r20, 0x0187
     b00:	50 91 88 01 	lds	r21, 0x0188
     b04:	46 17       	cp	r20, r22
     b06:	57 07       	cpc	r21, r23
     b08:	48 f0       	brcs	.+18     	; 0xb1c <__stack+0x1d>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     b0a:	61 15       	cp	r22, r1
     b0c:	71 05       	cpc	r23, r1
     b0e:	39 f4       	brne	.+14     	; 0xb1e <__stack+0x1f>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b10:	40 91 e8 00 	lds	r20, 0x00E8
     b14:	4e 77       	andi	r20, 0x7E	; 126
     b16:	40 93 e8 00 	sts	0x00E8, r20
     b1a:	01 c0       	rjmp	.+2      	; 0xb1e <__stack+0x1f>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     b1c:	ba 01       	movw	r22, r20
     b1e:	fc 01       	movw	r30, r24
     b20:	40 e0       	ldi	r20, 0x00	; 0
     b22:	34 c0       	rjmp	.+104    	; 0xb8c <__stack+0x8d>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     b24:	80 91 80 01 	lds	r24, 0x0180

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     b28:	88 23       	and	r24, r24
     b2a:	09 f4       	brne	.+2      	; 0xb2e <__stack+0x2f>
     b2c:	43 c0       	rjmp	.+134    	; 0xbb4 <__stack+0xb5>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     b2e:	85 30       	cpi	r24, 0x05	; 5
     b30:	09 f4       	brne	.+2      	; 0xb34 <__stack+0x35>
     b32:	42 c0       	rjmp	.+132    	; 0xbb8 <__stack+0xb9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     b34:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     b38:	83 fd       	sbrc	r24, 3
     b3a:	3a c0       	rjmp	.+116    	; 0xbb0 <__stack+0xb1>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b3c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     b40:	82 fd       	sbrc	r24, 2
     b42:	30 c0       	rjmp	.+96     	; 0xba4 <__stack+0xa5>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b44:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     b48:	80 ff       	sbrs	r24, 0
     b4a:	20 c0       	rjmp	.+64     	; 0xb8c <__stack+0x8d>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     b4c:	90 91 f3 00 	lds	r25, 0x00F3
     b50:	80 91 f2 00 	lds	r24, 0x00F2
     b54:	39 2f       	mov	r19, r25
     b56:	20 e0       	ldi	r18, 0x00	; 0
     b58:	a9 01       	movw	r20, r18
     b5a:	48 2b       	or	r20, r24
     b5c:	ca 01       	movw	r24, r20
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     b5e:	07 c0       	rjmp	.+14     	; 0xb6e <__stack+0x6f>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     b60:	44 91       	lpm	r20, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b62:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     b66:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     b68:	61 50       	subi	r22, 0x01	; 1
     b6a:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     b6c:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     b6e:	61 15       	cp	r22, r1
     b70:	71 05       	cpc	r23, r1
     b72:	19 f0       	breq	.+6      	; 0xb7a <__stack+0x7b>
     b74:	88 30       	cpi	r24, 0x08	; 8
     b76:	91 05       	cpc	r25, r1
     b78:	98 f3       	brcs	.-26     	; 0xb60 <__stack+0x61>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     b7a:	41 e0       	ldi	r20, 0x01	; 1
     b7c:	08 97       	sbiw	r24, 0x08	; 8
     b7e:	09 f0       	breq	.+2      	; 0xb82 <__stack+0x83>
     b80:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b82:	80 91 e8 00 	lds	r24, 0x00E8
     b86:	8e 77       	andi	r24, 0x7E	; 126
     b88:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     b8c:	61 15       	cp	r22, r1
     b8e:	71 05       	cpc	r23, r1
     b90:	49 f6       	brne	.-110    	; 0xb24 <__stack+0x25>
     b92:	41 11       	cpse	r20, r1
     b94:	c7 cf       	rjmp	.-114    	; 0xb24 <__stack+0x25>
     b96:	06 c0       	rjmp	.+12     	; 0xba4 <__stack+0xa5>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     b98:	80 91 80 01 	lds	r24, 0x0180

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     b9c:	88 23       	and	r24, r24
     b9e:	51 f0       	breq	.+20     	; 0xbb4 <__stack+0xb5>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     ba0:	85 30       	cpi	r24, 0x05	; 5
     ba2:	51 f0       	breq	.+20     	; 0xbb8 <__stack+0xb9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ba4:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     ba8:	82 ff       	sbrs	r24, 2
     baa:	f6 cf       	rjmp	.-20     	; 0xb98 <__stack+0x99>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     bb4:	82 e0       	ldi	r24, 0x02	; 2
     bb6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     bb8:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     bba:	08 95       	ret

00000bbc <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     bbc:	ef 92       	push	r14
     bbe:	ff 92       	push	r15
     bc0:	0f 93       	push	r16
     bc2:	1f 93       	push	r17
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
     bcc:	ac 97       	sbiw	r28, 0x2c	; 44
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	f8 94       	cli
     bd2:	de bf       	out	0x3e, r29	; 62
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     bd8:	e1 e8       	ldi	r30, 0x81	; 129
     bda:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     bdc:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     be0:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     be2:	21 e0       	ldi	r18, 0x01	; 1
     be4:	e9 38       	cpi	r30, 0x89	; 137
     be6:	f2 07       	cpc	r31, r18
     be8:	c9 f7       	brne	.-14     	; 0xbdc <USB_Device_ProcessControlRequest+0x20>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     bea:	52 dd       	rcall	.-1372   	; 0x690 <EVENT_USB_Device_ControlRequest>
     bec:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     bf0:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     bf2:	31 c1       	rjmp	.+610    	; 0xe56 <USB_Device_ProcessControlRequest+0x29a>
     bf4:	80 91 81 01 	lds	r24, 0x0181
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     bf8:	90 91 82 01 	lds	r25, 0x0182

		switch (USB_ControlRequest.bRequest)
     bfc:	95 30       	cpi	r25, 0x05	; 5
     bfe:	09 f4       	brne	.+2      	; 0xc02 <USB_Device_ProcessControlRequest+0x46>
     c00:	87 c0       	rjmp	.+270    	; 0xd10 <USB_Device_ProcessControlRequest+0x154>
     c02:	38 f4       	brcc	.+14     	; 0xc12 <USB_Device_ProcessControlRequest+0x56>
     c04:	91 30       	cpi	r25, 0x01	; 1
     c06:	b1 f1       	breq	.+108    	; 0xc74 <USB_Device_ProcessControlRequest+0xb8>
     c08:	70 f0       	brcs	.+28     	; 0xc26 <USB_Device_ProcessControlRequest+0x6a>
     c0a:	93 30       	cpi	r25, 0x03	; 3
     c0c:	09 f0       	breq	.+2      	; 0xc10 <USB_Device_ProcessControlRequest+0x54>
     c0e:	23 c1       	rjmp	.+582    	; 0xe56 <USB_Device_ProcessControlRequest+0x29a>
     c10:	31 c0       	rjmp	.+98     	; 0xc74 <USB_Device_ProcessControlRequest+0xb8>
     c12:	98 30       	cpi	r25, 0x08	; 8
     c14:	09 f4       	brne	.+2      	; 0xc18 <USB_Device_ProcessControlRequest+0x5c>
     c16:	f4 c0       	rjmp	.+488    	; 0xe00 <USB_Device_ProcessControlRequest+0x244>
     c18:	99 30       	cpi	r25, 0x09	; 9
     c1a:	09 f4       	brne	.+2      	; 0xc1e <USB_Device_ProcessControlRequest+0x62>
     c1c:	00 c1       	rjmp	.+512    	; 0xe1e <USB_Device_ProcessControlRequest+0x262>
     c1e:	96 30       	cpi	r25, 0x06	; 6
     c20:	09 f0       	breq	.+2      	; 0xc24 <USB_Device_ProcessControlRequest+0x68>
     c22:	19 c1       	rjmp	.+562    	; 0xe56 <USB_Device_ProcessControlRequest+0x29a>
     c24:	9c c0       	rjmp	.+312    	; 0xd5e <USB_Device_ProcessControlRequest+0x1a2>
     c26:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     c28:	21 f0       	breq	.+8      	; 0xc32 <USB_Device_ProcessControlRequest+0x76>
     c2a:	82 38       	cpi	r24, 0x82	; 130
     c2c:	09 f0       	breq	.+2      	; 0xc30 <USB_Device_ProcessControlRequest+0x74>
     c2e:	13 c1       	rjmp	.+550    	; 0xe56 <USB_Device_ProcessControlRequest+0x29a>
     c30:	08 c0       	rjmp	.+16     	; 0xc42 <USB_Device_ProcessControlRequest+0x86>
     c32:	80 91 7d 01 	lds	r24, 0x017D
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     c36:	90 91 7e 01 	lds	r25, 0x017E
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     c3a:	99 23       	and	r25, r25
     c3c:	89 f0       	breq	.+34     	; 0xc60 <USB_Device_ProcessControlRequest+0xa4>
     c3e:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     c40:	0f c0       	rjmp	.+30     	; 0xc60 <USB_Device_ProcessControlRequest+0xa4>
     c42:	80 91 85 01 	lds	r24, 0x0185
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     c46:	90 91 86 01 	lds	r25, 0x0186
     c4a:	8f 70       	andi	r24, 0x0F	; 15
     c4c:	99 27       	eor	r25, r25
     c4e:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c52:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     c56:	85 fb       	bst	r24, 5
     c58:	88 27       	eor	r24, r24
     c5a:	80 f9       	bld	r24, 0
     c5c:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c60:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c64:	97 7f       	andi	r25, 0xF7	; 247
     c66:	90 93 e8 00 	sts	0x00E8, r25
     c6a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     c6e:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     c72:	d1 c0       	rjmp	.+418    	; 0xe16 <USB_Device_ProcessControlRequest+0x25a>
     c74:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     c76:	19 f0       	breq	.+6      	; 0xc7e <USB_Device_ProcessControlRequest+0xc2>
     c78:	82 30       	cpi	r24, 0x02	; 2
     c7a:	09 f0       	breq	.+2      	; 0xc7e <USB_Device_ProcessControlRequest+0xc2>
     c7c:	ec c0       	rjmp	.+472    	; 0xe56 <USB_Device_ProcessControlRequest+0x29a>
     c7e:	8f 71       	andi	r24, 0x1F	; 31
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     c80:	21 f0       	breq	.+8      	; 0xc8a <USB_Device_ProcessControlRequest+0xce>
     c82:	82 30       	cpi	r24, 0x02	; 2
     c84:	09 f0       	breq	.+2      	; 0xc88 <USB_Device_ProcessControlRequest+0xcc>
     c86:	e7 c0       	rjmp	.+462    	; 0xe56 <USB_Device_ProcessControlRequest+0x29a>
     c88:	0b c0       	rjmp	.+22     	; 0xca0 <USB_Device_ProcessControlRequest+0xe4>
     c8a:	80 91 83 01 	lds	r24, 0x0183
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     c8e:	81 30       	cpi	r24, 0x01	; 1
     c90:	09 f0       	breq	.+2      	; 0xc94 <USB_Device_ProcessControlRequest+0xd8>
     c92:	e1 c0       	rjmp	.+450    	; 0xe56 <USB_Device_ProcessControlRequest+0x29a>
     c94:	93 30       	cpi	r25, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     c96:	09 f0       	breq	.+2      	; 0xc9a <USB_Device_ProcessControlRequest+0xde>
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	80 93 7e 01 	sts	0x017E, r24
     c9e:	2f c0       	rjmp	.+94     	; 0xcfe <USB_Device_ProcessControlRequest+0x142>
     ca0:	80 91 83 01 	lds	r24, 0x0183

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     ca4:	81 11       	cpse	r24, r1
     ca6:	2b c0       	rjmp	.+86     	; 0xcfe <USB_Device_ProcessControlRequest+0x142>
     ca8:	80 91 85 01 	lds	r24, 0x0185
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     cac:	90 91 86 01 	lds	r25, 0x0186
     cb0:	8f 70       	andi	r24, 0x0F	; 15
     cb2:	99 27       	eor	r25, r25
     cb4:	00 97       	sbiw	r24, 0x00	; 0

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     cb6:	09 f4       	brne	.+2      	; 0xcba <USB_Device_ProcessControlRequest+0xfe>
     cb8:	ce c0       	rjmp	.+412    	; 0xe56 <USB_Device_ProcessControlRequest+0x29a>
     cba:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cbe:	20 91 eb 00 	lds	r18, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     cc2:	20 ff       	sbrs	r18, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     cc4:	1c c0       	rjmp	.+56     	; 0xcfe <USB_Device_ProcessControlRequest+0x142>
     cc6:	20 91 82 01 	lds	r18, 0x0182
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     cca:	23 30       	cpi	r18, 0x03	; 3
     ccc:	21 f4       	brne	.+8      	; 0xcd6 <USB_Device_ProcessControlRequest+0x11a>
     cce:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     cd2:	80 62       	ori	r24, 0x20	; 32
     cd4:	12 c0       	rjmp	.+36     	; 0xcfa <USB_Device_ProcessControlRequest+0x13e>
     cd6:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     cda:	90 61       	ori	r25, 0x10	; 16
     cdc:	90 93 eb 00 	sts	0x00EB, r25
     ce0:	21 e0       	ldi	r18, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	01 c0       	rjmp	.+2      	; 0xce8 <USB_Device_ProcessControlRequest+0x12c>
     ce6:	22 0f       	add	r18, r18
     ce8:	8a 95       	dec	r24
     cea:	ea f7       	brpl	.-6      	; 0xce6 <USB_Device_ProcessControlRequest+0x12a>
     cec:	20 93 ea 00 	sts	0x00EA, r18
     cf0:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     cf4:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     cf8:	88 60       	ori	r24, 0x08	; 8
     cfa:	80 93 eb 00 	sts	0x00EB, r24
     cfe:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d02:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d06:	87 7f       	andi	r24, 0xF7	; 247
     d08:	80 93 e8 00 	sts	0x00E8, r24
     d0c:	6f dd       	rcall	.-1314   	; 0x7ec <Endpoint_ClearStatusStage>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     d0e:	a3 c0       	rjmp	.+326    	; 0xe56 <USB_Device_ProcessControlRequest+0x29a>
     d10:	81 11       	cpse	r24, r1
     d12:	a1 c0       	rjmp	.+322    	; 0xe56 <USB_Device_ProcessControlRequest+0x29a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     d14:	00 91 83 01 	lds	r16, 0x0183
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
     d18:	10 91 84 01 	lds	r17, 0x0184
     d1c:	0f 77       	andi	r16, 0x7F	; 127
     d1e:	11 27       	eor	r17, r17
     d20:	e0 2e       	mov	r14, r16
     d22:	ff b6       	in	r15, 0x3f	; 63
     d24:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     d26:	80 91 e8 00 	lds	r24, 0x00E8
     d2a:	87 7f       	andi	r24, 0xF7	; 247
     d2c:	80 93 e8 00 	sts	0x00E8, r24
     d30:	5d dd       	rcall	.-1350   	; 0x7ec <Endpoint_ClearStatusStage>
     d32:	80 91 e8 00 	lds	r24, 0x00E8
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     d36:	80 ff       	sbrs	r24, 0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d38:	fc cf       	rjmp	.-8      	; 0xd32 <USB_Device_ProcessControlRequest+0x176>
     d3a:	80 91 e3 00 	lds	r24, 0x00E3

	while (!(Endpoint_IsINReady()));
     d3e:	80 78       	andi	r24, 0x80	; 128
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     d40:	80 2b       	or	r24, r16
     d42:	80 93 e3 00 	sts	0x00E3, r24
     d46:	80 68       	ori	r24, 0x80	; 128

				UDADDR = Temp;
     d48:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
     d4c:	ee 20       	and	r14, r14
     d4e:	11 f0       	breq	.+4      	; 0xd54 <USB_Device_ProcessControlRequest+0x198>
     d50:	83 e0       	ldi	r24, 0x03	; 3

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     d52:	01 c0       	rjmp	.+2      	; 0xd56 <USB_Device_ProcessControlRequest+0x19a>
     d54:	82 e0       	ldi	r24, 0x02	; 2
     d56:	80 93 80 01 	sts	0x0180, r24
     d5a:	ff be       	out	0x3f, r15	; 63
     d5c:	7c c0       	rjmp	.+248    	; 0xe56 <USB_Device_ProcessControlRequest+0x29a>
     d5e:	80 58       	subi	r24, 0x80	; 128
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     d60:	82 30       	cpi	r24, 0x02	; 2
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
     d62:	08 f0       	brcs	.+2      	; 0xd66 <USB_Device_ProcessControlRequest+0x1aa>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     d64:	78 c0       	rjmp	.+240    	; 0xe56 <USB_Device_ProcessControlRequest+0x29a>
     d66:	80 91 83 01 	lds	r24, 0x0183
     d6a:	90 91 84 01 	lds	r25, 0x0184
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     d6e:	8c 3d       	cpi	r24, 0xDC	; 220
     d70:	23 e0       	ldi	r18, 0x03	; 3
     d72:	92 07       	cpc	r25, r18
     d74:	71 f5       	brne	.+92     	; 0xdd2 <USB_Device_ProcessControlRequest+0x216>
     d76:	83 e0       	ldi	r24, 0x03	; 3
     d78:	8a 83       	std	Y+2, r24	; 0x02
     d7a:	8a e2       	ldi	r24, 0x2A	; 42
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     d7c:	89 83       	std	Y+1, r24	; 0x01
     d7e:	4f b7       	in	r20, 0x3f	; 63
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     d80:	f8 94       	cli
     d82:	de 01       	movw	r26, r28
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     d84:	13 96       	adiw	r26, 0x03	; 3
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     d86:	20 e0       	ldi	r18, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
     d88:	3e e0       	ldi	r19, 0x0E	; 14
     d8a:	51 e2       	ldi	r21, 0x21	; 33
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     d8c:	e3 2f       	mov	r30, r19
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     d8e:	f0 e0       	ldi	r31, 0x00	; 0

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     d90:	50 93 57 00 	sts	0x0057, r21
     d94:	e4 91       	lpm	r30, Z
     d96:	20 ff       	sbrs	r18, 0
     d98:	03 c0       	rjmp	.+6      	; 0xda0 <USB_Device_ProcessControlRequest+0x1e4>
     d9a:	e2 95       	swap	r30

					if (SerialCharNum & 0x01)
     d9c:	ef 70       	andi	r30, 0x0F	; 15
     d9e:	3f 5f       	subi	r19, 0xFF	; 255
					{
						SerialByte >>= 4;
     da0:	ef 70       	andi	r30, 0x0F	; 15
     da2:	8e 2f       	mov	r24, r30
						SigReadAddress++;
     da4:	90 e0       	ldi	r25, 0x00	; 0
					}

					SerialByte &= 0x0F;
     da6:	ea 30       	cpi	r30, 0x0A	; 10
     da8:	10 f0       	brcs	.+4      	; 0xdae <USB_Device_ProcessControlRequest+0x1f2>
     daa:	c7 96       	adiw	r24, 0x37	; 55

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     dac:	01 c0       	rjmp	.+2      	; 0xdb0 <USB_Device_ProcessControlRequest+0x1f4>
     dae:	c0 96       	adiw	r24, 0x30	; 48
     db0:	8d 93       	st	X+, r24
     db2:	9d 93       	st	X+, r25
     db4:	2f 5f       	subi	r18, 0xFF	; 255
     db6:	24 31       	cpi	r18, 0x14	; 20
     db8:	49 f7       	brne	.-46     	; 0xd8c <USB_Device_ProcessControlRequest+0x1d0>
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     dba:	4f bf       	out	0x3f, r20	; 63
     dbc:	80 91 e8 00 	lds	r24, 0x00E8
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     dc0:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     dc2:	80 93 e8 00 	sts	0x00E8, r24
     dc6:	6a e2       	ldi	r22, 0x2A	; 42
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	ce 01       	movw	r24, r28

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     dcc:	01 96       	adiw	r24, 0x01	; 1
     dce:	f0 dd       	rcall	.-1056   	; 0x9b0 <Endpoint_Write_Control_Stream_LE>
     dd0:	11 c0       	rjmp	.+34     	; 0xdf4 <USB_Device_ProcessControlRequest+0x238>
     dd2:	ae 01       	movw	r20, r28
     dd4:	45 5d       	subi	r20, 0xD5	; 213
     dd6:	5f 4f       	sbci	r21, 0xFF	; 255
     dd8:	60 91 85 01 	lds	r22, 0x0185
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     ddc:	93 dc       	rcall	.-1754   	; 0x704 <CALLBACK_USB_GetDescriptor>
     dde:	00 97       	sbiw	r24, 0x00	; 0
     de0:	d1 f1       	breq	.+116    	; 0xe56 <USB_Device_ProcessControlRequest+0x29a>
     de2:	20 91 e8 00 	lds	r18, 0x00E8
     de6:	27 7f       	andi	r18, 0xF7	; 247
     de8:	20 93 e8 00 	sts	0x00E8, r18
     dec:	bc 01       	movw	r22, r24
     dee:	8b a5       	ldd	r24, Y+43	; 0x2b
     df0:	9c a5       	ldd	r25, Y+44	; 0x2c
     df2:	84 de       	rcall	.-760    	; 0xafc <Endpoint_Write_Control_PStream_LE>
     df4:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     df8:	8b 77       	andi	r24, 0x7B	; 123
     dfa:	80 93 e8 00 	sts	0x00E8, r24
     dfe:	2b c0       	rjmp	.+86     	; 0xe56 <USB_Device_ProcessControlRequest+0x29a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e00:	80 38       	cpi	r24, 0x80	; 128
     e02:	49 f5       	brne	.+82     	; 0xe56 <USB_Device_ProcessControlRequest+0x29a>
     e04:	80 91 e8 00 	lds	r24, 0x00E8
     e08:	87 7f       	andi	r24, 0xF7	; 247
     e0a:	80 93 e8 00 	sts	0x00E8, r24
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     e0e:	80 91 7c 01 	lds	r24, 0x017C
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e12:	80 93 f1 00 	sts	0x00F1, r24
     e16:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     e1a:	8e 77       	andi	r24, 0x7E	; 126
     e1c:	75 cf       	rjmp	.-278    	; 0xd08 <USB_Device_ProcessControlRequest+0x14c>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e1e:	81 11       	cpse	r24, r1
     e20:	1a c0       	rjmp	.+52     	; 0xe56 <USB_Device_ProcessControlRequest+0x29a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e22:	90 91 83 01 	lds	r25, 0x0183
     e26:	92 30       	cpi	r25, 0x02	; 2
     e28:	b0 f4       	brcc	.+44     	; 0xe56 <USB_Device_ProcessControlRequest+0x29a>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     e2a:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     e2e:	87 7f       	andi	r24, 0xF7	; 247
     e30:	80 93 e8 00 	sts	0x00E8, r24
     e34:	90 93 7c 01 	sts	0x017C, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e38:	d9 dc       	rcall	.-1614   	; 0x7ec <Endpoint_ClearStatusStage>
     e3a:	80 91 7c 01 	lds	r24, 0x017C
     e3e:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     e40:	04 c0       	rjmp	.+8      	; 0xe4a <USB_Device_ProcessControlRequest+0x28e>
     e42:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
     e46:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <USB_Device_ProcessControlRequest+0x292>
     e4a:	84 e0       	ldi	r24, 0x04	; 4
     e4c:	01 c0       	rjmp	.+2      	; 0xe50 <USB_Device_ProcessControlRequest+0x294>
     e4e:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     e50:	80 93 80 01 	sts	0x0180, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     e54:	08 dc       	rcall	.-2032   	; 0x666 <EVENT_USB_Device_ConfigurationChanged>
     e56:	80 91 e8 00 	lds	r24, 0x00E8
     e5a:	83 ff       	sbrs	r24, 3
     e5c:	0a c0       	rjmp	.+20     	; 0xe72 <USB_Device_ProcessControlRequest+0x2b6>
     e5e:	80 91 eb 00 	lds	r24, 0x00EB

	EVENT_USB_Device_ConfigurationChanged();
     e62:	80 62       	ori	r24, 0x20	; 32
     e64:	80 93 eb 00 	sts	0x00EB, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e68:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     e6c:	87 7f       	andi	r24, 0xF7	; 247
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     e6e:	80 93 e8 00 	sts	0x00E8, r24
     e72:	ac 96       	adiw	r28, 0x2c	; 44
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	f8 94       	cli
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e78:	de bf       	out	0x3e, r29	; 62
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	cd bf       	out	0x3d, r28	; 61
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
     e82:	1f 91       	pop	r17
     e84:	0f 91       	pop	r16
     e86:	ff 90       	pop	r15
     e88:	ef 90       	pop	r14
     e8a:	08 95       	ret

00000e8c <USB_Event_Stub>:
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

// cppcheck-suppress unusedFunction
void USB_Event_Stub(void)
{
     e8c:	08 95       	ret

00000e8e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     e8e:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     e90:	80 91 80 01 	lds	r24, 0x0180
     e94:	88 23       	and	r24, r24
     e96:	a9 f0       	breq	.+42     	; 0xec2 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e98:	80 91 e9 00 	lds	r24, 0x00E9
     e9c:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     e9e:	90 91 ec 00 	lds	r25, 0x00EC
     ea2:	90 ff       	sbrs	r25, 0
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <USB_USBTask+0x1c>
     ea6:	90 e8       	ldi	r25, 0x80	; 128
     ea8:	01 c0       	rjmp	.+2      	; 0xeac <USB_USBTask+0x1e>
     eaa:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     eac:	c9 2f       	mov	r28, r25
     eae:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     eb0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     eb4:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     eb8:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     eba:	80 de       	rcall	.-768    	; 0xbbc <USB_Device_ProcessControlRequest>
     ebc:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ebe:	c0 93 e9 00 	sts	0x00E9, r28
     ec2:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     ec4:	08 95       	ret

00000ec6 <Serial_SendString>:
     ec6:	fc 01       	movw	r30, r24

void Serial_SendString(const char* StringPtr)
{
	uint8_t CurrByte;

	while ((CurrByte = *StringPtr) != 0x00)
     ec8:	06 c0       	rjmp	.+12     	; 0xed6 <Serial_SendString+0x10>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     eca:	90 91 c8 00 	lds	r25, 0x00C8
     ece:	95 ff       	sbrs	r25, 5
     ed0:	fc cf       	rjmp	.-8      	; 0xeca <Serial_SendString+0x4>
				UDR1 = DataByte;
     ed2:	80 93 ce 00 	sts	0x00CE, r24
     ed6:	81 91       	ld	r24, Z+
     ed8:	81 11       	cpse	r24, r1
     eda:	f7 cf       	rjmp	.-18     	; 0xeca <Serial_SendString+0x4>
	{
		Serial_SendByte(CurrByte);
		StringPtr++;
	}
}
     edc:	08 95       	ret

00000ede <ADC_StartReading>:
			 *
			 *  \param[in] MUXMask  ADC channel mask, reference mask and adjustment mask.
			 */
			static inline void ADC_StartReading(const uint16_t MUXMask)
			{
				ADMUX = MUXMask;
     ede:	80 93 7c 00 	sts	0x007C, r24

				#if (defined(__AVR_ATmega16U4__)  || defined(__AVR_ATmega32U4__) || defined(__DOXYGEN__))
				if (MUXMask & (1 << 8))
     ee2:	90 ff       	sbrs	r25, 0
     ee4:	04 c0       	rjmp	.+8      	; 0xeee <ADC_StartReading+0x10>
				  ADCSRB |=  (1 << MUX5);
     ee6:	80 91 7b 00 	lds	r24, 0x007B
     eea:	80 62       	ori	r24, 0x20	; 32
     eec:	03 c0       	rjmp	.+6      	; 0xef4 <ADC_StartReading+0x16>
				else
				  ADCSRB &= ~(1 << MUX5);
     eee:	80 91 7b 00 	lds	r24, 0x007B
     ef2:	8f 7d       	andi	r24, 0xDF	; 223
     ef4:	80 93 7b 00 	sts	0x007B, r24
				#endif

				ADCSRA |= (1 << ADSC);
     ef8:	80 91 7a 00 	lds	r24, 0x007A
     efc:	80 64       	ori	r24, 0x40	; 64
     efe:	80 93 7a 00 	sts	0x007A, r24
     f02:	08 95       	ret

00000f04 <LCDbrightnessUpdate>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     f04:	80 91 c8 00 	lds	r24, 0x00C8
     f08:	85 ff       	sbrs	r24, 5
     f0a:	fc cf       	rjmp	.-8      	; 0xf04 <LCDbrightnessUpdate>
				UDR1 = DataByte;
     f0c:	8c e7       	ldi	r24, 0x7C	; 124
     f0e:	80 93 ce 00 	sts	0x00CE, r24
        Serial_SendString(data);
}

static void LCDbrightnessUpdate(void) {
    Serial_SendByte(0x7C);
    Serial_SendByte(128+brightness);
     f12:	80 91 07 01 	lds	r24, 0x0107
     f16:	80 58       	subi	r24, 0x80	; 128
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     f18:	90 91 c8 00 	lds	r25, 0x00C8
     f1c:	95 ff       	sbrs	r25, 5
     f1e:	fc cf       	rjmp	.-8      	; 0xf18 <LCDbrightnessUpdate+0x14>
				UDR1 = DataByte;
     f20:	80 93 ce 00 	sts	0x00CE, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f24:	2f e7       	ldi	r18, 0x7F	; 127
     f26:	8a e1       	ldi	r24, 0x1A	; 26
     f28:	96 e0       	ldi	r25, 0x06	; 6
     f2a:	21 50       	subi	r18, 0x01	; 1
     f2c:	80 40       	sbci	r24, 0x00	; 0
     f2e:	90 40       	sbci	r25, 0x00	; 0
     f30:	e1 f7       	brne	.-8      	; 0xf2a <LCDbrightnessUpdate+0x26>
     f32:	00 c0       	rjmp	.+0      	; 0xf34 <LCDbrightnessUpdate+0x30>
     f34:	00 00       	nop
     f36:	08 95       	ret

00000f38 <LCDwrite>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     f38:	20 91 c8 00 	lds	r18, 0x00C8
     f3c:	25 ff       	sbrs	r18, 5
     f3e:	fc cf       	rjmp	.-8      	; 0xf38 <LCDwrite>
				UDR1 = DataByte;
     f40:	2e ef       	ldi	r18, 0xFE	; 254
     f42:	20 93 ce 00 	sts	0x00CE, r18
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     f46:	20 91 c8 00 	lds	r18, 0x00C8
     f4a:	25 ff       	sbrs	r18, 5
     f4c:	fc cf       	rjmp	.-8      	; 0xf46 <LCDwrite+0xe>
				UDR1 = DataByte;
     f4e:	21 e0       	ldi	r18, 0x01	; 1
     f50:	20 93 ce 00 	sts	0x00CE, r18
}

static void LCDwrite(char* data) {
        Serial_SendByte(0xFE);
        Serial_SendByte(0x01);
        Serial_SendString(data);
     f54:	b8 cf       	rjmp	.-144    	; 0xec6 <Serial_SendString>

00000f56 <LCDnextLine>:
     f56:	20 91 c8 00 	lds	r18, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     f5a:	25 ff       	sbrs	r18, 5
     f5c:	fc cf       	rjmp	.-8      	; 0xf56 <LCDnextLine>
				UDR1 = DataByte;
     f5e:	2e ef       	ldi	r18, 0xFE	; 254
     f60:	20 93 ce 00 	sts	0x00CE, r18
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     f64:	20 91 c8 00 	lds	r18, 0x00C8
     f68:	25 ff       	sbrs	r18, 5
     f6a:	fc cf       	rjmp	.-8      	; 0xf64 <LCDnextLine+0xe>
				UDR1 = DataByte;
     f6c:	20 ec       	ldi	r18, 0xC0	; 192
     f6e:	20 93 ce 00 	sts	0x00CE, r18
}

static void LCDnextLine(char* data) {
        Serial_SendByte(0xFE);
        Serial_SendByte(192);
        Serial_SendString(data);
     f72:	a9 cf       	rjmp	.-174    	; 0xec6 <Serial_SendString>

00000f74 <ButtonManage>:
     f74:	8f 92       	push	r8
    LCDupdate();
    brightness = 15;
    LCDbrightnessUpdate();
}

void ButtonManage(void) {
     f76:	9f 92       	push	r9
     f78:	af 92       	push	r10
     f7a:	bf 92       	push	r11
     f7c:	cf 92       	push	r12
     f7e:	df 92       	push	r13
     f80:	ef 92       	push	r14
     f82:	ff 92       	push	r15
     f84:	0f 93       	push	r16
     f86:	1f 93       	push	r17
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
    uint8_t integrator = 0;
    int output         = 0;
    int pin            = 0;

    if (port == 'B')
        pin = (!(PINB & inputPin));
     f8c:	03 b1       	in	r16, 0x03	; 3
     f8e:	04 72       	andi	r16, 0x24	; 36
    else if (port == 'D')
        pin = (!(PIND & inputPin));
    else
        pin = (!(PINE & inputPin));

    for(int i=0; i < MAXIMUM; i++) {
     f90:	c0 e0       	ldi	r28, 0x00	; 0
     f92:	d0 e0       	ldi	r29, 0x00	; 0
#define GZ_H    0x21
#define GZ_L    0x22
//Functions
//========================
inline int debounce(int inputPin, char port) {
    uint8_t integrator = 0;
     f94:	10 e0       	ldi	r17, 0x00	; 0
     f96:	13 c0       	rjmp	.+38     	; 0xfbe <ButtonManage+0x4a>
        pin = (!(PIND & inputPin));
    else
        pin = (!(PINE & inputPin));

    for(int i=0; i < MAXIMUM; i++) {
        if (pin) {
     f98:	01 11       	cpse	r16, r1
     f9a:	04 c0       	rjmp	.+8      	; 0xfa4 <ButtonManage+0x30>
            if (integrator > 0) {
     f9c:	11 23       	and	r17, r17
     f9e:	71 f0       	breq	.+28     	; 0xfbc <ButtonManage+0x48>
                integrator--;
     fa0:	11 50       	subi	r17, 0x01	; 1
     fa2:	0c c0       	rjmp	.+24     	; 0xfbc <ButtonManage+0x48>
            }
        } else if (integrator < MAXIMUM) {
     fa4:	61 2f       	mov	r22, r17
     fa6:	70 e0       	ldi	r23, 0x00	; 0
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	3a d9       	rcall	.-3468   	; 0x222 <__floatsisf>
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	40 e0       	ldi	r20, 0x00	; 0
     fb4:	51 e4       	ldi	r21, 0x41	; 65
     fb6:	09 d9       	rcall	.-3566   	; 0x1ca <__ltsf2>
     fb8:	87 fd       	sbrc	r24, 7
     fba:	1f 5f       	subi	r17, 0xFF	; 255
     fbc:	21 96       	adiw	r28, 0x01	; 1
            integrator++;
     fbe:	c8 30       	cpi	r28, 0x08	; 8
    else if (port == 'D')
        pin = (!(PIND & inputPin));
    else
        pin = (!(PINE & inputPin));

    for(int i=0; i < MAXIMUM; i++) {
     fc0:	d1 05       	cpc	r29, r1
     fc2:	51 f7       	brne	.-44     	; 0xf98 <ButtonManage+0x24>
     fc4:	11 23       	and	r17, r17
     fc6:	71 f0       	breq	.+28     	; 0xfe4 <ButtonManage+0x70>
            }
        } else if (integrator < MAXIMUM) {
            integrator++;
        }
    }
    if (integrator == 0) {
     fc8:	61 2f       	mov	r22, r17
     fca:	70 e0       	ldi	r23, 0x00	; 0
        output = 0;
    } else if (integrator >= MAXIMUM) {
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	28 d9       	rcall	.-3504   	; 0x222 <__floatsisf>
     fd2:	01 e0       	ldi	r16, 0x01	; 1
     fd4:	10 e0       	ldi	r17, 0x00	; 0
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e0       	ldi	r20, 0x00	; 0
     fdc:	51 e4       	ldi	r21, 0x41	; 65
     fde:	c9 d8       	rcall	.-3694   	; 0x172 <__gesf2>
     fe0:	87 ff       	sbrs	r24, 7
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <ButtonManage+0x74>
     fe4:	00 e0       	ldi	r16, 0x00	; 0
     fe6:	10 e0       	ldi	r17, 0x00	; 0
     fe8:	e3 b0       	in	r14, 0x03	; 3
     fea:	88 e0       	ldi	r24, 0x08	; 8
        } else if (integrator < MAXIMUM) {
            integrator++;
        }
    }
    if (integrator == 0) {
        output = 0;
     fec:	e8 22       	and	r14, r24
     fee:	c0 e0       	ldi	r28, 0x00	; 0
    uint8_t integrator = 0;
    int output         = 0;
    int pin            = 0;

    if (port == 'B')
        pin = (!(PINB & inputPin));
     ff0:	d0 e0       	ldi	r29, 0x00	; 0
     ff2:	f1 2c       	mov	r15, r1
     ff4:	13 c0       	rjmp	.+38     	; 0x101c <ButtonManage+0xa8>
    else if (port == 'D')
        pin = (!(PIND & inputPin));
    else
        pin = (!(PINE & inputPin));

    for(int i=0; i < MAXIMUM; i++) {
     ff6:	e1 10       	cpse	r14, r1
     ff8:	04 c0       	rjmp	.+8      	; 0x1002 <ButtonManage+0x8e>
#define GZ_H    0x21
#define GZ_L    0x22
//Functions
//========================
inline int debounce(int inputPin, char port) {
    uint8_t integrator = 0;
     ffa:	ff 20       	and	r15, r15
     ffc:	71 f0       	breq	.+28     	; 0x101a <ButtonManage+0xa6>
        pin = (!(PIND & inputPin));
    else
        pin = (!(PINE & inputPin));

    for(int i=0; i < MAXIMUM; i++) {
        if (pin) {
     ffe:	fa 94       	dec	r15
    1000:	0c c0       	rjmp	.+24     	; 0x101a <ButtonManage+0xa6>
            if (integrator > 0) {
    1002:	6f 2d       	mov	r22, r15
    1004:	70 e0       	ldi	r23, 0x00	; 0
                integrator--;
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	90 e0       	ldi	r25, 0x00	; 0
            }
        } else if (integrator < MAXIMUM) {
    100a:	0b d9       	rcall	.-3562   	; 0x222 <__floatsisf>
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	40 e0       	ldi	r20, 0x00	; 0
    1012:	51 e4       	ldi	r21, 0x41	; 65
    1014:	da d8       	rcall	.-3660   	; 0x1ca <__ltsf2>
    1016:	87 fd       	sbrc	r24, 7
    1018:	f3 94       	inc	r15
    101a:	21 96       	adiw	r28, 0x01	; 1
    101c:	c8 30       	cpi	r28, 0x08	; 8
    101e:	d1 05       	cpc	r29, r1
    1020:	51 f7       	brne	.-44     	; 0xff6 <ButtonManage+0x82>
    1022:	ff 20       	and	r15, r15
            integrator++;
    1024:	71 f0       	breq	.+28     	; 0x1042 <ButtonManage+0xce>
    else if (port == 'D')
        pin = (!(PIND & inputPin));
    else
        pin = (!(PINE & inputPin));

    for(int i=0; i < MAXIMUM; i++) {
    1026:	6f 2d       	mov	r22, r15
    1028:	70 e0       	ldi	r23, 0x00	; 0
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	90 e0       	ldi	r25, 0x00	; 0
            }
        } else if (integrator < MAXIMUM) {
            integrator++;
        }
    }
    if (integrator == 0) {
    102e:	f9 d8       	rcall	.-3598   	; 0x222 <__floatsisf>
    1030:	c1 e0       	ldi	r28, 0x01	; 1
        output = 0;
    } else if (integrator >= MAXIMUM) {
    1032:	d0 e0       	ldi	r29, 0x00	; 0
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	40 e0       	ldi	r20, 0x00	; 0
    103a:	51 e4       	ldi	r21, 0x41	; 65
    103c:	9a d8       	rcall	.-3788   	; 0x172 <__gesf2>
    103e:	87 ff       	sbrs	r24, 7
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <ButtonManage+0xd2>
    1042:	c0 e0       	ldi	r28, 0x00	; 0
    1044:	d0 e0       	ldi	r29, 0x00	; 0
    1046:	cc b0       	in	r12, 0x0c	; 12
    1048:	80 e4       	ldi	r24, 0x40	; 64
    104a:	c8 22       	and	r12, r24
    104c:	e1 2c       	mov	r14, r1
    104e:	f1 2c       	mov	r15, r1
    1050:	d1 2c       	mov	r13, r1
        } else if (integrator < MAXIMUM) {
            integrator++;
        }
    }
    if (integrator == 0) {
        output = 0;
    1052:	15 c0       	rjmp	.+42     	; 0x107e <ButtonManage+0x10a>
    1054:	c1 10       	cpse	r12, r1
    else if (port == 'C')
        pin = (!(PINC & inputPin));
    else if (port == 'D')
        pin = (!(PIND & inputPin));
    else
        pin = (!(PINE & inputPin));
    1056:	04 c0       	rjmp	.+8      	; 0x1060 <ButtonManage+0xec>
    1058:	dd 20       	and	r13, r13
    105a:	71 f0       	breq	.+28     	; 0x1078 <ButtonManage+0x104>

    for(int i=0; i < MAXIMUM; i++) {
    105c:	da 94       	dec	r13
    105e:	0c c0       	rjmp	.+24     	; 0x1078 <ButtonManage+0x104>
#define GZ_H    0x21
#define GZ_L    0x22
//Functions
//========================
inline int debounce(int inputPin, char port) {
    uint8_t integrator = 0;
    1060:	6d 2d       	mov	r22, r13
    1062:	70 e0       	ldi	r23, 0x00	; 0
        pin = (!(PIND & inputPin));
    else
        pin = (!(PINE & inputPin));

    for(int i=0; i < MAXIMUM; i++) {
        if (pin) {
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	90 e0       	ldi	r25, 0x00	; 0
            if (integrator > 0) {
    1068:	dc d8       	rcall	.-3656   	; 0x222 <__floatsisf>
    106a:	20 e0       	ldi	r18, 0x00	; 0
                integrator--;
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	40 e0       	ldi	r20, 0x00	; 0
            }
        } else if (integrator < MAXIMUM) {
    1070:	51 e4       	ldi	r21, 0x41	; 65
    1072:	ab d8       	rcall	.-3754   	; 0x1ca <__ltsf2>
    1074:	87 fd       	sbrc	r24, 7
    1076:	d3 94       	inc	r13
    1078:	8f ef       	ldi	r24, 0xFF	; 255
    107a:	e8 1a       	sub	r14, r24
    107c:	f8 0a       	sbc	r15, r24
    107e:	88 e0       	ldi	r24, 0x08	; 8
    1080:	e8 16       	cp	r14, r24
    1082:	f1 04       	cpc	r15, r1
    1084:	39 f7       	brne	.-50     	; 0x1054 <ButtonManage+0xe0>
    1086:	dd 20       	and	r13, r13
    1088:	79 f0       	breq	.+30     	; 0x10a8 <ButtonManage+0x134>
            integrator++;
    108a:	6d 2d       	mov	r22, r13
    else if (port == 'D')
        pin = (!(PIND & inputPin));
    else
        pin = (!(PINE & inputPin));

    for(int i=0; i < MAXIMUM; i++) {
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	c7 d8       	rcall	.-3698   	; 0x222 <__floatsisf>
    1094:	ee 24       	eor	r14, r14
    1096:	e3 94       	inc	r14
    1098:	f1 2c       	mov	r15, r1
            }
        } else if (integrator < MAXIMUM) {
            integrator++;
        }
    }
    if (integrator == 0) {
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	30 e0       	ldi	r19, 0x00	; 0
        output = 0;
    } else if (integrator >= MAXIMUM) {
    109e:	40 e0       	ldi	r20, 0x00	; 0
    10a0:	51 e4       	ldi	r21, 0x41	; 65
    10a2:	67 d8       	rcall	.-3890   	; 0x172 <__gesf2>
    10a4:	87 ff       	sbrs	r24, 7
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <ButtonManage+0x138>
    10a8:	e1 2c       	mov	r14, r1
    10aa:	f1 2c       	mov	r15, r1
    10ac:	a3 b0       	in	r10, 0x03	; 3
    10ae:	80 e1       	ldi	r24, 0x10	; 16
    10b0:	a8 22       	and	r10, r24
    10b2:	c1 2c       	mov	r12, r1
    10b4:	d1 2c       	mov	r13, r1
    10b6:	b1 2c       	mov	r11, r1
    10b8:	15 c0       	rjmp	.+42     	; 0x10e4 <ButtonManage+0x170>
    10ba:	a1 10       	cpse	r10, r1
    10bc:	04 c0       	rjmp	.+8      	; 0x10c6 <ButtonManage+0x152>
    10be:	bb 20       	and	r11, r11
        } else if (integrator < MAXIMUM) {
            integrator++;
        }
    }
    if (integrator == 0) {
        output = 0;
    10c0:	71 f0       	breq	.+28     	; 0x10de <ButtonManage+0x16a>
    10c2:	ba 94       	dec	r11
    uint8_t integrator = 0;
    int output         = 0;
    int pin            = 0;

    if (port == 'B')
        pin = (!(PINB & inputPin));
    10c4:	0c c0       	rjmp	.+24     	; 0x10de <ButtonManage+0x16a>
    10c6:	6b 2d       	mov	r22, r11
    10c8:	70 e0       	ldi	r23, 0x00	; 0
    else if (port == 'D')
        pin = (!(PIND & inputPin));
    else
        pin = (!(PINE & inputPin));

    for(int i=0; i < MAXIMUM; i++) {
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	90 e0       	ldi	r25, 0x00	; 0
#define GZ_H    0x21
#define GZ_L    0x22
//Functions
//========================
inline int debounce(int inputPin, char port) {
    uint8_t integrator = 0;
    10ce:	a9 d8       	rcall	.-3758   	; 0x222 <__floatsisf>
    10d0:	20 e0       	ldi	r18, 0x00	; 0
        pin = (!(PIND & inputPin));
    else
        pin = (!(PINE & inputPin));

    for(int i=0; i < MAXIMUM; i++) {
        if (pin) {
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	40 e0       	ldi	r20, 0x00	; 0
            if (integrator > 0) {
    10d6:	51 e4       	ldi	r21, 0x41	; 65
    10d8:	78 d8       	rcall	.-3856   	; 0x1ca <__ltsf2>
                integrator--;
    10da:	87 fd       	sbrc	r24, 7
    10dc:	b3 94       	inc	r11
            }
        } else if (integrator < MAXIMUM) {
    10de:	8f ef       	ldi	r24, 0xFF	; 255
    10e0:	c8 1a       	sub	r12, r24
    10e2:	d8 0a       	sbc	r13, r24
    10e4:	88 e0       	ldi	r24, 0x08	; 8
    10e6:	c8 16       	cp	r12, r24
    10e8:	d1 04       	cpc	r13, r1
    10ea:	39 f7       	brne	.-50     	; 0x10ba <ButtonManage+0x146>
    10ec:	bb 20       	and	r11, r11
    10ee:	79 f0       	breq	.+30     	; 0x110e <ButtonManage+0x19a>
    10f0:	6b 2d       	mov	r22, r11
    10f2:	70 e0       	ldi	r23, 0x00	; 0
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	90 e0       	ldi	r25, 0x00	; 0
            integrator++;
    10f8:	94 d8       	rcall	.-3800   	; 0x222 <__floatsisf>
    else if (port == 'D')
        pin = (!(PIND & inputPin));
    else
        pin = (!(PINE & inputPin));

    for(int i=0; i < MAXIMUM; i++) {
    10fa:	cc 24       	eor	r12, r12
    10fc:	c3 94       	inc	r12
    10fe:	d1 2c       	mov	r13, r1
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	40 e0       	ldi	r20, 0x00	; 0
    1106:	51 e4       	ldi	r21, 0x41	; 65
            }
        } else if (integrator < MAXIMUM) {
            integrator++;
        }
    }
    if (integrator == 0) {
    1108:	34 d8       	rcall	.-3992   	; 0x172 <__gesf2>
    110a:	87 ff       	sbrs	r24, 7
        output = 0;
    } else if (integrator >= MAXIMUM) {
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <ButtonManage+0x19e>
    110e:	c1 2c       	mov	r12, r1
    1110:	d1 2c       	mov	r13, r1
    1112:	89 b0       	in	r8, 0x09	; 9
    1114:	80 e1       	ldi	r24, 0x10	; 16
    1116:	88 22       	and	r8, r24
    1118:	a1 2c       	mov	r10, r1
    111a:	b1 2c       	mov	r11, r1
    111c:	91 2c       	mov	r9, r1
    111e:	15 c0       	rjmp	.+42     	; 0x114a <ButtonManage+0x1d6>
    1120:	81 10       	cpse	r8, r1
    1122:	04 c0       	rjmp	.+8      	; 0x112c <ButtonManage+0x1b8>
    1124:	99 20       	and	r9, r9
    1126:	71 f0       	breq	.+28     	; 0x1144 <ButtonManage+0x1d0>
    1128:	9a 94       	dec	r9
    112a:	0c c0       	rjmp	.+24     	; 0x1144 <ButtonManage+0x1d0>
    112c:	69 2d       	mov	r22, r9
        } else if (integrator < MAXIMUM) {
            integrator++;
        }
    }
    if (integrator == 0) {
        output = 0;
    112e:	70 e0       	ldi	r23, 0x00	; 0
    1130:	80 e0       	ldi	r24, 0x00	; 0
    if (port == 'B')
        pin = (!(PINB & inputPin));
    else if (port == 'C')
        pin = (!(PINC & inputPin));
    else if (port == 'D')
        pin = (!(PIND & inputPin));
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	76 d8       	rcall	.-3860   	; 0x222 <__floatsisf>
    1136:	20 e0       	ldi	r18, 0x00	; 0
    else
        pin = (!(PINE & inputPin));

    for(int i=0; i < MAXIMUM; i++) {
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	40 e0       	ldi	r20, 0x00	; 0
#define GZ_H    0x21
#define GZ_L    0x22
//Functions
//========================
inline int debounce(int inputPin, char port) {
    uint8_t integrator = 0;
    113c:	51 e4       	ldi	r21, 0x41	; 65
    113e:	45 d8       	rcall	.-3958   	; 0x1ca <__ltsf2>
        pin = (!(PIND & inputPin));
    else
        pin = (!(PINE & inputPin));

    for(int i=0; i < MAXIMUM; i++) {
        if (pin) {
    1140:	87 fd       	sbrc	r24, 7
    1142:	93 94       	inc	r9
            if (integrator > 0) {
    1144:	8f ef       	ldi	r24, 0xFF	; 255
    1146:	a8 1a       	sub	r10, r24
                integrator--;
    1148:	b8 0a       	sbc	r11, r24
    114a:	88 e0       	ldi	r24, 0x08	; 8
            }
        } else if (integrator < MAXIMUM) {
    114c:	a8 16       	cp	r10, r24
    114e:	b1 04       	cpc	r11, r1
    1150:	39 f7       	brne	.-50     	; 0x1120 <ButtonManage+0x1ac>
    1152:	99 20       	and	r9, r9
    1154:	79 f0       	breq	.+30     	; 0x1174 <ButtonManage+0x200>
    1156:	69 2d       	mov	r22, r9
    1158:	70 e0       	ldi	r23, 0x00	; 0
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	61 d8       	rcall	.-3902   	; 0x222 <__floatsisf>
    1160:	aa 24       	eor	r10, r10
    1162:	a3 94       	inc	r10
    1164:	b1 2c       	mov	r11, r1
            integrator++;
    1166:	20 e0       	ldi	r18, 0x00	; 0
    else if (port == 'D')
        pin = (!(PIND & inputPin));
    else
        pin = (!(PINE & inputPin));

    for(int i=0; i < MAXIMUM; i++) {
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	40 e0       	ldi	r20, 0x00	; 0
    116c:	51 e4       	ldi	r21, 0x41	; 65
    116e:	01 d8       	rcall	.-4094   	; 0x172 <__gesf2>
    1170:	87 ff       	sbrs	r24, 7
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <ButtonManage+0x204>
    1174:	a1 2c       	mov	r10, r1
            }
        } else if (integrator < MAXIMUM) {
            integrator++;
        }
    }
    if (integrator == 0) {
    1176:	b1 2c       	mov	r11, r1
    1178:	01 15       	cp	r16, r1
        output = 0;
    } else if (integrator >= MAXIMUM) {
    117a:	11 05       	cpc	r17, r1
    117c:	69 f4       	brne	.+26     	; 0x1198 <ButtonManage+0x224>
    117e:	20 97       	sbiw	r28, 0x00	; 0
    1180:	59 f4       	brne	.+22     	; 0x1198 <ButtonManage+0x224>
    1182:	e1 14       	cp	r14, r1
    1184:	f1 04       	cpc	r15, r1
    1186:	41 f4       	brne	.+16     	; 0x1198 <ButtonManage+0x224>
    1188:	c1 14       	cp	r12, r1
    118a:	d1 04       	cpc	r13, r1
    118c:	29 f4       	brne	.+10     	; 0x1198 <ButtonManage+0x224>
    118e:	a1 14       	cp	r10, r1
    1190:	b1 04       	cpc	r11, r1
    1192:	11 f4       	brne	.+4      	; 0x1198 <ButtonManage+0x224>
    1194:	10 92 6c 01 	sts	0x016C, r1
    1198:	80 91 6c 01 	lds	r24, 0x016C
        } else if (integrator < MAXIMUM) {
            integrator++;
        }
    }
    if (integrator == 0) {
        output = 0;
    119c:	81 11       	cpse	r24, r1
    119e:	17 c1       	rjmp	.+558    	; 0x13ce <ButtonManage+0x45a>
    int leftClick   = debounce(buttonLeft, 'B');
    int rightClick  = debounce(buttonRight, 'B');
    int upClick     = debounce(buttonUp, 'E');
    int downClick   = debounce(buttonDown, 'B');
    int centerClick = debounce(buttonCenter, 'D');
    if (!(leftClick || rightClick || upClick || downClick || centerClick)) {
    11a0:	80 91 6d 01 	lds	r24, 0x016D
    11a4:	84 30       	cpi	r24, 0x04	; 4
    11a6:	09 f4       	brne	.+2      	; 0x11aa <ButtonManage+0x236>
    11a8:	71 c0       	rjmp	.+226    	; 0x128c <ButtonManage+0x318>
    11aa:	48 f4       	brcc	.+18     	; 0x11be <ButtonManage+0x24a>
    11ac:	81 30       	cpi	r24, 0x01	; 1
    11ae:	09 f1       	breq	.+66     	; 0x11f2 <ButtonManage+0x27e>
    11b0:	90 f0       	brcs	.+36     	; 0x11d6 <ButtonManage+0x262>
    11b2:	82 30       	cpi	r24, 0x02	; 2
    11b4:	71 f1       	breq	.+92     	; 0x1212 <ButtonManage+0x29e>
    11b6:	83 30       	cpi	r24, 0x03	; 3
    11b8:	09 f0       	breq	.+2      	; 0x11bc <ButtonManage+0x248>
    11ba:	fa c0       	rjmp	.+500    	; 0x13b0 <ButtonManage+0x43c>
        click = false;
    11bc:	4e c0       	rjmp	.+156    	; 0x125a <ButtonManage+0x2e6>
    11be:	86 30       	cpi	r24, 0x06	; 6
    }

    if (!click) {
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <ButtonManage+0x250>
    11c2:	95 c0       	rjmp	.+298    	; 0x12ee <ButtonManage+0x37a>
    11c4:	08 f4       	brcc	.+2      	; 0x11c8 <ButtonManage+0x254>
    11c6:	76 c0       	rjmp	.+236    	; 0x12b4 <ButtonManage+0x340>
        switch (menuState) {
    11c8:	87 30       	cpi	r24, 0x07	; 7
    11ca:	09 f4       	brne	.+2      	; 0x11ce <ButtonManage+0x25a>
    11cc:	ad c0       	rjmp	.+346    	; 0x1328 <ButtonManage+0x3b4>
    11ce:	88 30       	cpi	r24, 0x08	; 8
    11d0:	09 f0       	breq	.+2      	; 0x11d4 <ButtonManage+0x260>
    11d2:	ee c0       	rjmp	.+476    	; 0x13b0 <ButtonManage+0x43c>
    11d4:	bf c0       	rjmp	.+382    	; 0x1354 <ButtonManage+0x3e0>
    11d6:	e1 14       	cp	r14, r1
    11d8:	f1 04       	cpc	r15, r1
    11da:	19 f0       	breq	.+6      	; 0x11e2 <ButtonManage+0x26e>
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	80 93 6d 01 	sts	0x016D, r24
    11e2:	c1 14       	cp	r12, r1
    11e4:	d1 04       	cpc	r13, r1
    11e6:	09 f4       	brne	.+2      	; 0x11ea <ButtonManage+0x276>
    11e8:	e3 c0       	rjmp	.+454    	; 0x13b0 <ButtonManage+0x43c>
    11ea:	83 e0       	ldi	r24, 0x03	; 3
    11ec:	80 93 6d 01 	sts	0x016D, r24
    11f0:	df c0       	rjmp	.+446    	; 0x13b0 <ButtonManage+0x43c>
    11f2:	e1 14       	cp	r14, r1
    11f4:	f1 04       	cpc	r15, r1
    11f6:	19 f0       	breq	.+6      	; 0x11fe <ButtonManage+0x28a>
    11f8:	88 e0       	ldi	r24, 0x08	; 8
    11fa:	80 93 6d 01 	sts	0x016D, r24
            case menuState_init:
                if (upClick)
    11fe:	c1 14       	cp	r12, r1
    1200:	d1 04       	cpc	r13, r1
    1202:	11 f0       	breq	.+4      	; 0x1208 <ButtonManage+0x294>
                    menuState=menuState_settings;
    1204:	10 92 6d 01 	sts	0x016D, r1
    1208:	cd 2b       	or	r28, r29
                if (downClick)
    120a:	09 f4       	brne	.+2      	; 0x120e <ButtonManage+0x29a>
    120c:	16 c1       	rjmp	.+556    	; 0x143a <ButtonManage+0x4c6>
    120e:	82 e0       	ldi	r24, 0x02	; 2
    1210:	9e c0       	rjmp	.+316    	; 0x134e <ButtonManage+0x3da>
                    menuState=menuState_adc;
    1212:	01 15       	cp	r16, r1
    1214:	11 05       	cpc	r17, r1
    1216:	19 f0       	breq	.+6      	; 0x121e <ButtonManage+0x2aa>
    1218:	81 e0       	ldi	r24, 0x01	; 1
                break;
            case menuState_settings:
                if (upClick)
    121a:	80 93 6d 01 	sts	0x016D, r24
    121e:	20 97       	sbiw	r28, 0x00	; 0
                    menuState=menuState_buttons;
    1220:	19 f0       	breq	.+6      	; 0x1228 <ButtonManage+0x2b4>
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	80 93 6d 01 	sts	0x016D, r24
                if (downClick)
    1228:	e1 14       	cp	r14, r1
    122a:	f1 04       	cpc	r15, r1
                    menuState=menuState_init;
    122c:	39 f0       	breq	.+14     	; 0x123c <ButtonManage+0x2c8>
    122e:	80 91 07 01 	lds	r24, 0x0107
                if (rightClick)
    1232:	8a 31       	cpi	r24, 0x1A	; 26
    1234:	18 f4       	brcc	.+6      	; 0x123c <ButtonManage+0x2c8>
                    menuState=menuState_settings_brightness;
    1236:	8b 5f       	subi	r24, 0xFB	; 251
    1238:	80 93 07 01 	sts	0x0107, r24
                break;
            case menuState_settings_brightness:
                if (leftClick)
    123c:	c1 14       	cp	r12, r1
    123e:	d1 04       	cpc	r13, r1
                    menuState=menuState_settings;
    1240:	09 f4       	brne	.+2      	; 0x1244 <ButtonManage+0x2d0>
    1242:	b6 c0       	rjmp	.+364    	; 0x13b0 <ButtonManage+0x43c>
    1244:	20 91 07 01 	lds	r18, 0x0107
                if (rightClick)
    1248:	82 2f       	mov	r24, r18
                    menuState=menuState_settings;
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	05 97       	sbiw	r24, 0x05	; 5
    124e:	0c f4       	brge	.+2      	; 0x1252 <ButtonManage+0x2de>
                if (upClick) {
    1250:	af c0       	rjmp	.+350    	; 0x13b0 <ButtonManage+0x43c>
    1252:	25 50       	subi	r18, 0x05	; 5
    1254:	20 93 07 01 	sts	0x0107, r18
                    if ((brightness<=30) && ((brightness+5)<=30)) {
    1258:	ab c0       	rjmp	.+342    	; 0x13b0 <ButtonManage+0x43c>
    125a:	e1 14       	cp	r14, r1
    125c:	f1 04       	cpc	r15, r1
                        brightness = brightness + 5;
    125e:	11 f0       	breq	.+4      	; 0x1264 <ButtonManage+0x2f0>
    1260:	10 92 6d 01 	sts	0x016D, r1
                    }
                }
                if (downClick) {
    1264:	c1 14       	cp	r12, r1
    1266:	d1 04       	cpc	r13, r1
    1268:	19 f0       	breq	.+6      	; 0x1270 <ButtonManage+0x2fc>
    126a:	88 e0       	ldi	r24, 0x08	; 8
                    if ((brightness>=0) && ((brightness-5)>=0)) {
    126c:	80 93 6d 01 	sts	0x016D, r24
    1270:	cd 2b       	or	r28, r29
    1272:	09 f4       	brne	.+2      	; 0x1276 <ButtonManage+0x302>
    1274:	e2 c0       	rjmp	.+452    	; 0x143a <ButtonManage+0x4c6>
    1276:	84 98       	cbi	0x10, 4	; 16
    1278:	80 91 7e 00 	lds	r24, 0x007E
                        brightness = brightness - 5;
    127c:	80 61       	ori	r24, 0x10	; 16
    127e:	80 93 7e 00 	sts	0x007E, r24
                    }
                }
                break;
            case menuState_adc:
                if (upClick) {
    1282:	84 e4       	ldi	r24, 0x44	; 68
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	2b de       	rcall	.-938    	; 0xede <ADC_StartReading>
                    menuState=menuState_init;
    1288:	84 e0       	ldi	r24, 0x04	; 4
    128a:	61 c0       	rjmp	.+194    	; 0x134e <ButtonManage+0x3da>
                }
                if (downClick) {
    128c:	01 15       	cp	r16, r1
    128e:	11 05       	cpc	r17, r1
    1290:	19 f0       	breq	.+6      	; 0x1298 <ButtonManage+0x324>
                    menuState=menuState_buttons;
    1292:	83 e0       	ldi	r24, 0x03	; 3
    1294:	80 93 6d 01 	sts	0x016D, r24
                }
                if (rightClick) {
    1298:	cd 2b       	or	r28, r29
    129a:	09 f4       	brne	.+2      	; 0x129e <ButtonManage+0x32a>
    129c:	ce c0       	rjmp	.+412    	; 0x143a <ButtonManage+0x4c6>
				DDRF  &= ~(1 << ChannelIndex);
				DIDR0 |=  (1 << ChannelIndex);
				#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
				if (ChannelIndex < 8)
				{
					DDRF  &= ~(1 << ChannelIndex);
    129e:	85 98       	cbi	0x10, 5	; 16
					DIDR0 |=  (1 << ChannelIndex);
    12a0:	80 91 7e 00 	lds	r24, 0x007E
    12a4:	80 62       	ori	r24, 0x20	; 32
    12a6:	80 93 7e 00 	sts	0x007E, r24
                    ADC_SetupChannel(4);
                    ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_CHANNEL4);
    12aa:	85 e4       	ldi	r24, 0x45	; 69
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	17 de       	rcall	.-978    	; 0xede <ADC_StartReading>
    12b0:	85 e0       	ldi	r24, 0x05	; 5
                    menuState=menuState_x;
    12b2:	4d c0       	rjmp	.+154    	; 0x134e <ButtonManage+0x3da>
    12b4:	01 15       	cp	r16, r1
                }
                break;
            case menuState_x:
                if (leftClick) {
    12b6:	11 05       	cpc	r17, r1
    12b8:	61 f0       	breq	.+24     	; 0x12d2 <ButtonManage+0x35e>
    12ba:	84 98       	cbi	0x10, 4	; 16
                    menuState=menuState_adc;
    12bc:	80 91 7e 00 	lds	r24, 0x007E
    12c0:	80 61       	ori	r24, 0x10	; 16
                }
                if (rightClick) {
    12c2:	80 93 7e 00 	sts	0x007E, r24
    12c6:	84 e4       	ldi	r24, 0x44	; 68
				DDRF  &= ~(1 << ChannelIndex);
				DIDR0 |=  (1 << ChannelIndex);
				#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
				if (ChannelIndex < 8)
				{
					DDRF  &= ~(1 << ChannelIndex);
    12c8:	90 e0       	ldi	r25, 0x00	; 0
					DIDR0 |=  (1 << ChannelIndex);
    12ca:	09 de       	rcall	.-1006   	; 0xede <ADC_StartReading>
    12cc:	84 e0       	ldi	r24, 0x04	; 4
    12ce:	80 93 6d 01 	sts	0x016D, r24
    12d2:	cd 2b       	or	r28, r29
                    ADC_SetupChannel(5);
                    ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_CHANNEL5);
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <ButtonManage+0x364>
    12d6:	b1 c0       	rjmp	.+354    	; 0x143a <ButtonManage+0x4c6>
    12d8:	86 98       	cbi	0x10, 6	; 16
    12da:	80 91 7e 00 	lds	r24, 0x007E
                    menuState=menuState_y;
    12de:	80 64       	ori	r24, 0x40	; 64
                }
                break;
            case menuState_y:
                if (leftClick) {
    12e0:	80 93 7e 00 	sts	0x007E, r24
    12e4:	86 e4       	ldi	r24, 0x46	; 70
				DDRF  &= ~(1 << ChannelIndex);
				DIDR0 |=  (1 << ChannelIndex);
				#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
				if (ChannelIndex < 8)
				{
					DDRF  &= ~(1 << ChannelIndex);
    12e6:	90 e0       	ldi	r25, 0x00	; 0
					DIDR0 |=  (1 << ChannelIndex);
    12e8:	fa dd       	rcall	.-1036   	; 0xede <ADC_StartReading>
    12ea:	86 e0       	ldi	r24, 0x06	; 6
    12ec:	30 c0       	rjmp	.+96     	; 0x134e <ButtonManage+0x3da>
    12ee:	01 15       	cp	r16, r1
    12f0:	11 05       	cpc	r17, r1
                    ADC_SetupChannel(4);
                    ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_CHANNEL4);
    12f2:	61 f0       	breq	.+24     	; 0x130c <ButtonManage+0x398>
    12f4:	85 98       	cbi	0x10, 5	; 16
    12f6:	80 91 7e 00 	lds	r24, 0x007E
                    menuState=menuState_x;
    12fa:	80 62       	ori	r24, 0x20	; 32
    12fc:	80 93 7e 00 	sts	0x007E, r24
                }
                if (rightClick) {
    1300:	85 e4       	ldi	r24, 0x45	; 69
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	ec dd       	rcall	.-1064   	; 0xede <ADC_StartReading>
				DDRF  &= ~(1 << ChannelIndex);
				DIDR0 |=  (1 << ChannelIndex);
				#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
				if (ChannelIndex < 8)
				{
					DDRF  &= ~(1 << ChannelIndex);
    1306:	85 e0       	ldi	r24, 0x05	; 5
					DIDR0 |=  (1 << ChannelIndex);
    1308:	80 93 6d 01 	sts	0x016D, r24
    130c:	cd 2b       	or	r28, r29
    130e:	09 f4       	brne	.+2      	; 0x1312 <ButtonManage+0x39e>
    1310:	94 c0       	rjmp	.+296    	; 0x143a <ButtonManage+0x4c6>
                    ADC_SetupChannel(6);
                    ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_CHANNEL6);
    1312:	87 98       	cbi	0x10, 7	; 16
    1314:	80 91 7e 00 	lds	r24, 0x007E
    1318:	80 68       	ori	r24, 0x80	; 128
                    menuState=menuState_z;
    131a:	80 93 7e 00 	sts	0x007E, r24
                }
                break;
            case menuState_z:
                if (leftClick) {
    131e:	87 e4       	ldi	r24, 0x47	; 71
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	dd dd       	rcall	.-1094   	; 0xede <ADC_StartReading>
				DDRF  &= ~(1 << ChannelIndex);
				DIDR0 |=  (1 << ChannelIndex);
				#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
				if (ChannelIndex < 8)
				{
					DDRF  &= ~(1 << ChannelIndex);
    1324:	87 e0       	ldi	r24, 0x07	; 7
					DIDR0 |=  (1 << ChannelIndex);
    1326:	13 c0       	rjmp	.+38     	; 0x134e <ButtonManage+0x3da>
    1328:	01 15       	cp	r16, r1
    132a:	11 05       	cpc	r17, r1
    132c:	61 f0       	breq	.+24     	; 0x1346 <ButtonManage+0x3d2>
    132e:	86 98       	cbi	0x10, 6	; 16
                    ADC_SetupChannel(5);
                    ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_CHANNEL5);
    1330:	80 91 7e 00 	lds	r24, 0x007E
    1334:	80 64       	ori	r24, 0x40	; 64
    1336:	80 93 7e 00 	sts	0x007E, r24
                    menuState=menuState_y;
    133a:	86 e4       	ldi	r24, 0x46	; 70
    133c:	90 e0       	ldi	r25, 0x00	; 0
                }
                if (rightClick) {
    133e:	cf dd       	rcall	.-1122   	; 0xede <ADC_StartReading>
    1340:	86 e0       	ldi	r24, 0x06	; 6
    1342:	80 93 6d 01 	sts	0x016D, r24
    1346:	cd 2b       	or	r28, r29
    1348:	09 f4       	brne	.+2      	; 0x134c <ButtonManage+0x3d8>
    134a:	77 c0       	rjmp	.+238    	; 0x143a <ButtonManage+0x4c6>
    134c:	83 e0       	ldi	r24, 0x03	; 3
    134e:	80 93 6d 01 	sts	0x016D, r24
                    ADC_SetupChannel(7);
                    ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_CHANNEL7);
    1352:	38 c0       	rjmp	.+112    	; 0x13c4 <ButtonManage+0x450>
    1354:	e1 14       	cp	r14, r1
    1356:	f1 04       	cpc	r15, r1
                    menuState=menuState_pot;
    1358:	39 f0       	breq	.+14     	; 0x1368 <ButtonManage+0x3f4>
    135a:	83 e0       	ldi	r24, 0x03	; 3
                }
                break;
            case menuState_pot:
                if (leftClick) {
    135c:	80 93 6d 01 	sts	0x016D, r24
    1360:	10 92 6f 01 	sts	0x016F, r1
    1364:	10 92 6e 01 	sts	0x016E, r1
    1368:	c1 14       	cp	r12, r1
    136a:	d1 04       	cpc	r13, r1
    136c:	39 f0       	breq	.+14     	; 0x137c <ButtonManage+0x408>
                    ADC_SetupChannel(6);
                    ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_CHANNEL6);
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	80 93 6d 01 	sts	0x016D, r24
    1374:	10 92 6f 01 	sts	0x016F, r1
                    menuState=menuState_z;
    1378:	10 92 6e 01 	sts	0x016E, r1
                }
                if (rightClick) {
    137c:	01 15       	cp	r16, r1
    137e:	11 05       	cpc	r17, r1
    1380:	31 f0       	breq	.+12     	; 0x138e <ButtonManage+0x41a>
                    menuState=menuState_adc;
    1382:	8b e0       	ldi	r24, 0x0B	; 11
    1384:	91 e0       	ldi	r25, 0x01	; 1
    1386:	90 93 6f 01 	sts	0x016F, r25
                }
                break;
            case menuState_buttons:
                if (upClick) {
    138a:	80 93 6e 01 	sts	0x016E, r24
    138e:	20 97       	sbiw	r28, 0x00	; 0
                    menuState=menuState_adc;
    1390:	31 f0       	breq	.+12     	; 0x139e <ButtonManage+0x42a>
    1392:	80 e1       	ldi	r24, 0x10	; 16
    1394:	91 e0       	ldi	r25, 0x01	; 1
                    button = NULL;
    1396:	90 93 6f 01 	sts	0x016F, r25
    139a:	80 93 6e 01 	sts	0x016E, r24
                }
                if (downClick) {
    139e:	a1 14       	cp	r10, r1
    13a0:	b1 04       	cpc	r11, r1
    13a2:	31 f0       	breq	.+12     	; 0x13b0 <ButtonManage+0x43c>
                    menuState=menuState_settings;
    13a4:	86 e1       	ldi	r24, 0x16	; 22
    13a6:	91 e0       	ldi	r25, 0x01	; 1
    13a8:	90 93 6f 01 	sts	0x016F, r25
                    button = NULL;
    13ac:	80 93 6e 01 	sts	0x016E, r24
    13b0:	01 2b       	or	r16, r17
                }
                if (leftClick)
    13b2:	41 f4       	brne	.+16     	; 0x13c4 <ButtonManage+0x450>
    13b4:	cd 2b       	or	r28, r29
    13b6:	31 f4       	brne	.+12     	; 0x13c4 <ButtonManage+0x450>
                    button = "Left";
    13b8:	ef 28       	or	r14, r15
    13ba:	21 f4       	brne	.+8      	; 0x13c4 <ButtonManage+0x450>
    13bc:	cd 28       	or	r12, r13
    13be:	11 f4       	brne	.+4      	; 0x13c4 <ButtonManage+0x450>
    13c0:	ab 28       	or	r10, r11
    13c2:	29 f0       	breq	.+10     	; 0x13ce <ButtonManage+0x45a>
                if (rightClick)
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	80 93 6c 01 	sts	0x016C, r24
                    button = "Right";
    13ca:	80 93 08 01 	sts	0x0108, r24
    13ce:	80 91 6d 01 	lds	r24, 0x016D
    13d2:	84 50       	subi	r24, 0x04	; 4
                if (centerClick)
    13d4:	84 30       	cpi	r24, 0x04	; 4
    13d6:	a0 f5       	brcc	.+104    	; 0x1440 <ButtonManage+0x4cc>
    13d8:	80 91 7a 00 	lds	r24, 0x007A
                    button = "Center";
    13dc:	84 ff       	sbrs	r24, 4
    13de:	fc cf       	rjmp	.-8      	; 0x13d8 <ButtonManage+0x464>
    13e0:	80 91 7a 00 	lds	r24, 0x007A
    13e4:	80 61       	ori	r24, 0x10	; 16
                break;
            default:
                break;
        }

        if (leftClick || rightClick || upClick || downClick || centerClick) {
    13e6:	80 93 7a 00 	sts	0x007A, r24
    13ea:	80 91 78 00 	lds	r24, 0x0078
    13ee:	90 91 79 00 	lds	r25, 0x0079
    13f2:	90 93 0a 01 	sts	0x010A, r25
    13f6:	80 93 09 01 	sts	0x0109, r24
            click = true;
    13fa:	9f 93       	push	r25
    13fc:	8f 93       	push	r24
    13fe:	8d e1       	ldi	r24, 0x1D	; 29
            update = true;
    1400:	91 e0       	ldi	r25, 0x01	; 1
    1402:	9f 93       	push	r25
        }
    }
    switch (menuState) {
    1404:	8f 93       	push	r24
    1406:	80 e7       	ldi	r24, 0x70	; 112
    1408:	91 e0       	ldi	r25, 0x01	; 1
    140a:	9f 93       	push	r25
    140c:	8f 93       	push	r24
			 *          complete and ready to be read out with \ref ADC_GetResult().
			 */
			static inline bool ADC_IsReadingComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool ADC_IsReadingComplete(void)
			{
				return ((ADCSRA & (1 << ADIF)) ? true : false);
    140e:	ef d0       	rcall	.+478    	; 0x15ee <sprintf>
    1410:	0f 90       	pop	r0
        case menuState_x:
        case menuState_y:
        case menuState_z:
        case menuState_pot:
            while (!(ADC_IsReadingComplete())) {};
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
			 *  \return The result of the last ADC conversion as an unsigned value.
			 */
			static inline uint16_t ADC_GetResult(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t ADC_GetResult(void)
			{
				ADCSRA |= (1 << ADIF);
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	80 e7       	ldi	r24, 0x70	; 112
    141e:	91 e0       	ldi	r25, 0x01	; 1
				return ADC;
    1420:	df 91       	pop	r29
    1422:	cf 91       	pop	r28
    1424:	1f 91       	pop	r17
    1426:	0f 91       	pop	r16
            adc_value = ADC_GetResult();
    1428:	ff 90       	pop	r15
    142a:	ef 90       	pop	r14
    142c:	df 90       	pop	r13
    142e:	cf 90       	pop	r12
            sprintf(adcStr, "%d", adc_value);
    1430:	bf 90       	pop	r11
    1432:	af 90       	pop	r10
    1434:	9f 90       	pop	r9
    1436:	8f 90       	pop	r8
    1438:	8e cd       	rjmp	.-1252   	; 0xf56 <LCDnextLine>
    143a:	01 2b       	or	r16, r17
    143c:	19 f6       	brne	.-122    	; 0x13c4 <ButtonManage+0x450>
    143e:	bc cf       	rjmp	.-136    	; 0x13b8 <ButtonManage+0x444>
    1440:	df 91       	pop	r29
    1442:	cf 91       	pop	r28
    1444:	1f 91       	pop	r17
    1446:	0f 91       	pop	r16
            LCDnextLine(adcStr);
    1448:	ff 90       	pop	r15
    144a:	ef 90       	pop	r14
    144c:	df 90       	pop	r13
    144e:	cf 90       	pop	r12
    1450:	bf 90       	pop	r11
    1452:	af 90       	pop	r10
    1454:	9f 90       	pop	r9
    1456:	8f 90       	pop	r8
            break;
        default:
            break;
    }
}
    1458:	08 95       	ret

0000145a <LCDupdate>:
    145a:	80 91 08 01 	lds	r24, 0x0108
    145e:	88 23       	and	r24, r24
    1460:	09 f4       	brne	.+2      	; 0x1464 <LCDupdate+0xa>
    1462:	56 c0       	rjmp	.+172    	; 0x1510 <LCDupdate+0xb6>
    1464:	80 91 6d 01 	lds	r24, 0x016D
    1468:	84 30       	cpi	r24, 0x04	; 4
    146a:	09 f4       	brne	.+2      	; 0x146e <LCDupdate+0x14>
    146c:	3b c0       	rjmp	.+118    	; 0x14e4 <LCDupdate+0x8a>
    146e:	48 f4       	brcc	.+18     	; 0x1482 <LCDupdate+0x28>
        case menuState_z:
        case menuState_pot:
            while (!(ADC_IsReadingComplete())) {};
            adc_value = ADC_GetResult();
            sprintf(adcStr, "%d", adc_value);
            LCDnextLine(adcStr);
    1470:	81 30       	cpi	r24, 0x01	; 1
    1472:	99 f0       	breq	.+38     	; 0x149a <LCDupdate+0x40>
                break;
            default:
                break;
        }

        if (leftClick || rightClick || upClick || downClick || centerClick) {
    1474:	78 f0       	brcs	.+30     	; 0x1494 <LCDupdate+0x3a>
    1476:	82 30       	cpi	r24, 0x02	; 2
    1478:	b1 f0       	breq	.+44     	; 0x14a6 <LCDupdate+0x4c>
            LCDnextLine(adcStr);
            break;
        default:
            break;
    }
}
    147a:	83 30       	cpi	r24, 0x03	; 3
    147c:	09 f0       	breq	.+2      	; 0x1480 <LCDupdate+0x26>
    147e:	46 c0       	rjmp	.+140    	; 0x150c <LCDupdate+0xb2>
    1480:	2d c0       	rjmp	.+90     	; 0x14dc <LCDupdate+0x82>
    1482:	86 30       	cpi	r24, 0x06	; 6
    1484:	a9 f1       	breq	.+106    	; 0x14f0 <LCDupdate+0x96>
    1486:	88 f1       	brcs	.+98     	; 0x14ea <LCDupdate+0x90>
    1488:	87 30       	cpi	r24, 0x07	; 7
    148a:	a9 f1       	breq	.+106    	; 0x14f6 <LCDupdate+0x9c>
    148c:	88 30       	cpi	r24, 0x08	; 8
    148e:	09 f0       	breq	.+2      	; 0x1492 <LCDupdate+0x38>
    1490:	3d c0       	rjmp	.+122    	; 0x150c <LCDupdate+0xb2>
    1492:	34 c0       	rjmp	.+104    	; 0x14fc <LCDupdate+0xa2>

void LCDupdate(void) {
    if (update) {
        switch (menuState) {
            case menuState_init:
                LCDwrite("Hello, Josh!");
    1494:	80 e2       	ldi	r24, 0x20	; 32
    1496:	91 e0       	ldi	r25, 0x01	; 1
    1498:	23 c0       	rjmp	.+70     	; 0x14e0 <LCDupdate+0x86>
                break;
            case menuState_settings:
                LCDwrite("Settings:");
    149a:	8d e2       	ldi	r24, 0x2D	; 45
    149c:	91 e0       	ldi	r25, 0x01	; 1
    149e:	4c dd       	rcall	.-1384   	; 0xf38 <LCDwrite>
    14a0:	87 e3       	ldi	r24, 0x37	; 55
                LCDnextLine("Nothing!");
    14a2:	91 e0       	ldi	r25, 0x01	; 1
    14a4:	32 c0       	rjmp	.+100    	; 0x150a <LCDupdate+0xb0>
    14a6:	80 e4       	ldi	r24, 0x40	; 64
                break;
            case menuState_settings_brightness:
                LCDwrite("S: Brightness");
    14a8:	91 e0       	ldi	r25, 0x01	; 1
    14aa:	46 dd       	rcall	.-1396   	; 0xf38 <LCDwrite>
    14ac:	80 91 07 01 	lds	r24, 0x0107
                sprintf(brightnessStr, "%d", brightness);
    14b0:	1f 92       	push	r1
    14b2:	8f 93       	push	r24
    14b4:	8d e1       	ldi	r24, 0x1D	; 29
    14b6:	91 e0       	ldi	r25, 0x01	; 1
    14b8:	9f 93       	push	r25
    14ba:	8f 93       	push	r24
    14bc:	8a e7       	ldi	r24, 0x7A	; 122
    14be:	91 e0       	ldi	r25, 0x01	; 1
    14c0:	9f 93       	push	r25
    14c2:	8f 93       	push	r24
    14c4:	94 d0       	rcall	.+296    	; 0x15ee <sprintf>
    14c6:	8a e7       	ldi	r24, 0x7A	; 122
    14c8:	91 e0       	ldi	r25, 0x01	; 1
    14ca:	45 dd       	rcall	.-1398   	; 0xf56 <LCDnextLine>
                LCDnextLine(brightnessStr);
    14cc:	1b dd       	rcall	.-1482   	; 0xf04 <LCDbrightnessUpdate>
    14ce:	0f 90       	pop	r0
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
                LCDbrightnessUpdate();
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
                break;
    14d8:	0f 90       	pop	r0
    14da:	18 c0       	rjmp	.+48     	; 0x150c <LCDupdate+0xb2>
    14dc:	8e e4       	ldi	r24, 0x4E	; 78
    14de:	91 e0       	ldi	r25, 0x01	; 1
    14e0:	2b dd       	rcall	.-1450   	; 0xf38 <LCDwrite>
    14e2:	14 c0       	rjmp	.+40     	; 0x150c <LCDupdate+0xb2>
    14e4:	89 e5       	ldi	r24, 0x59	; 89
            case menuState_adc:
                LCDwrite("ADC values");
    14e6:	91 e0       	ldi	r25, 0x01	; 1
    14e8:	fb cf       	rjmp	.-10     	; 0x14e0 <LCDupdate+0x86>
    14ea:	8b e5       	ldi	r24, 0x5B	; 91
    14ec:	91 e0       	ldi	r25, 0x01	; 1
                break;
    14ee:	f8 cf       	rjmp	.-16     	; 0x14e0 <LCDupdate+0x86>
            case menuState_x:
                LCDwrite("X");
    14f0:	8d e5       	ldi	r24, 0x5D	; 93
    14f2:	91 e0       	ldi	r25, 0x01	; 1
    14f4:	f5 cf       	rjmp	.-22     	; 0x14e0 <LCDupdate+0x86>
                break;
            case menuState_y:
                LCDwrite("Y");
    14f6:	8f e5       	ldi	r24, 0x5F	; 95
    14f8:	91 e0       	ldi	r25, 0x01	; 1
    14fa:	f2 cf       	rjmp	.-28     	; 0x14e0 <LCDupdate+0x86>
                break;
            case menuState_z:
                LCDwrite("Z");
    14fc:	83 e6       	ldi	r24, 0x63	; 99
    14fe:	91 e0       	ldi	r25, 0x01	; 1
    1500:	1b dd       	rcall	.-1482   	; 0xf38 <LCDwrite>
                break;
            case menuState_pot:
                LCDwrite("Pot");
    1502:	80 91 6e 01 	lds	r24, 0x016E
    1506:	90 91 6f 01 	lds	r25, 0x016F
                break;
            case menuState_buttons:
                LCDwrite("Buttons!");
    150a:	25 dd       	rcall	.-1462   	; 0xf56 <LCDnextLine>
    150c:	10 92 08 01 	sts	0x0108, r1
                LCDnextLine(button);
    1510:	08 95       	ret

00001512 <LCDstart>:
    1512:	2f ef       	ldi	r18, 0xFF	; 255
    1514:	89 e6       	ldi	r24, 0x69	; 105
    1516:	98 e1       	ldi	r25, 0x18	; 24
    1518:	21 50       	subi	r18, 0x01	; 1
    151a:	80 40       	sbci	r24, 0x00	; 0
                break;
            default:
                break;
        }
        update = false;
    151c:	90 40       	sbci	r25, 0x00	; 0
    151e:	e1 f7       	brne	.-8      	; 0x1518 <LCDstart+0x6>
    1520:	00 c0       	rjmp	.+0      	; 0x1522 <LCDstart+0x10>
    1522:	00 00       	nop
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
    1524:	83 e3       	ldi	r24, 0x33	; 51
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	90 93 cd 00 	sts	0x00CD, r25
    152c:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
    1530:	86 e0       	ldi	r24, 0x06	; 6
    1532:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
    1536:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
    153a:	88 e1       	ldi	r24, 0x18	; 24
    153c:	80 93 c9 00 	sts	0x00C9, r24

				DDRD  |= (1 << 3);
    1540:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
    1542:	5a 9a       	sbi	0x0b, 2	; 11
static enum menuStates_t menuState=menuState_init;

void LCDstart(void) {
    _delay_ms(1000);
    Serial_Init(9600, false);
    LCDupdate();
    1544:	8a df       	rcall	.-236    	; 0x145a <LCDupdate>
    1546:	8f e0       	ldi	r24, 0x0F	; 15
    brightness = 15;
    1548:	80 93 07 01 	sts	0x0107, r24
    154c:	db cc       	rjmp	.-1610   	; 0xf04 <LCDbrightnessUpdate>

0000154e <__prologue_saves__>:
    LCDbrightnessUpdate();
    154e:	2f 92       	push	r2
    1550:	3f 92       	push	r3
    1552:	4f 92       	push	r4
    1554:	5f 92       	push	r5
    1556:	6f 92       	push	r6
    1558:	7f 92       	push	r7
    155a:	8f 92       	push	r8
    155c:	9f 92       	push	r9
    155e:	af 92       	push	r10
    1560:	bf 92       	push	r11
    1562:	cf 92       	push	r12
    1564:	df 92       	push	r13
    1566:	ef 92       	push	r14
    1568:	ff 92       	push	r15
    156a:	0f 93       	push	r16
    156c:	1f 93       	push	r17
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
    1576:	ca 1b       	sub	r28, r26
    1578:	db 0b       	sbc	r29, r27
    157a:	0f b6       	in	r0, 0x3f	; 63
    157c:	f8 94       	cli
    157e:	de bf       	out	0x3e, r29	; 62
    1580:	0f be       	out	0x3f, r0	; 63
    1582:	cd bf       	out	0x3d, r28	; 61
    1584:	09 94       	ijmp

00001586 <__epilogue_restores__>:
    1586:	2a 88       	ldd	r2, Y+18	; 0x12
    1588:	39 88       	ldd	r3, Y+17	; 0x11
    158a:	48 88       	ldd	r4, Y+16	; 0x10
    158c:	5f 84       	ldd	r5, Y+15	; 0x0f
    158e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1590:	7d 84       	ldd	r7, Y+13	; 0x0d
    1592:	8c 84       	ldd	r8, Y+12	; 0x0c
    1594:	9b 84       	ldd	r9, Y+11	; 0x0b
    1596:	aa 84       	ldd	r10, Y+10	; 0x0a
    1598:	b9 84       	ldd	r11, Y+9	; 0x09
    159a:	c8 84       	ldd	r12, Y+8	; 0x08
    159c:	df 80       	ldd	r13, Y+7	; 0x07
    159e:	ee 80       	ldd	r14, Y+6	; 0x06
    15a0:	fd 80       	ldd	r15, Y+5	; 0x05
    15a2:	0c 81       	ldd	r16, Y+4	; 0x04
    15a4:	1b 81       	ldd	r17, Y+3	; 0x03
    15a6:	aa 81       	ldd	r26, Y+2	; 0x02
    15a8:	b9 81       	ldd	r27, Y+1	; 0x01
    15aa:	ce 0f       	add	r28, r30
    15ac:	d1 1d       	adc	r29, r1
    15ae:	0f b6       	in	r0, 0x3f	; 63
    15b0:	f8 94       	cli
    15b2:	de bf       	out	0x3e, r29	; 62
    15b4:	0f be       	out	0x3f, r0	; 63
    15b6:	cd bf       	out	0x3d, r28	; 61
    15b8:	ed 01       	movw	r28, r26
    15ba:	08 95       	ret

000015bc <__clzsi2>:
    15bc:	06 d0       	rcall	.+12     	; 0x15ca <__clzhi2>
    15be:	84 ff       	sbrs	r24, 4
    15c0:	08 95       	ret
    15c2:	cb 01       	movw	r24, r22
    15c4:	02 d0       	rcall	.+4      	; 0x15ca <__clzhi2>
    15c6:	80 5f       	subi	r24, 0xF0	; 240
    15c8:	08 95       	ret

000015ca <__clzhi2>:
    15ca:	aa 27       	eor	r26, r26
    15cc:	99 23       	and	r25, r25
    15ce:	29 f4       	brne	.+10     	; 0x15da <__clzhi2+0x10>
    15d0:	a8 5f       	subi	r26, 0xF8	; 248
    15d2:	98 2b       	or	r25, r24
    15d4:	11 f4       	brne	.+4      	; 0x15da <__clzhi2+0x10>
    15d6:	80 e1       	ldi	r24, 0x10	; 16
    15d8:	08 95       	ret
    15da:	90 31       	cpi	r25, 0x10	; 16
    15dc:	18 f4       	brcc	.+6      	; 0x15e4 <__clzhi2+0x1a>
    15de:	ad 5f       	subi	r26, 0xFD	; 253
    15e0:	92 95       	swap	r25
    15e2:	a3 95       	inc	r26
    15e4:	99 0f       	add	r25, r25
    15e6:	e8 f7       	brcc	.-6      	; 0x15e2 <__clzhi2+0x18>
    15e8:	8a 2f       	mov	r24, r26
    15ea:	99 27       	eor	r25, r25
    15ec:	08 95       	ret

000015ee <sprintf>:
    15ee:	a0 e1       	ldi	r26, 0x10	; 16
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	ec ef       	ldi	r30, 0xFC	; 252
    15f4:	fa e0       	ldi	r31, 0x0A	; 10
    15f6:	b9 cf       	rjmp	.-142    	; 0x156a <__prologue_saves__+0x1c>
    15f8:	0f 89       	ldd	r16, Y+23	; 0x17
    15fa:	18 8d       	ldd	r17, Y+24	; 0x18
    15fc:	86 e0       	ldi	r24, 0x06	; 6
    15fe:	8c 83       	std	Y+4, r24	; 0x04
    1600:	1a 83       	std	Y+2, r17	; 0x02
    1602:	09 83       	std	Y+1, r16	; 0x01
    1604:	8f ef       	ldi	r24, 0xFF	; 255
    1606:	9f e7       	ldi	r25, 0x7F	; 127
    1608:	9e 83       	std	Y+6, r25	; 0x06
    160a:	8d 83       	std	Y+5, r24	; 0x05
    160c:	ae 01       	movw	r20, r28
    160e:	45 5e       	subi	r20, 0xE5	; 229
    1610:	5f 4f       	sbci	r21, 0xFF	; 255
    1612:	58 8b       	std	Y+16, r21	; 0x10
    1614:	4f 87       	std	Y+15, r20	; 0x0f
    1616:	69 8d       	ldd	r22, Y+25	; 0x19
    1618:	7a 8d       	ldd	r23, Y+26	; 0x1a
    161a:	ce 01       	movw	r24, r28
    161c:	01 96       	adiw	r24, 0x01	; 1
    161e:	08 d0       	rcall	.+16     	; 0x1630 <vfprintf>
    1620:	ef 81       	ldd	r30, Y+7	; 0x07
    1622:	f8 85       	ldd	r31, Y+8	; 0x08
    1624:	e0 0f       	add	r30, r16
    1626:	f1 1f       	adc	r31, r17
    1628:	10 82       	st	Z, r1
    162a:	60 96       	adiw	r28, 0x10	; 16
    162c:	e4 e0       	ldi	r30, 0x04	; 4
    162e:	b9 cf       	rjmp	.-142    	; 0x15a2 <__epilogue_restores__+0x1c>

00001630 <vfprintf>:
    1630:	ac e0       	ldi	r26, 0x0C	; 12
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	ed e1       	ldi	r30, 0x1D	; 29
    1636:	fb e0       	ldi	r31, 0x0B	; 11
    1638:	8a cf       	rjmp	.-236    	; 0x154e <__prologue_saves__>
    163a:	7c 01       	movw	r14, r24
    163c:	6b 01       	movw	r12, r22
    163e:	8a 01       	movw	r16, r20
    1640:	fc 01       	movw	r30, r24
    1642:	17 82       	std	Z+7, r1	; 0x07
    1644:	16 82       	std	Z+6, r1	; 0x06
    1646:	83 81       	ldd	r24, Z+3	; 0x03
    1648:	81 ff       	sbrs	r24, 1
    164a:	ba c1       	rjmp	.+884    	; 0x19c0 <vfprintf+0x390>
    164c:	88 24       	eor	r8, r8
    164e:	83 94       	inc	r8
    1650:	91 2c       	mov	r9, r1
    1652:	8c 0e       	add	r8, r28
    1654:	9d 1e       	adc	r9, r29
    1656:	f7 01       	movw	r30, r14
    1658:	93 81       	ldd	r25, Z+3	; 0x03
    165a:	f6 01       	movw	r30, r12
    165c:	93 fd       	sbrc	r25, 3
    165e:	85 91       	lpm	r24, Z+
    1660:	93 ff       	sbrs	r25, 3
    1662:	81 91       	ld	r24, Z+
    1664:	6f 01       	movw	r12, r30
    1666:	88 23       	and	r24, r24
    1668:	09 f4       	brne	.+2      	; 0x166c <vfprintf+0x3c>
    166a:	a6 c1       	rjmp	.+844    	; 0x19b8 <vfprintf+0x388>
    166c:	85 32       	cpi	r24, 0x25	; 37
    166e:	39 f4       	brne	.+14     	; 0x167e <vfprintf+0x4e>
    1670:	93 fd       	sbrc	r25, 3
    1672:	85 91       	lpm	r24, Z+
    1674:	93 ff       	sbrs	r25, 3
    1676:	81 91       	ld	r24, Z+
    1678:	6f 01       	movw	r12, r30
    167a:	85 32       	cpi	r24, 0x25	; 37
    167c:	21 f4       	brne	.+8      	; 0x1686 <vfprintf+0x56>
    167e:	b7 01       	movw	r22, r14
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	ba d1       	rcall	.+884    	; 0x19f8 <fputc>
    1684:	e8 cf       	rjmp	.-48     	; 0x1656 <vfprintf+0x26>
    1686:	71 2c       	mov	r7, r1
    1688:	31 2c       	mov	r3, r1
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	20 32       	cpi	r18, 0x20	; 32
    168e:	a8 f4       	brcc	.+42     	; 0x16ba <vfprintf+0x8a>
    1690:	8b 32       	cpi	r24, 0x2B	; 43
    1692:	61 f0       	breq	.+24     	; 0x16ac <vfprintf+0x7c>
    1694:	28 f4       	brcc	.+10     	; 0x16a0 <vfprintf+0x70>
    1696:	80 32       	cpi	r24, 0x20	; 32
    1698:	51 f0       	breq	.+20     	; 0x16ae <vfprintf+0x7e>
    169a:	83 32       	cpi	r24, 0x23	; 35
    169c:	71 f4       	brne	.+28     	; 0x16ba <vfprintf+0x8a>
    169e:	0b c0       	rjmp	.+22     	; 0x16b6 <vfprintf+0x86>
    16a0:	8d 32       	cpi	r24, 0x2D	; 45
    16a2:	39 f0       	breq	.+14     	; 0x16b2 <vfprintf+0x82>
    16a4:	80 33       	cpi	r24, 0x30	; 48
    16a6:	49 f4       	brne	.+18     	; 0x16ba <vfprintf+0x8a>
    16a8:	21 60       	ori	r18, 0x01	; 1
    16aa:	28 c0       	rjmp	.+80     	; 0x16fc <vfprintf+0xcc>
    16ac:	22 60       	ori	r18, 0x02	; 2
    16ae:	24 60       	ori	r18, 0x04	; 4
    16b0:	25 c0       	rjmp	.+74     	; 0x16fc <vfprintf+0xcc>
    16b2:	28 60       	ori	r18, 0x08	; 8
    16b4:	23 c0       	rjmp	.+70     	; 0x16fc <vfprintf+0xcc>
    16b6:	20 61       	ori	r18, 0x10	; 16
    16b8:	21 c0       	rjmp	.+66     	; 0x16fc <vfprintf+0xcc>
    16ba:	27 fd       	sbrc	r18, 7
    16bc:	27 c0       	rjmp	.+78     	; 0x170c <vfprintf+0xdc>
    16be:	38 2f       	mov	r19, r24
    16c0:	30 53       	subi	r19, 0x30	; 48
    16c2:	3a 30       	cpi	r19, 0x0A	; 10
    16c4:	78 f4       	brcc	.+30     	; 0x16e4 <vfprintf+0xb4>
    16c6:	26 ff       	sbrs	r18, 6
    16c8:	06 c0       	rjmp	.+12     	; 0x16d6 <vfprintf+0xa6>
    16ca:	fa e0       	ldi	r31, 0x0A	; 10
    16cc:	7f 9e       	mul	r7, r31
    16ce:	30 0d       	add	r19, r0
    16d0:	11 24       	eor	r1, r1
    16d2:	73 2e       	mov	r7, r19
    16d4:	13 c0       	rjmp	.+38     	; 0x16fc <vfprintf+0xcc>
    16d6:	8a e0       	ldi	r24, 0x0A	; 10
    16d8:	38 9e       	mul	r3, r24
    16da:	30 0d       	add	r19, r0
    16dc:	11 24       	eor	r1, r1
    16de:	33 2e       	mov	r3, r19
    16e0:	20 62       	ori	r18, 0x20	; 32
    16e2:	0c c0       	rjmp	.+24     	; 0x16fc <vfprintf+0xcc>
    16e4:	8e 32       	cpi	r24, 0x2E	; 46
    16e6:	21 f4       	brne	.+8      	; 0x16f0 <vfprintf+0xc0>
    16e8:	26 fd       	sbrc	r18, 6
    16ea:	66 c1       	rjmp	.+716    	; 0x19b8 <vfprintf+0x388>
    16ec:	20 64       	ori	r18, 0x40	; 64
    16ee:	06 c0       	rjmp	.+12     	; 0x16fc <vfprintf+0xcc>
    16f0:	8c 36       	cpi	r24, 0x6C	; 108
    16f2:	11 f4       	brne	.+4      	; 0x16f8 <vfprintf+0xc8>
    16f4:	20 68       	ori	r18, 0x80	; 128
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <vfprintf+0xcc>
    16f8:	88 36       	cpi	r24, 0x68	; 104
    16fa:	41 f4       	brne	.+16     	; 0x170c <vfprintf+0xdc>
    16fc:	f6 01       	movw	r30, r12
    16fe:	93 fd       	sbrc	r25, 3
    1700:	85 91       	lpm	r24, Z+
    1702:	93 ff       	sbrs	r25, 3
    1704:	81 91       	ld	r24, Z+
    1706:	6f 01       	movw	r12, r30
    1708:	81 11       	cpse	r24, r1
    170a:	c0 cf       	rjmp	.-128    	; 0x168c <vfprintf+0x5c>
    170c:	98 2f       	mov	r25, r24
    170e:	95 54       	subi	r25, 0x45	; 69
    1710:	93 30       	cpi	r25, 0x03	; 3
    1712:	18 f0       	brcs	.+6      	; 0x171a <vfprintf+0xea>
    1714:	90 52       	subi	r25, 0x20	; 32
    1716:	93 30       	cpi	r25, 0x03	; 3
    1718:	28 f4       	brcc	.+10     	; 0x1724 <vfprintf+0xf4>
    171a:	0c 5f       	subi	r16, 0xFC	; 252
    171c:	1f 4f       	sbci	r17, 0xFF	; 255
    171e:	ff e3       	ldi	r31, 0x3F	; 63
    1720:	f9 83       	std	Y+1, r31	; 0x01
    1722:	0d c0       	rjmp	.+26     	; 0x173e <vfprintf+0x10e>
    1724:	83 36       	cpi	r24, 0x63	; 99
    1726:	31 f0       	breq	.+12     	; 0x1734 <vfprintf+0x104>
    1728:	83 37       	cpi	r24, 0x73	; 115
    172a:	71 f0       	breq	.+28     	; 0x1748 <vfprintf+0x118>
    172c:	83 35       	cpi	r24, 0x53	; 83
    172e:	09 f0       	breq	.+2      	; 0x1732 <vfprintf+0x102>
    1730:	5a c0       	rjmp	.+180    	; 0x17e6 <vfprintf+0x1b6>
    1732:	22 c0       	rjmp	.+68     	; 0x1778 <vfprintf+0x148>
    1734:	f8 01       	movw	r30, r16
    1736:	80 81       	ld	r24, Z
    1738:	89 83       	std	Y+1, r24	; 0x01
    173a:	0e 5f       	subi	r16, 0xFE	; 254
    173c:	1f 4f       	sbci	r17, 0xFF	; 255
    173e:	66 24       	eor	r6, r6
    1740:	63 94       	inc	r6
    1742:	71 2c       	mov	r7, r1
    1744:	54 01       	movw	r10, r8
    1746:	14 c0       	rjmp	.+40     	; 0x1770 <vfprintf+0x140>
    1748:	28 01       	movw	r4, r16
    174a:	f2 e0       	ldi	r31, 0x02	; 2
    174c:	4f 0e       	add	r4, r31
    174e:	51 1c       	adc	r5, r1
    1750:	f8 01       	movw	r30, r16
    1752:	a0 80       	ld	r10, Z
    1754:	b1 80       	ldd	r11, Z+1	; 0x01
    1756:	26 ff       	sbrs	r18, 6
    1758:	03 c0       	rjmp	.+6      	; 0x1760 <vfprintf+0x130>
    175a:	67 2d       	mov	r22, r7
    175c:	70 e0       	ldi	r23, 0x00	; 0
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <vfprintf+0x134>
    1760:	6f ef       	ldi	r22, 0xFF	; 255
    1762:	7f ef       	ldi	r23, 0xFF	; 255
    1764:	c5 01       	movw	r24, r10
    1766:	2c 87       	std	Y+12, r18	; 0x0c
    1768:	3c d1       	rcall	.+632    	; 0x19e2 <strnlen>
    176a:	3c 01       	movw	r6, r24
    176c:	82 01       	movw	r16, r4
    176e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1770:	6f e7       	ldi	r22, 0x7F	; 127
    1772:	26 2e       	mov	r2, r22
    1774:	22 22       	and	r2, r18
    1776:	17 c0       	rjmp	.+46     	; 0x17a6 <vfprintf+0x176>
    1778:	28 01       	movw	r4, r16
    177a:	f2 e0       	ldi	r31, 0x02	; 2
    177c:	4f 0e       	add	r4, r31
    177e:	51 1c       	adc	r5, r1
    1780:	f8 01       	movw	r30, r16
    1782:	a0 80       	ld	r10, Z
    1784:	b1 80       	ldd	r11, Z+1	; 0x01
    1786:	26 ff       	sbrs	r18, 6
    1788:	03 c0       	rjmp	.+6      	; 0x1790 <vfprintf+0x160>
    178a:	67 2d       	mov	r22, r7
    178c:	70 e0       	ldi	r23, 0x00	; 0
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <vfprintf+0x164>
    1790:	6f ef       	ldi	r22, 0xFF	; 255
    1792:	7f ef       	ldi	r23, 0xFF	; 255
    1794:	c5 01       	movw	r24, r10
    1796:	2c 87       	std	Y+12, r18	; 0x0c
    1798:	19 d1       	rcall	.+562    	; 0x19cc <strnlen_P>
    179a:	3c 01       	movw	r6, r24
    179c:	2c 85       	ldd	r18, Y+12	; 0x0c
    179e:	50 e8       	ldi	r21, 0x80	; 128
    17a0:	25 2e       	mov	r2, r21
    17a2:	22 2a       	or	r2, r18
    17a4:	82 01       	movw	r16, r4
    17a6:	23 fc       	sbrc	r2, 3
    17a8:	1a c0       	rjmp	.+52     	; 0x17de <vfprintf+0x1ae>
    17aa:	05 c0       	rjmp	.+10     	; 0x17b6 <vfprintf+0x186>
    17ac:	b7 01       	movw	r22, r14
    17ae:	80 e2       	ldi	r24, 0x20	; 32
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	22 d1       	rcall	.+580    	; 0x19f8 <fputc>
    17b4:	3a 94       	dec	r3
    17b6:	83 2d       	mov	r24, r3
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	68 16       	cp	r6, r24
    17bc:	79 06       	cpc	r7, r25
    17be:	b0 f3       	brcs	.-20     	; 0x17ac <vfprintf+0x17c>
    17c0:	0e c0       	rjmp	.+28     	; 0x17de <vfprintf+0x1ae>
    17c2:	f5 01       	movw	r30, r10
    17c4:	27 fc       	sbrc	r2, 7
    17c6:	85 91       	lpm	r24, Z+
    17c8:	27 fe       	sbrs	r2, 7
    17ca:	81 91       	ld	r24, Z+
    17cc:	5f 01       	movw	r10, r30
    17ce:	b7 01       	movw	r22, r14
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	12 d1       	rcall	.+548    	; 0x19f8 <fputc>
    17d4:	31 10       	cpse	r3, r1
    17d6:	3a 94       	dec	r3
    17d8:	f1 e0       	ldi	r31, 0x01	; 1
    17da:	6f 1a       	sub	r6, r31
    17dc:	71 08       	sbc	r7, r1
    17de:	61 14       	cp	r6, r1
    17e0:	71 04       	cpc	r7, r1
    17e2:	79 f7       	brne	.-34     	; 0x17c2 <vfprintf+0x192>
    17e4:	e6 c0       	rjmp	.+460    	; 0x19b2 <vfprintf+0x382>
    17e6:	84 36       	cpi	r24, 0x64	; 100
    17e8:	11 f0       	breq	.+4      	; 0x17ee <vfprintf+0x1be>
    17ea:	89 36       	cpi	r24, 0x69	; 105
    17ec:	39 f5       	brne	.+78     	; 0x183c <vfprintf+0x20c>
    17ee:	f8 01       	movw	r30, r16
    17f0:	27 ff       	sbrs	r18, 7
    17f2:	07 c0       	rjmp	.+14     	; 0x1802 <vfprintf+0x1d2>
    17f4:	60 81       	ld	r22, Z
    17f6:	71 81       	ldd	r23, Z+1	; 0x01
    17f8:	82 81       	ldd	r24, Z+2	; 0x02
    17fa:	93 81       	ldd	r25, Z+3	; 0x03
    17fc:	0c 5f       	subi	r16, 0xFC	; 252
    17fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1800:	08 c0       	rjmp	.+16     	; 0x1812 <vfprintf+0x1e2>
    1802:	60 81       	ld	r22, Z
    1804:	71 81       	ldd	r23, Z+1	; 0x01
    1806:	88 27       	eor	r24, r24
    1808:	77 fd       	sbrc	r23, 7
    180a:	80 95       	com	r24
    180c:	98 2f       	mov	r25, r24
    180e:	0e 5f       	subi	r16, 0xFE	; 254
    1810:	1f 4f       	sbci	r17, 0xFF	; 255
    1812:	4f e6       	ldi	r20, 0x6F	; 111
    1814:	64 2e       	mov	r6, r20
    1816:	62 22       	and	r6, r18
    1818:	97 ff       	sbrs	r25, 7
    181a:	09 c0       	rjmp	.+18     	; 0x182e <vfprintf+0x1fe>
    181c:	90 95       	com	r25
    181e:	80 95       	com	r24
    1820:	70 95       	com	r23
    1822:	61 95       	neg	r22
    1824:	7f 4f       	sbci	r23, 0xFF	; 255
    1826:	8f 4f       	sbci	r24, 0xFF	; 255
    1828:	9f 4f       	sbci	r25, 0xFF	; 255
    182a:	f0 e8       	ldi	r31, 0x80	; 128
    182c:	6f 2a       	or	r6, r31
    182e:	2a e0       	ldi	r18, 0x0A	; 10
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	a4 01       	movw	r20, r8
    1834:	0d d1       	rcall	.+538    	; 0x1a50 <__ultoa_invert>
    1836:	a8 2e       	mov	r10, r24
    1838:	a8 18       	sub	r10, r8
    183a:	43 c0       	rjmp	.+134    	; 0x18c2 <vfprintf+0x292>
    183c:	85 37       	cpi	r24, 0x75	; 117
    183e:	31 f4       	brne	.+12     	; 0x184c <vfprintf+0x21c>
    1840:	3f ee       	ldi	r19, 0xEF	; 239
    1842:	b3 2e       	mov	r11, r19
    1844:	b2 22       	and	r11, r18
    1846:	2a e0       	ldi	r18, 0x0A	; 10
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	24 c0       	rjmp	.+72     	; 0x1894 <vfprintf+0x264>
    184c:	99 ef       	ldi	r25, 0xF9	; 249
    184e:	b9 2e       	mov	r11, r25
    1850:	b2 22       	and	r11, r18
    1852:	8f 36       	cpi	r24, 0x6F	; 111
    1854:	b9 f0       	breq	.+46     	; 0x1884 <vfprintf+0x254>
    1856:	20 f4       	brcc	.+8      	; 0x1860 <vfprintf+0x230>
    1858:	88 35       	cpi	r24, 0x58	; 88
    185a:	09 f0       	breq	.+2      	; 0x185e <vfprintf+0x22e>
    185c:	ad c0       	rjmp	.+346    	; 0x19b8 <vfprintf+0x388>
    185e:	0d c0       	rjmp	.+26     	; 0x187a <vfprintf+0x24a>
    1860:	80 37       	cpi	r24, 0x70	; 112
    1862:	21 f0       	breq	.+8      	; 0x186c <vfprintf+0x23c>
    1864:	88 37       	cpi	r24, 0x78	; 120
    1866:	09 f0       	breq	.+2      	; 0x186a <vfprintf+0x23a>
    1868:	a7 c0       	rjmp	.+334    	; 0x19b8 <vfprintf+0x388>
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <vfprintf+0x240>
    186c:	20 e1       	ldi	r18, 0x10	; 16
    186e:	b2 2a       	or	r11, r18
    1870:	b4 fe       	sbrs	r11, 4
    1872:	0b c0       	rjmp	.+22     	; 0x188a <vfprintf+0x25a>
    1874:	84 e0       	ldi	r24, 0x04	; 4
    1876:	b8 2a       	or	r11, r24
    1878:	08 c0       	rjmp	.+16     	; 0x188a <vfprintf+0x25a>
    187a:	24 ff       	sbrs	r18, 4
    187c:	09 c0       	rjmp	.+18     	; 0x1890 <vfprintf+0x260>
    187e:	e6 e0       	ldi	r30, 0x06	; 6
    1880:	be 2a       	or	r11, r30
    1882:	06 c0       	rjmp	.+12     	; 0x1890 <vfprintf+0x260>
    1884:	28 e0       	ldi	r18, 0x08	; 8
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	05 c0       	rjmp	.+10     	; 0x1894 <vfprintf+0x264>
    188a:	20 e1       	ldi	r18, 0x10	; 16
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	02 c0       	rjmp	.+4      	; 0x1894 <vfprintf+0x264>
    1890:	20 e1       	ldi	r18, 0x10	; 16
    1892:	32 e0       	ldi	r19, 0x02	; 2
    1894:	f8 01       	movw	r30, r16
    1896:	b7 fe       	sbrs	r11, 7
    1898:	07 c0       	rjmp	.+14     	; 0x18a8 <vfprintf+0x278>
    189a:	60 81       	ld	r22, Z
    189c:	71 81       	ldd	r23, Z+1	; 0x01
    189e:	82 81       	ldd	r24, Z+2	; 0x02
    18a0:	93 81       	ldd	r25, Z+3	; 0x03
    18a2:	0c 5f       	subi	r16, 0xFC	; 252
    18a4:	1f 4f       	sbci	r17, 0xFF	; 255
    18a6:	06 c0       	rjmp	.+12     	; 0x18b4 <vfprintf+0x284>
    18a8:	60 81       	ld	r22, Z
    18aa:	71 81       	ldd	r23, Z+1	; 0x01
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	0e 5f       	subi	r16, 0xFE	; 254
    18b2:	1f 4f       	sbci	r17, 0xFF	; 255
    18b4:	a4 01       	movw	r20, r8
    18b6:	cc d0       	rcall	.+408    	; 0x1a50 <__ultoa_invert>
    18b8:	a8 2e       	mov	r10, r24
    18ba:	a8 18       	sub	r10, r8
    18bc:	8f e7       	ldi	r24, 0x7F	; 127
    18be:	68 2e       	mov	r6, r24
    18c0:	6b 20       	and	r6, r11
    18c2:	66 fe       	sbrs	r6, 6
    18c4:	0b c0       	rjmp	.+22     	; 0x18dc <vfprintf+0x2ac>
    18c6:	36 2d       	mov	r19, r6
    18c8:	3e 7f       	andi	r19, 0xFE	; 254
    18ca:	a7 14       	cp	r10, r7
    18cc:	50 f4       	brcc	.+20     	; 0x18e2 <vfprintf+0x2b2>
    18ce:	64 fe       	sbrs	r6, 4
    18d0:	0a c0       	rjmp	.+20     	; 0x18e6 <vfprintf+0x2b6>
    18d2:	62 fc       	sbrc	r6, 2
    18d4:	08 c0       	rjmp	.+16     	; 0x18e6 <vfprintf+0x2b6>
    18d6:	36 2d       	mov	r19, r6
    18d8:	3e 7e       	andi	r19, 0xEE	; 238
    18da:	05 c0       	rjmp	.+10     	; 0x18e6 <vfprintf+0x2b6>
    18dc:	ba 2c       	mov	r11, r10
    18de:	36 2d       	mov	r19, r6
    18e0:	03 c0       	rjmp	.+6      	; 0x18e8 <vfprintf+0x2b8>
    18e2:	ba 2c       	mov	r11, r10
    18e4:	01 c0       	rjmp	.+2      	; 0x18e8 <vfprintf+0x2b8>
    18e6:	b7 2c       	mov	r11, r7
    18e8:	34 ff       	sbrs	r19, 4
    18ea:	0d c0       	rjmp	.+26     	; 0x1906 <vfprintf+0x2d6>
    18ec:	fe 01       	movw	r30, r28
    18ee:	ea 0d       	add	r30, r10
    18f0:	f1 1d       	adc	r31, r1
    18f2:	80 81       	ld	r24, Z
    18f4:	80 33       	cpi	r24, 0x30	; 48
    18f6:	11 f4       	brne	.+4      	; 0x18fc <vfprintf+0x2cc>
    18f8:	39 7e       	andi	r19, 0xE9	; 233
    18fa:	09 c0       	rjmp	.+18     	; 0x190e <vfprintf+0x2de>
    18fc:	32 ff       	sbrs	r19, 2
    18fe:	06 c0       	rjmp	.+12     	; 0x190c <vfprintf+0x2dc>
    1900:	b3 94       	inc	r11
    1902:	b3 94       	inc	r11
    1904:	04 c0       	rjmp	.+8      	; 0x190e <vfprintf+0x2de>
    1906:	83 2f       	mov	r24, r19
    1908:	86 78       	andi	r24, 0x86	; 134
    190a:	09 f0       	breq	.+2      	; 0x190e <vfprintf+0x2de>
    190c:	b3 94       	inc	r11
    190e:	33 fd       	sbrc	r19, 3
    1910:	13 c0       	rjmp	.+38     	; 0x1938 <vfprintf+0x308>
    1912:	30 ff       	sbrs	r19, 0
    1914:	0e c0       	rjmp	.+28     	; 0x1932 <vfprintf+0x302>
    1916:	7a 2c       	mov	r7, r10
    1918:	b3 14       	cp	r11, r3
    191a:	58 f4       	brcc	.+22     	; 0x1932 <vfprintf+0x302>
    191c:	73 0c       	add	r7, r3
    191e:	7b 18       	sub	r7, r11
    1920:	b3 2c       	mov	r11, r3
    1922:	07 c0       	rjmp	.+14     	; 0x1932 <vfprintf+0x302>
    1924:	b7 01       	movw	r22, r14
    1926:	80 e2       	ldi	r24, 0x20	; 32
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	3c 87       	std	Y+12, r19	; 0x0c
    192c:	65 d0       	rcall	.+202    	; 0x19f8 <fputc>
    192e:	b3 94       	inc	r11
    1930:	3c 85       	ldd	r19, Y+12	; 0x0c
    1932:	b3 14       	cp	r11, r3
    1934:	b8 f3       	brcs	.-18     	; 0x1924 <vfprintf+0x2f4>
    1936:	04 c0       	rjmp	.+8      	; 0x1940 <vfprintf+0x310>
    1938:	b3 14       	cp	r11, r3
    193a:	10 f4       	brcc	.+4      	; 0x1940 <vfprintf+0x310>
    193c:	3b 18       	sub	r3, r11
    193e:	01 c0       	rjmp	.+2      	; 0x1942 <vfprintf+0x312>
    1940:	31 2c       	mov	r3, r1
    1942:	34 ff       	sbrs	r19, 4
    1944:	11 c0       	rjmp	.+34     	; 0x1968 <vfprintf+0x338>
    1946:	b7 01       	movw	r22, r14
    1948:	80 e3       	ldi	r24, 0x30	; 48
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	3c 87       	std	Y+12, r19	; 0x0c
    194e:	54 d0       	rcall	.+168    	; 0x19f8 <fputc>
    1950:	3c 85       	ldd	r19, Y+12	; 0x0c
    1952:	32 ff       	sbrs	r19, 2
    1954:	1c c0       	rjmp	.+56     	; 0x198e <vfprintf+0x35e>
    1956:	31 ff       	sbrs	r19, 1
    1958:	03 c0       	rjmp	.+6      	; 0x1960 <vfprintf+0x330>
    195a:	88 e5       	ldi	r24, 0x58	; 88
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	02 c0       	rjmp	.+4      	; 0x1964 <vfprintf+0x334>
    1960:	88 e7       	ldi	r24, 0x78	; 120
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	b7 01       	movw	r22, r14
    1966:	0c c0       	rjmp	.+24     	; 0x1980 <vfprintf+0x350>
    1968:	83 2f       	mov	r24, r19
    196a:	86 78       	andi	r24, 0x86	; 134
    196c:	81 f0       	breq	.+32     	; 0x198e <vfprintf+0x35e>
    196e:	31 fd       	sbrc	r19, 1
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <vfprintf+0x346>
    1972:	80 e2       	ldi	r24, 0x20	; 32
    1974:	01 c0       	rjmp	.+2      	; 0x1978 <vfprintf+0x348>
    1976:	8b e2       	ldi	r24, 0x2B	; 43
    1978:	37 fd       	sbrc	r19, 7
    197a:	8d e2       	ldi	r24, 0x2D	; 45
    197c:	b7 01       	movw	r22, r14
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	3b d0       	rcall	.+118    	; 0x19f8 <fputc>
    1982:	05 c0       	rjmp	.+10     	; 0x198e <vfprintf+0x35e>
    1984:	b7 01       	movw	r22, r14
    1986:	80 e3       	ldi	r24, 0x30	; 48
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	36 d0       	rcall	.+108    	; 0x19f8 <fputc>
    198c:	7a 94       	dec	r7
    198e:	a7 14       	cp	r10, r7
    1990:	c8 f3       	brcs	.-14     	; 0x1984 <vfprintf+0x354>
    1992:	aa 94       	dec	r10
    1994:	f4 01       	movw	r30, r8
    1996:	ea 0d       	add	r30, r10
    1998:	f1 1d       	adc	r31, r1
    199a:	b7 01       	movw	r22, r14
    199c:	80 81       	ld	r24, Z
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	2b d0       	rcall	.+86     	; 0x19f8 <fputc>
    19a2:	a1 10       	cpse	r10, r1
    19a4:	f6 cf       	rjmp	.-20     	; 0x1992 <vfprintf+0x362>
    19a6:	05 c0       	rjmp	.+10     	; 0x19b2 <vfprintf+0x382>
    19a8:	b7 01       	movw	r22, r14
    19aa:	80 e2       	ldi	r24, 0x20	; 32
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	24 d0       	rcall	.+72     	; 0x19f8 <fputc>
    19b0:	3a 94       	dec	r3
    19b2:	31 10       	cpse	r3, r1
    19b4:	f9 cf       	rjmp	.-14     	; 0x19a8 <vfprintf+0x378>
    19b6:	4f ce       	rjmp	.-866    	; 0x1656 <vfprintf+0x26>
    19b8:	f7 01       	movw	r30, r14
    19ba:	26 81       	ldd	r18, Z+6	; 0x06
    19bc:	37 81       	ldd	r19, Z+7	; 0x07
    19be:	02 c0       	rjmp	.+4      	; 0x19c4 <vfprintf+0x394>
    19c0:	2f ef       	ldi	r18, 0xFF	; 255
    19c2:	3f ef       	ldi	r19, 0xFF	; 255
    19c4:	c9 01       	movw	r24, r18
    19c6:	2c 96       	adiw	r28, 0x0c	; 12
    19c8:	e2 e1       	ldi	r30, 0x12	; 18
    19ca:	dd cd       	rjmp	.-1094   	; 0x1586 <__epilogue_restores__>

000019cc <strnlen_P>:
    19cc:	fc 01       	movw	r30, r24
    19ce:	05 90       	lpm	r0, Z+
    19d0:	61 50       	subi	r22, 0x01	; 1
    19d2:	70 40       	sbci	r23, 0x00	; 0
    19d4:	01 10       	cpse	r0, r1
    19d6:	d8 f7       	brcc	.-10     	; 0x19ce <strnlen_P+0x2>
    19d8:	80 95       	com	r24
    19da:	90 95       	com	r25
    19dc:	8e 0f       	add	r24, r30
    19de:	9f 1f       	adc	r25, r31
    19e0:	08 95       	ret

000019e2 <strnlen>:
    19e2:	fc 01       	movw	r30, r24
    19e4:	61 50       	subi	r22, 0x01	; 1
    19e6:	70 40       	sbci	r23, 0x00	; 0
    19e8:	01 90       	ld	r0, Z+
    19ea:	01 10       	cpse	r0, r1
    19ec:	d8 f7       	brcc	.-10     	; 0x19e4 <strnlen+0x2>
    19ee:	80 95       	com	r24
    19f0:	90 95       	com	r25
    19f2:	8e 0f       	add	r24, r30
    19f4:	9f 1f       	adc	r25, r31
    19f6:	08 95       	ret

000019f8 <fputc>:
    19f8:	0f 93       	push	r16
    19fa:	1f 93       	push	r17
    19fc:	cf 93       	push	r28
    19fe:	df 93       	push	r29
    1a00:	8c 01       	movw	r16, r24
    1a02:	eb 01       	movw	r28, r22
    1a04:	8b 81       	ldd	r24, Y+3	; 0x03
    1a06:	81 fd       	sbrc	r24, 1
    1a08:	03 c0       	rjmp	.+6      	; 0x1a10 <fputc+0x18>
    1a0a:	0f ef       	ldi	r16, 0xFF	; 255
    1a0c:	1f ef       	ldi	r17, 0xFF	; 255
    1a0e:	1a c0       	rjmp	.+52     	; 0x1a44 <fputc+0x4c>
    1a10:	82 ff       	sbrs	r24, 2
    1a12:	0d c0       	rjmp	.+26     	; 0x1a2e <fputc+0x36>
    1a14:	2e 81       	ldd	r18, Y+6	; 0x06
    1a16:	3f 81       	ldd	r19, Y+7	; 0x07
    1a18:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a1c:	28 17       	cp	r18, r24
    1a1e:	39 07       	cpc	r19, r25
    1a20:	64 f4       	brge	.+24     	; 0x1a3a <fputc+0x42>
    1a22:	e8 81       	ld	r30, Y
    1a24:	f9 81       	ldd	r31, Y+1	; 0x01
    1a26:	01 93       	st	Z+, r16
    1a28:	f9 83       	std	Y+1, r31	; 0x01
    1a2a:	e8 83       	st	Y, r30
    1a2c:	06 c0       	rjmp	.+12     	; 0x1a3a <fputc+0x42>
    1a2e:	e8 85       	ldd	r30, Y+8	; 0x08
    1a30:	f9 85       	ldd	r31, Y+9	; 0x09
    1a32:	80 2f       	mov	r24, r16
    1a34:	09 95       	icall
    1a36:	89 2b       	or	r24, r25
    1a38:	41 f7       	brne	.-48     	; 0x1a0a <fputc+0x12>
    1a3a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a3c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a3e:	01 96       	adiw	r24, 0x01	; 1
    1a40:	9f 83       	std	Y+7, r25	; 0x07
    1a42:	8e 83       	std	Y+6, r24	; 0x06
    1a44:	c8 01       	movw	r24, r16
    1a46:	df 91       	pop	r29
    1a48:	cf 91       	pop	r28
    1a4a:	1f 91       	pop	r17
    1a4c:	0f 91       	pop	r16
    1a4e:	08 95       	ret

00001a50 <__ultoa_invert>:
    1a50:	fa 01       	movw	r30, r20
    1a52:	aa 27       	eor	r26, r26
    1a54:	28 30       	cpi	r18, 0x08	; 8
    1a56:	51 f1       	breq	.+84     	; 0x1aac <__ultoa_invert+0x5c>
    1a58:	20 31       	cpi	r18, 0x10	; 16
    1a5a:	81 f1       	breq	.+96     	; 0x1abc <__ultoa_invert+0x6c>
    1a5c:	e8 94       	clt
    1a5e:	6f 93       	push	r22
    1a60:	6e 7f       	andi	r22, 0xFE	; 254
    1a62:	6e 5f       	subi	r22, 0xFE	; 254
    1a64:	7f 4f       	sbci	r23, 0xFF	; 255
    1a66:	8f 4f       	sbci	r24, 0xFF	; 255
    1a68:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6a:	af 4f       	sbci	r26, 0xFF	; 255
    1a6c:	b1 e0       	ldi	r27, 0x01	; 1
    1a6e:	3e d0       	rcall	.+124    	; 0x1aec <__ultoa_invert+0x9c>
    1a70:	b4 e0       	ldi	r27, 0x04	; 4
    1a72:	3c d0       	rcall	.+120    	; 0x1aec <__ultoa_invert+0x9c>
    1a74:	67 0f       	add	r22, r23
    1a76:	78 1f       	adc	r23, r24
    1a78:	89 1f       	adc	r24, r25
    1a7a:	9a 1f       	adc	r25, r26
    1a7c:	a1 1d       	adc	r26, r1
    1a7e:	68 0f       	add	r22, r24
    1a80:	79 1f       	adc	r23, r25
    1a82:	8a 1f       	adc	r24, r26
    1a84:	91 1d       	adc	r25, r1
    1a86:	a1 1d       	adc	r26, r1
    1a88:	6a 0f       	add	r22, r26
    1a8a:	71 1d       	adc	r23, r1
    1a8c:	81 1d       	adc	r24, r1
    1a8e:	91 1d       	adc	r25, r1
    1a90:	a1 1d       	adc	r26, r1
    1a92:	20 d0       	rcall	.+64     	; 0x1ad4 <__ultoa_invert+0x84>
    1a94:	09 f4       	brne	.+2      	; 0x1a98 <__ultoa_invert+0x48>
    1a96:	68 94       	set
    1a98:	3f 91       	pop	r19
    1a9a:	2a e0       	ldi	r18, 0x0A	; 10
    1a9c:	26 9f       	mul	r18, r22
    1a9e:	11 24       	eor	r1, r1
    1aa0:	30 19       	sub	r19, r0
    1aa2:	30 5d       	subi	r19, 0xD0	; 208
    1aa4:	31 93       	st	Z+, r19
    1aa6:	de f6       	brtc	.-74     	; 0x1a5e <__ultoa_invert+0xe>
    1aa8:	cf 01       	movw	r24, r30
    1aaa:	08 95       	ret
    1aac:	46 2f       	mov	r20, r22
    1aae:	47 70       	andi	r20, 0x07	; 7
    1ab0:	40 5d       	subi	r20, 0xD0	; 208
    1ab2:	41 93       	st	Z+, r20
    1ab4:	b3 e0       	ldi	r27, 0x03	; 3
    1ab6:	0f d0       	rcall	.+30     	; 0x1ad6 <__ultoa_invert+0x86>
    1ab8:	c9 f7       	brne	.-14     	; 0x1aac <__ultoa_invert+0x5c>
    1aba:	f6 cf       	rjmp	.-20     	; 0x1aa8 <__ultoa_invert+0x58>
    1abc:	46 2f       	mov	r20, r22
    1abe:	4f 70       	andi	r20, 0x0F	; 15
    1ac0:	40 5d       	subi	r20, 0xD0	; 208
    1ac2:	4a 33       	cpi	r20, 0x3A	; 58
    1ac4:	18 f0       	brcs	.+6      	; 0x1acc <__ultoa_invert+0x7c>
    1ac6:	49 5d       	subi	r20, 0xD9	; 217
    1ac8:	31 fd       	sbrc	r19, 1
    1aca:	40 52       	subi	r20, 0x20	; 32
    1acc:	41 93       	st	Z+, r20
    1ace:	02 d0       	rcall	.+4      	; 0x1ad4 <__ultoa_invert+0x84>
    1ad0:	a9 f7       	brne	.-22     	; 0x1abc <__ultoa_invert+0x6c>
    1ad2:	ea cf       	rjmp	.-44     	; 0x1aa8 <__ultoa_invert+0x58>
    1ad4:	b4 e0       	ldi	r27, 0x04	; 4
    1ad6:	a6 95       	lsr	r26
    1ad8:	97 95       	ror	r25
    1ada:	87 95       	ror	r24
    1adc:	77 95       	ror	r23
    1ade:	67 95       	ror	r22
    1ae0:	ba 95       	dec	r27
    1ae2:	c9 f7       	brne	.-14     	; 0x1ad6 <__ultoa_invert+0x86>
    1ae4:	00 97       	sbiw	r24, 0x00	; 0
    1ae6:	61 05       	cpc	r22, r1
    1ae8:	71 05       	cpc	r23, r1
    1aea:	08 95       	ret
    1aec:	9b 01       	movw	r18, r22
    1aee:	ac 01       	movw	r20, r24
    1af0:	0a 2e       	mov	r0, r26
    1af2:	06 94       	lsr	r0
    1af4:	57 95       	ror	r21
    1af6:	47 95       	ror	r20
    1af8:	37 95       	ror	r19
    1afa:	27 95       	ror	r18
    1afc:	ba 95       	dec	r27
    1afe:	c9 f7       	brne	.-14     	; 0x1af2 <__ultoa_invert+0xa2>
    1b00:	62 0f       	add	r22, r18
    1b02:	73 1f       	adc	r23, r19
    1b04:	84 1f       	adc	r24, r20
    1b06:	95 1f       	adc	r25, r21
    1b08:	a0 1d       	adc	r26, r0
    1b0a:	08 95       	ret

00001b0c <_exit>:
    1b0c:	f8 94       	cli

00001b0e <__stop_program>:
    1b0e:	ff cf       	rjmp	.-2      	; 0x1b0e <__stop_program>
