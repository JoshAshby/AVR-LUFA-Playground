
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000080  00800100  00001970  00001a04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001970  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002d  00800180  00800180  00001a84  2**0
                  ALLOC
  3 .stab         00002484  00000000  00000000  00001a84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c5b  00000000  00000000  00003f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  00004b63  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000410  00000000  00000000  00004b85  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006a4a  00000000  00000000  00004f95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001bca  00000000  00000000  0000b9df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002ac9  00000000  00000000  0000d5a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b98  00000000  00000000  00010074  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002c6f  00000000  00000000  00010c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004931  00000000  00000000  0001387b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000780  00000000  00000000  000181ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
       0:	9b c0       	rjmp	.+310    	; 0x138 <__ctors_end>
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
       2:	00 00       	nop
       4:	b5 c0       	rjmp	.+362    	; 0x170 <__bad_interrupt>
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
       6:	00 00       	nop
       8:	b3 c0       	rjmp	.+358    	; 0x170 <__bad_interrupt>
       a:	00 00       	nop
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
       c:	b1 c0       	rjmp	.+354    	; 0x170 <__bad_interrupt>
       e:	00 00       	nop
      10:	af c0       	rjmp	.+350    	; 0x170 <__bad_interrupt>
      12:	00 00       	nop
      14:	ad c0       	rjmp	.+346    	; 0x170 <__bad_interrupt>
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
      16:	00 00       	nop
      18:	ab c0       	rjmp	.+342    	; 0x170 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a9 c0       	rjmp	.+338    	; 0x170 <__bad_interrupt>
      1e:	00 00       	nop
	while (UDCON & (1 << RMWKUP));
      20:	a7 c0       	rjmp	.+334    	; 0x170 <__bad_interrupt>
      22:	00 00       	nop
      24:	a5 c0       	rjmp	.+330    	; 0x170 <__bad_interrupt>
      26:	00 00       	nop
}
      28:	c0 c1       	rjmp	.+896    	; 0x3aa <__vector_10>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
      2a:	00 00       	nop
	USB_Device_ConfigurationNumber  = 0;
      2c:	a1 c0       	rjmp	.+322    	; 0x170 <__bad_interrupt>
      2e:	00 00       	nop

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
      30:	9f c0       	rjmp	.+318    	; 0x170 <__bad_interrupt>
      32:	00 00       	nop
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
      34:	9d c0       	rjmp	.+314    	; 0x170 <__bad_interrupt>
      36:	00 00       	nop
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
      38:	9b c0       	rjmp	.+310    	; 0x170 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	99 c0       	rjmp	.+306    	; 0x170 <__bad_interrupt>
      3e:	00 00       	nop
      40:	97 c0       	rjmp	.+302    	; 0x170 <__bad_interrupt>
      42:	00 00       	nop
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
      44:	95 c0       	rjmp	.+298    	; 0x170 <__bad_interrupt>
      46:	00 00       	nop
      48:	93 c0       	rjmp	.+294    	; 0x170 <__bad_interrupt>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
      4a:	00 00       	nop
      4c:	91 c0       	rjmp	.+290    	; 0x170 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8f c0       	rjmp	.+286    	; 0x170 <__bad_interrupt>
      52:	00 00       	nop
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
      54:	8d c0       	rjmp	.+282    	; 0x170 <__bad_interrupt>
      56:	00 00       	nop
      58:	8b c0       	rjmp	.+278    	; 0x170 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	89 c0       	rjmp	.+274    	; 0x170 <__bad_interrupt>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
      5e:	00 00       	nop
      60:	87 c0       	rjmp	.+270    	; 0x170 <__bad_interrupt>
      62:	00 00       	nop
      64:	85 c0       	rjmp	.+266    	; 0x170 <__bad_interrupt>
      66:	00 00       	nop
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
      68:	83 c0       	rjmp	.+262    	; 0x170 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	81 c0       	rjmp	.+258    	; 0x170 <__bad_interrupt>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
      6e:	00 00       	nop
      70:	7f c0       	rjmp	.+254    	; 0x170 <__bad_interrupt>
      72:	00 00       	nop
      74:	7d c0       	rjmp	.+250    	; 0x170 <__bad_interrupt>

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
      76:	00 00       	nop
      78:	7b c0       	rjmp	.+246    	; 0x170 <__bad_interrupt>
      7a:	00 00       	nop
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
      7c:	79 c0       	rjmp	.+242    	; 0x170 <__bad_interrupt>
      7e:	00 00       	nop
      80:	77 c0       	rjmp	.+238    	; 0x170 <__bad_interrupt>
      82:	00 00       	nop
      84:	75 c0       	rjmp	.+234    	; 0x170 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
      86:	00 00       	nop
      88:	73 c0       	rjmp	.+230    	; 0x170 <__bad_interrupt>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
      8a:	00 00       	nop

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      8c:	71 c0       	rjmp	.+226    	; 0x170 <__bad_interrupt>
      8e:	00 00       	nop
      90:	6f c0       	rjmp	.+222    	; 0x170 <__bad_interrupt>
      92:	00 00       	nop
      94:	6d c0       	rjmp	.+218    	; 0x170 <__bad_interrupt>
      96:	00 00       	nop
      98:	6b c0       	rjmp	.+214    	; 0x170 <__bad_interrupt>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
      9a:	00 00       	nop
      9c:	69 c0       	rjmp	.+210    	; 0x170 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	67 c0       	rjmp	.+206    	; 0x170 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	65 c0       	rjmp	.+202    	; 0x170 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	63 c0       	rjmp	.+198    	; 0x170 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ProductString>:

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      ac:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
      bc:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

000000ca <ManufacturerString>:
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      ca:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
      da:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e4 <LanguageString>:
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
      e4:	04 03 09 04                                         ....

000000e8 <ConfigurationDescriptor>:
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
      e8:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      f8:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     108:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     118:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000126 <DeviceDescriptor>:
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     126:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     136:	dc 01                                               ..

00000138 <__ctors_end>:
     138:	11 24       	eor	r1, r1
     13a:	1f be       	out	0x3f, r1	; 63
     13c:	cf ef       	ldi	r28, 0xFF	; 255
     13e:	da e0       	ldi	r29, 0x0A	; 10
     140:	de bf       	out	0x3e, r29	; 62
     142:	cd bf       	out	0x3d, r28	; 61

00000144 <__do_copy_data>:
     144:	11 e0       	ldi	r17, 0x01	; 1
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b1 e0       	ldi	r27, 0x01	; 1
     14a:	e0 e7       	ldi	r30, 0x70	; 112
     14c:	f9 e1       	ldi	r31, 0x19	; 25
     14e:	02 c0       	rjmp	.+4      	; 0x154 <__do_copy_data+0x10>
     150:	05 90       	lpm	r0, Z+
     152:	0d 92       	st	X+, r0
				ReportSize     -= 2;
     154:	a0 38       	cpi	r26, 0x80	; 128
     156:	b1 07       	cpc	r27, r17
				ReportData     += 2;
     158:	d9 f7       	brne	.-10     	; 0x150 <__do_copy_data+0xc>

0000015a <__do_clear_bss>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e8       	ldi	r26, 0x80	; 128
				break;
     15e:	b1 e0       	ldi	r27, 0x01	; 1

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     160:	01 c0       	rjmp	.+2      	; 0x164 <.do_clear_bss_start>

00000162 <.do_clear_bss_loop>:
     162:	1d 92       	st	X+, r1

00000164 <.do_clear_bss_start>:
     164:	ad 3a       	cpi	r26, 0xAD	; 173
     166:	b1 07       	cpc	r27, r17
     168:	e1 f7       	brne	.-8      	; 0x162 <.do_clear_bss_loop>
     16a:	32 d0       	rcall	.+100    	; 0x1d0 <main>
				ReportSize     -= 1;
     16c:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <_exit>

00000170 <__bad_interrupt>:
				ReportData     += 1;
     170:	47 cf       	rjmp	.-370    	; 0x0 <__vectors>

00000172 <SetupHardware>:
     172:	84 b7       	in	r24, 0x34	; 52
     174:	87 7f       	andi	r24, 0xF7	; 247
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     176:	84 bf       	out	0x34, r24	; 52
     178:	88 e1       	ldi	r24, 0x18	; 24
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	80 93 60 00 	sts	0x0060, r24
     182:	10 92 60 00 	sts	0x0060, r1
     186:	0f be       	out	0x3f, r0	; 63
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	80 e8       	ldi	r24, 0x80	; 128
     18c:	0f b6       	in	r0, 0x3f	; 63
     18e:	f8 94       	cli
     190:	80 93 61 00 	sts	0x0061, r24
     194:	90 93 61 00 	sts	0x0061, r25
     198:	0f be       	out	0x3f, r0	; 63
     19a:	84 b1       	in	r24, 0x04	; 4
     19c:	84 b9       	out	0x04, r24	; 4
     19e:	8a b1       	in	r24, 0x0a	; 10
     1a0:	8a b9       	out	0x0a, r24	; 10
     1a2:	8d b1       	in	r24, 0x0d	; 13
     1a4:	8d b9       	out	0x0d, r24	; 13
     1a6:	85 b1       	in	r24, 0x05	; 5
     1a8:	85 b9       	out	0x05, r24	; 5
     1aa:	8b b1       	in	r24, 0x0b	; 11
     1ac:	8b b9       	out	0x0b, r24	; 11
     1ae:	8e b1       	in	r24, 0x0e	; 14
     1b0:	8e b9       	out	0x0e, r24	; 14
     1b2:	84 ea       	ldi	r24, 0xA4	; 164
     1b4:	80 93 7a 00 	sts	0x007A, r24
     1b8:	ec eb       	ldi	r30, 0xBC	; 188
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
     1bc:	80 81       	ld	r24, Z
     1be:	84 60       	ori	r24, 0x04	; 4
     1c0:	80 83       	st	Z, r24
     1c2:	10 92 b9 00 	sts	0x00B9, r1
     1c6:	8a e0       	ldi	r24, 0x0A	; 10
     1c8:	80 93 b8 00 	sts	0x00B8, r24
     1cc:	0c 94 b0 09 	jmp	0x1360	; 0x1360 <LCDstart>

000001d0 <main>:
     1d0:	d0 df       	rcall	.-96     	; 0x172 <SetupHardware>
     1d2:	78 94       	sei
     1d4:	b9 d5       	rcall	.+2930   	; 0xd48 <ButtonManage>
     1d6:	0e 94 42 09 	call	0x1284	; 0x1284 <LCDupdate>
     1da:	17 d4       	rcall	.+2094   	; 0xa0a <USB_USBTask>
     1dc:	fb cf       	rjmp	.-10     	; 0x1d4 <main+0x4>

000001de <EVENT_USB_Device_Connect>:
     1de:	08 95       	ret

000001e0 <EVENT_USB_Device_Disconnect>:
     1e0:	08 95       	ret

000001e2 <EVENT_USB_Device_ConfigurationChanged>:
     1e2:	42 e0       	ldi	r20, 0x02	; 2
     1e4:	61 ec       	ldi	r22, 0xC1	; 193
     1e6:	82 e0       	ldi	r24, 0x02	; 2
     1e8:	88 d0       	rcall	.+272    	; 0x2fa <Endpoint_ConfigureEndpoint_Prv>
     1ea:	42 e1       	ldi	r20, 0x12	; 18
     1ec:	61 e8       	ldi	r22, 0x81	; 129
     1ee:	83 e0       	ldi	r24, 0x03	; 3
     1f0:	84 d0       	rcall	.+264    	; 0x2fa <Endpoint_ConfigureEndpoint_Prv>
     1f2:	42 e1       	ldi	r20, 0x12	; 18
     1f4:	60 e8       	ldi	r22, 0x80	; 128
     1f6:	84 e0       	ldi	r24, 0x04	; 4
     1f8:	80 d0       	rcall	.+256    	; 0x2fa <Endpoint_ConfigureEndpoint_Prv>
     1fa:	10 92 00 01 	sts	0x0100, r1
     1fe:	10 92 01 01 	sts	0x0101, r1
     202:	10 92 02 01 	sts	0x0102, r1
     206:	10 92 03 01 	sts	0x0103, r1
     20a:	08 95       	ret

0000020c <EVENT_USB_Device_ControlRequest>:
     20c:	80 91 a6 01 	lds	r24, 0x01A6
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     210:	81 32       	cpi	r24, 0x21	; 33
     212:	29 f0       	breq	.+10     	; 0x21e <EVENT_USB_Device_ControlRequest+0x12>
     214:	82 32       	cpi	r24, 0x22	; 34
     216:	49 f1       	breq	.+82     	; 0x26a <EVENT_USB_Device_ControlRequest+0x5e>
     218:	80 32       	cpi	r24, 0x20	; 32
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     21a:	89 f5       	brne	.+98     	; 0x27e <EVENT_USB_Device_ControlRequest+0x72>
     21c:	12 c0       	rjmp	.+36     	; 0x242 <EVENT_USB_Device_ControlRequest+0x36>
     21e:	80 91 a5 01 	lds	r24, 0x01A5
     222:	81 3a       	cpi	r24, 0xA1	; 161
     224:	61 f5       	brne	.+88     	; 0x27e <EVENT_USB_Device_ControlRequest+0x72>
     226:	80 91 e8 00 	lds	r24, 0x00E8
     22a:	87 7f       	andi	r24, 0xF7	; 247
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     22c:	80 93 e8 00 	sts	0x00E8, r24
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     230:	67 e0       	ldi	r22, 0x07	; 7
     232:	70 e0       	ldi	r23, 0x00	; 0
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	91 e0       	ldi	r25, 0x01	; 1
     238:	79 d1       	rcall	.+754    	; 0x52c <Endpoint_Write_Control_Stream_LE>
     23a:	80 91 e8 00 	lds	r24, 0x00E8
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     23e:	8b 77       	andi	r24, 0x7B	; 123
				break;
     240:	11 c0       	rjmp	.+34     	; 0x264 <EVENT_USB_Device_ControlRequest+0x58>
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     242:	80 91 a5 01 	lds	r24, 0x01A5
     246:	81 32       	cpi	r24, 0x21	; 33
				break;
     248:	d1 f4       	brne	.+52     	; 0x27e <EVENT_USB_Device_ControlRequest+0x72>
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     24a:	80 91 e8 00 	lds	r24, 0x00E8
     24e:	87 7f       	andi	r24, 0xF7	; 247
     250:	80 93 e8 00 	sts	0x00E8, r24
     254:	67 e0       	ldi	r22, 0x07	; 7
     256:	70 e0       	ldi	r23, 0x00	; 0
				break;
     258:	80 e0       	ldi	r24, 0x00	; 0
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     25a:	91 e0       	ldi	r25, 0x01	; 1
     25c:	c6 d1       	rcall	.+908    	; 0x5ea <Endpoint_Read_Control_Stream_LE>
     25e:	80 91 e8 00 	lds	r24, 0x00E8
     262:	8e 77       	andi	r24, 0x7E	; 126
				break;
     264:	80 93 e8 00 	sts	0x00E8, r24
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     268:	08 95       	ret
     26a:	80 91 a5 01 	lds	r24, 0x01A5
     26e:	81 32       	cpi	r24, 0x21	; 33
     270:	31 f4       	brne	.+12     	; 0x27e <EVENT_USB_Device_ControlRequest+0x72>
     272:	80 91 e8 00 	lds	r24, 0x00E8
				break;
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     276:	87 7f       	andi	r24, 0xF7	; 247
     278:	80 93 e8 00 	sts	0x00E8, r24
     27c:	75 c0       	rjmp	.+234    	; 0x368 <Endpoint_ClearStatusStage>
     27e:	08 95       	ret

00000280 <CALLBACK_USB_GetDescriptor>:
				break;
     280:	29 2f       	mov	r18, r25
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     282:	33 27       	eor	r19, r19
     284:	22 30       	cpi	r18, 0x02	; 2
     286:	31 05       	cpc	r19, r1
				break;
     288:	39 f0       	breq	.+14     	; 0x298 <CALLBACK_USB_GetDescriptor+0x18>
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     28a:	23 30       	cpi	r18, 0x03	; 3
     28c:	31 05       	cpc	r19, r1
     28e:	49 f0       	breq	.+18     	; 0x2a2 <CALLBACK_USB_GetDescriptor+0x22>
     290:	21 30       	cpi	r18, 0x01	; 1
     292:	31 05       	cpc	r19, r1
				break;
     294:	21 f1       	breq	.+72     	; 0x2de <CALLBACK_USB_GetDescriptor+0x5e>
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     296:	28 c0       	rjmp	.+80     	; 0x2e8 <CALLBACK_USB_GetDescriptor+0x68>
     298:	ee e3       	ldi	r30, 0x3E	; 62
				break;
     29a:	f0 e0       	ldi	r31, 0x00	; 0
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     29c:	88 ee       	ldi	r24, 0xE8	; 232
     29e:	90 e0       	ldi	r25, 0x00	; 0
				break;
     2a0:	27 c0       	rjmp	.+78     	; 0x2f0 <CALLBACK_USB_GetDescriptor+0x70>
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2a2:	99 27       	eor	r25, r25
     2a4:	81 30       	cpi	r24, 0x01	; 1
     2a6:	91 05       	cpc	r25, r1
     2a8:	61 f0       	breq	.+24     	; 0x2c2 <CALLBACK_USB_GetDescriptor+0x42>

				if (ParserData->UsingReportIDs)
     2aa:	82 30       	cpi	r24, 0x02	; 2
     2ac:	91 05       	cpc	r25, r1
     2ae:	81 f0       	breq	.+32     	; 0x2d0 <CALLBACK_USB_GetDescriptor+0x50>
     2b0:	89 2b       	or	r24, r25
     2b2:	d1 f4       	brne	.+52     	; 0x2e8 <CALLBACK_USB_GetDescriptor+0x68>
     2b4:	e4 ee       	ldi	r30, 0xE4	; 228
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	e4 91       	lpm	r30, Z
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	84 ee       	ldi	r24, 0xE4	; 228
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	17 c0       	rjmp	.+46     	; 0x2f0 <CALLBACK_USB_GetDescriptor+0x70>
     2c2:	ea ec       	ldi	r30, 0xCA	; 202
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     2c6:	e4 91       	lpm	r30, Z

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	8a ec       	ldi	r24, 0xCA	; 202
     2cc:	90 e0       	ldi	r25, 0x00	; 0
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     2ce:	10 c0       	rjmp	.+32     	; 0x2f0 <CALLBACK_USB_GetDescriptor+0x70>
     2d0:	ec ea       	ldi	r30, 0xAC	; 172
     2d2:	f0 e0       	ldi	r31, 0x00	; 0
     2d4:	e4 91       	lpm	r30, Z
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	8c ea       	ldi	r24, 0xAC	; 172
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	09 c0       	rjmp	.+18     	; 0x2f0 <CALLBACK_USB_GetDescriptor+0x70>
     2de:	e2 e1       	ldi	r30, 0x12	; 18
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	86 e2       	ldi	r24, 0x26	; 38
     2e4:	91 e0       	ldi	r25, 0x01	; 1
     2e6:	04 c0       	rjmp	.+8      	; 0x2f0 <CALLBACK_USB_GetDescriptor+0x70>
     2e8:	e0 e0       	ldi	r30, 0x00	; 0
     2ea:	f0 e0       	ldi	r31, 0x00	; 0
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	da 01       	movw	r26, r20

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2f2:	8d 93       	st	X+, r24
     2f4:	9c 93       	st	X, r25
     2f6:	cf 01       	movw	r24, r30
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     2f8:	08 95       	ret

000002fa <Endpoint_ConfigureEndpoint_Prv>:
     2fa:	98 2f       	mov	r25, r24
     2fc:	2c c0       	rjmp	.+88     	; 0x356 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     2fe:	90 93 e9 00 	sts	0x00E9, r25
     302:	98 17       	cp	r25, r24
     304:	39 f0       	breq	.+14     	; 0x314 <Endpoint_ConfigureEndpoint_Prv+0x1a>
     306:	70 91 ec 00 	lds	r23, 0x00EC
     30a:	20 91 ed 00 	lds	r18, 0x00ED
     30e:	50 91 f0 00 	lds	r21, 0x00F0
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     312:	03 c0       	rjmp	.+6      	; 0x31a <Endpoint_ConfigureEndpoint_Prv+0x20>
     314:	24 2f       	mov	r18, r20
     316:	76 2f       	mov	r23, r22
     318:	50 e0       	ldi	r21, 0x00	; 0
					}
				}

				ParserData->UsingReportIDs = true;
     31a:	21 fd       	sbrc	r18, 1
     31c:	02 c0       	rjmp	.+4      	; 0x322 <Endpoint_ConfigureEndpoint_Prv+0x28>
     31e:	9f 5f       	subi	r25, 0xFF	; 255
     320:	1a c0       	rjmp	.+52     	; 0x356 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     322:	30 91 eb 00 	lds	r19, 0x00EB

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     326:	3e 7f       	andi	r19, 0xFE	; 254
     328:	30 93 eb 00 	sts	0x00EB, r19
     32c:	30 91 ed 00 	lds	r19, 0x00ED
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     330:	3d 7f       	andi	r19, 0xFD	; 253
     332:	30 93 ed 00 	sts	0x00ED, r19
     336:	30 91 eb 00 	lds	r19, 0x00EB
     33a:	31 60       	ori	r19, 0x01	; 1
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     33c:	30 93 eb 00 	sts	0x00EB, r19
     340:	70 93 ec 00 	sts	0x00EC, r23
     344:	20 93 ed 00 	sts	0x00ED, r18
     348:	50 93 f0 00 	sts	0x00F0, r21
     34c:	20 91 ee 00 	lds	r18, 0x00EE
     350:	27 fd       	sbrc	r18, 7
     352:	e5 cf       	rjmp	.-54     	; 0x31e <Endpoint_ConfigureEndpoint_Prv+0x24>
     354:	07 c0       	rjmp	.+14     	; 0x364 <Endpoint_ConfigureEndpoint_Prv+0x6a>
				break;
     356:	97 30       	cpi	r25, 0x07	; 7
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     358:	90 f2       	brcs	.-92     	; 0x2fe <Endpoint_ConfigureEndpoint_Prv+0x4>
     35a:	8f 70       	andi	r24, 0x0F	; 15
     35c:	80 93 e9 00 	sts	0x00E9, r24
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	08 95       	ret
     364:	80 e0       	ldi	r24, 0x00	; 0
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     366:	08 95       	ret

00000368 <Endpoint_ClearStatusStage>:
     368:	80 91 a5 01 	lds	r24, 0x01A5
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     36c:	87 fd       	sbrc	r24, 7
     36e:	05 c0       	rjmp	.+10     	; 0x37a <Endpoint_ClearStatusStage+0x12>
     370:	80 91 e8 00 	lds	r24, 0x00E8
     374:	80 ff       	sbrs	r24, 0
     376:	0e c0       	rjmp	.+28     	; 0x394 <Endpoint_ClearStatusStage+0x2c>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     378:	12 c0       	rjmp	.+36     	; 0x39e <Endpoint_ClearStatusStage+0x36>
     37a:	80 91 e8 00 	lds	r24, 0x00E8
     37e:	82 fd       	sbrc	r24, 2
     380:	05 c0       	rjmp	.+10     	; 0x38c <Endpoint_ClearStatusStage+0x24>
     382:	80 91 a4 01 	lds	r24, 0x01A4

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     386:	81 11       	cpse	r24, r1
     388:	f8 cf       	rjmp	.-16     	; 0x37a <Endpoint_ClearStatusStage+0x12>
     38a:	08 95       	ret
     38c:	80 91 e8 00 	lds	r24, 0x00E8
     390:	8b 77       	andi	r24, 0x7B	; 123
     392:	08 c0       	rjmp	.+16     	; 0x3a4 <Endpoint_ClearStatusStage+0x3c>
     394:	80 91 a4 01 	lds	r24, 0x01A4
     398:	81 11       	cpse	r24, r1
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     39a:	ea cf       	rjmp	.-44     	; 0x370 <Endpoint_ClearStatusStage+0x8>
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     39c:	08 95       	ret
     39e:	80 91 e8 00 	lds	r24, 0x00E8
     3a2:	8e 77       	andi	r24, 0x7E	; 126
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3a4:	80 93 e8 00 	sts	0x00E8, r24
     3a8:	08 95       	ret

000003aa <__vector_10>:
				}

				CurrCollectionPath->Type       = ReportItemData;
     3aa:	1f 92       	push	r1
     3ac:	0f 92       	push	r0
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     3ae:	0f b6       	in	r0, 0x3f	; 63
     3b0:	0f 92       	push	r0
     3b2:	11 24       	eor	r1, r1
     3b4:	2f 93       	push	r18
     3b6:	3f 93       	push	r19
     3b8:	4f 93       	push	r20
     3ba:	5f 93       	push	r21

				if (UsageListSize)
     3bc:	6f 93       	push	r22
     3be:	7f 93       	push	r23
     3c0:	8f 93       	push	r24
     3c2:	9f 93       	push	r25
     3c4:	af 93       	push	r26
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     3c6:	bf 93       	push	r27
     3c8:	ef 93       	push	r30
     3ca:	ff 93       	push	r31
     3cc:	80 91 e1 00 	lds	r24, 0x00E1
     3d0:	82 ff       	sbrs	r24, 2
     3d2:	0a c0       	rjmp	.+20     	; 0x3e8 <__vector_10+0x3e>
     3d4:	80 91 e2 00 	lds	r24, 0x00E2

					for (uint8_t i = 0; i < UsageListSize; i++)
     3d8:	82 ff       	sbrs	r24, 2
					  UsageList[i] = UsageList[i + 1];
     3da:	06 c0       	rjmp	.+12     	; 0x3e8 <__vector_10+0x3e>
     3dc:	80 91 e1 00 	lds	r24, 0x00E1
     3e0:	8b 7f       	andi	r24, 0xFB	; 251

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
     3e2:	80 93 e1 00 	sts	0x00E1, r24
     3e6:	10 d3       	rcall	.+1568   	; 0xa08 <USB_Event_Stub>
     3e8:	80 91 da 00 	lds	r24, 0x00DA
     3ec:	80 ff       	sbrs	r24, 0
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
     3ee:	1b c0       	rjmp	.+54     	; 0x426 <__vector_10+0x7c>
     3f0:	80 91 d8 00 	lds	r24, 0x00D8
     3f4:	80 ff       	sbrs	r24, 0
     3f6:	17 c0       	rjmp	.+46     	; 0x426 <__vector_10+0x7c>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     3f8:	80 91 da 00 	lds	r24, 0x00DA
     3fc:	8e 7f       	andi	r24, 0xFE	; 254
     3fe:	80 93 da 00 	sts	0x00DA, r24
     402:	80 91 d9 00 	lds	r24, 0x00D9
     406:	19 bc       	out	0x29, r1	; 41
     408:	80 ff       	sbrs	r24, 0
     40a:	0a c0       	rjmp	.+20     	; 0x420 <__vector_10+0x76>
     40c:	82 e0       	ldi	r24, 0x02	; 2
     40e:	89 bd       	out	0x29, r24	; 41
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     410:	09 b4       	in	r0, 0x29	; 41
     412:	00 fe       	sbrs	r0, 0
     414:	fd cf       	rjmp	.-6      	; 0x410 <__vector_10+0x66>
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	80 93 a4 01 	sts	0x01A4, r24
     41c:	e0 de       	rcall	.-576    	; 0x1de <EVENT_USB_Device_Connect>
     41e:	03 c0       	rjmp	.+6      	; 0x426 <__vector_10+0x7c>
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     420:	10 92 a4 01 	sts	0x01A4, r1
     424:	dd de       	rcall	.-582    	; 0x1e0 <EVENT_USB_Device_Disconnect>
     426:	80 91 e1 00 	lds	r24, 0x00E1
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     42a:	80 ff       	sbrs	r24, 0
     42c:	18 c0       	rjmp	.+48     	; 0x45e <__vector_10+0xb4>
				break;
     42e:	80 91 e2 00 	lds	r24, 0x00E2
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     432:	80 ff       	sbrs	r24, 0
     434:	14 c0       	rjmp	.+40     	; 0x45e <__vector_10+0xb4>
     436:	80 91 e2 00 	lds	r24, 0x00E2
     43a:	8e 7f       	andi	r24, 0xFE	; 254
     43c:	80 93 e2 00 	sts	0x00E2, r24
     440:	80 91 e2 00 	lds	r24, 0x00E2
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     444:	80 61       	ori	r24, 0x10	; 16
					NewReportItem.CollectionPath = CurrCollectionPath;
     446:	80 93 e2 00 	sts	0x00E2, r24
     44a:	80 91 d8 00 	lds	r24, 0x00D8
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     44e:	80 62       	ori	r24, 0x20	; 32
     450:	80 93 d8 00 	sts	0x00D8, r24
     454:	19 bc       	out	0x29, r1	; 41

					if (UsageListSize)
     456:	85 e0       	ldi	r24, 0x05	; 5
     458:	80 93 a4 01 	sts	0x01A4, r24
     45c:	d5 d2       	rcall	.+1450   	; 0xa08 <USB_Event_Stub>
     45e:	80 91 e1 00 	lds	r24, 0x00E1
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     462:	84 ff       	sbrs	r24, 4
     464:	2c c0       	rjmp	.+88     	; 0x4be <__vector_10+0x114>
     466:	80 91 e2 00 	lds	r24, 0x00E2
     46a:	84 ff       	sbrs	r24, 4
     46c:	28 c0       	rjmp	.+80     	; 0x4be <__vector_10+0x114>
     46e:	19 bc       	out	0x29, r1	; 41
     470:	82 e0       	ldi	r24, 0x02	; 2
     472:	89 bd       	out	0x29, r24	; 41
     474:	09 b4       	in	r0, 0x29	; 41

						for (uint8_t i = 0; i < UsageListSize; i++)
     476:	00 fe       	sbrs	r0, 0
						  UsageList[i] = UsageList[i + 1];
     478:	fd cf       	rjmp	.-6      	; 0x474 <__vector_10+0xca>
     47a:	80 91 d8 00 	lds	r24, 0x00D8
     47e:	8f 7d       	andi	r24, 0xDF	; 223

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
     480:	80 93 d8 00 	sts	0x00D8, r24
     484:	80 91 e1 00 	lds	r24, 0x00E1
     488:	8f 7e       	andi	r24, 0xEF	; 239
     48a:	80 93 e1 00 	sts	0x00E1, r24
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
     48e:	80 91 e2 00 	lds	r24, 0x00E2
     492:	8f 7e       	andi	r24, 0xEF	; 239
     494:	80 93 e2 00 	sts	0x00E2, r24
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     498:	80 91 e2 00 	lds	r24, 0x00E2
     49c:	81 60       	ori	r24, 0x01	; 1
     49e:	80 93 e2 00 	sts	0x00E2, r24
     4a2:	80 91 a0 01 	lds	r24, 0x01A0
     4a6:	81 11       	cpse	r24, r1
     4a8:	04 c0       	rjmp	.+8      	; 0x4b2 <__vector_10+0x108>
     4aa:	80 91 e3 00 	lds	r24, 0x00E3
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     4ae:	87 ff       	sbrs	r24, 7
     4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <__vector_10+0x10c>
     4b2:	84 e0       	ldi	r24, 0x04	; 4
     4b4:	01 c0       	rjmp	.+2      	; 0x4b8 <__vector_10+0x10e>
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	80 93 a4 01 	sts	0x01A4, r24
     4bc:	a5 d2       	rcall	.+1354   	; 0xa08 <USB_Event_Stub>
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     4be:	80 91 e1 00 	lds	r24, 0x00E1
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     4c2:	83 ff       	sbrs	r24, 3
     4c4:	22 c0       	rjmp	.+68     	; 0x50a <__vector_10+0x160>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     4c6:	80 91 e2 00 	lds	r24, 0x00E2
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     4ca:	83 ff       	sbrs	r24, 3
     4cc:	1e c0       	rjmp	.+60     	; 0x50a <__vector_10+0x160>
     4ce:	80 91 e1 00 	lds	r24, 0x00E1
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     4d2:	87 7f       	andi	r24, 0xF7	; 247

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     4d4:	80 93 e1 00 	sts	0x00E1, r24
     4d8:	82 e0       	ldi	r24, 0x02	; 2
     4da:	80 93 a4 01 	sts	0x01A4, r24
     4de:	10 92 a0 01 	sts	0x01A0, r1
     4e2:	80 91 e1 00 	lds	r24, 0x00E1
     4e6:	8e 7f       	andi	r24, 0xFE	; 254

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     4e8:	80 93 e1 00 	sts	0x00E1, r24
     4ec:	80 91 e2 00 	lds	r24, 0x00E2
     4f0:	8e 7f       	andi	r24, 0xFE	; 254
     4f2:	80 93 e2 00 	sts	0x00E2, r24
     4f6:	80 91 e2 00 	lds	r24, 0x00E2

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     4fa:	80 61       	ori	r24, 0x10	; 16
     4fc:	80 93 e2 00 	sts	0x00E2, r24
     500:	42 e0       	ldi	r20, 0x02	; 2
     502:	60 e0       	ldi	r22, 0x00	; 0
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	f9 de       	rcall	.-526    	; 0x2fa <Endpoint_ConfigureEndpoint_Prv>
     508:	7f d2       	rcall	.+1278   	; 0xa08 <USB_Event_Stub>
     50a:	ff 91       	pop	r31
     50c:	ef 91       	pop	r30
     50e:	bf 91       	pop	r27
     510:	af 91       	pop	r26
     512:	9f 91       	pop	r25
     514:	8f 91       	pop	r24
     516:	7f 91       	pop	r23
     518:	6f 91       	pop	r22
     51a:	5f 91       	pop	r21
     51c:	4f 91       	pop	r20
     51e:	3f 91       	pop	r19
     520:	2f 91       	pop	r18
     522:	0f 90       	pop	r0
     524:	0f be       	out	0x3f, r0	; 63
     526:	0f 90       	pop	r0
     528:	1f 90       	pop	r1

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     52a:	18 95       	reti

0000052c <Endpoint_Write_Control_Stream_LE>:
     52c:	40 91 ab 01 	lds	r20, 0x01AB
     530:	50 91 ac 01 	lds	r21, 0x01AC
					  return HID_PARSE_InsufficientReportItems;
     534:	46 17       	cp	r20, r22

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     536:	57 07       	cpc	r21, r23
     538:	48 f0       	brcs	.+18     	; 0x54c <Endpoint_Write_Control_Stream_LE+0x20>
     53a:	61 15       	cp	r22, r1
     53c:	71 05       	cpc	r23, r1
     53e:	39 f4       	brne	.+14     	; 0x54e <Endpoint_Write_Control_Stream_LE+0x22>
     540:	40 91 e8 00 	lds	r20, 0x00E8
     544:	4e 77       	andi	r20, 0x7E	; 126
     546:	40 93 e8 00 	sts	0x00E8, r20
     54a:	01 c0       	rjmp	.+2      	; 0x54e <Endpoint_Write_Control_Stream_LE+0x22>
     54c:	ba 01       	movw	r22, r20
     54e:	fc 01       	movw	r30, r24
     550:	40 e0       	ldi	r20, 0x00	; 0
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     552:	33 c0       	rjmp	.+102    	; 0x5ba <Endpoint_Write_Control_Stream_LE+0x8e>
     554:	80 91 a4 01 	lds	r24, 0x01A4
     558:	88 23       	and	r24, r24
     55a:	09 f4       	brne	.+2      	; 0x55e <Endpoint_Write_Control_Stream_LE+0x32>
     55c:	42 c0       	rjmp	.+132    	; 0x5e2 <Endpoint_Write_Control_Stream_LE+0xb6>
     55e:	85 30       	cpi	r24, 0x05	; 5
     560:	09 f4       	brne	.+2      	; 0x564 <Endpoint_Write_Control_Stream_LE+0x38>
     562:	41 c0       	rjmp	.+130    	; 0x5e6 <Endpoint_Write_Control_Stream_LE+0xba>
     564:	80 91 e8 00 	lds	r24, 0x00E8
     568:	83 fd       	sbrc	r24, 3
     56a:	39 c0       	rjmp	.+114    	; 0x5de <Endpoint_Write_Control_Stream_LE+0xb2>
     56c:	80 91 e8 00 	lds	r24, 0x00E8
     570:	82 fd       	sbrc	r24, 2
     572:	2f c0       	rjmp	.+94     	; 0x5d2 <Endpoint_Write_Control_Stream_LE+0xa6>
     574:	80 91 e8 00 	lds	r24, 0x00E8
     578:	80 ff       	sbrs	r24, 0
     57a:	1f c0       	rjmp	.+62     	; 0x5ba <Endpoint_Write_Control_Stream_LE+0x8e>
     57c:	90 91 f3 00 	lds	r25, 0x00F3
     580:	80 91 f2 00 	lds	r24, 0x00F2
     584:	39 2f       	mov	r19, r25
     586:	20 e0       	ldi	r18, 0x00	; 0
     588:	a9 01       	movw	r20, r18
     58a:	48 2b       	or	r20, r24
     58c:	ca 01       	movw	r24, r20
     58e:	06 c0       	rjmp	.+12     	; 0x59c <Endpoint_Write_Control_Stream_LE+0x70>
     590:	41 91       	ld	r20, Z+
     592:	40 93 f1 00 	sts	0x00F1, r20
     596:	61 50       	subi	r22, 0x01	; 1
     598:	71 09       	sbc	r23, r1
     59a:	01 96       	adiw	r24, 0x01	; 1
     59c:	61 15       	cp	r22, r1
     59e:	71 05       	cpc	r23, r1
     5a0:	19 f0       	breq	.+6      	; 0x5a8 <Endpoint_Write_Control_Stream_LE+0x7c>
     5a2:	88 30       	cpi	r24, 0x08	; 8
     5a4:	91 05       	cpc	r25, r1
     5a6:	a0 f3       	brcs	.-24     	; 0x590 <Endpoint_Write_Control_Stream_LE+0x64>
     5a8:	41 e0       	ldi	r20, 0x01	; 1
     5aa:	08 97       	sbiw	r24, 0x08	; 8
     5ac:	09 f0       	breq	.+2      	; 0x5b0 <Endpoint_Write_Control_Stream_LE+0x84>
     5ae:	40 e0       	ldi	r20, 0x00	; 0
     5b0:	80 91 e8 00 	lds	r24, 0x00E8
     5b4:	8e 77       	andi	r24, 0x7E	; 126
     5b6:	80 93 e8 00 	sts	0x00E8, r24
     5ba:	61 15       	cp	r22, r1
     5bc:	71 05       	cpc	r23, r1
     5be:	51 f6       	brne	.-108    	; 0x554 <Endpoint_Write_Control_Stream_LE+0x28>
     5c0:	41 11       	cpse	r20, r1
     5c2:	c8 cf       	rjmp	.-112    	; 0x554 <Endpoint_Write_Control_Stream_LE+0x28>
     5c4:	06 c0       	rjmp	.+12     	; 0x5d2 <Endpoint_Write_Control_Stream_LE+0xa6>
     5c6:	80 91 a4 01 	lds	r24, 0x01A4
     5ca:	88 23       	and	r24, r24
     5cc:	51 f0       	breq	.+20     	; 0x5e2 <Endpoint_Write_Control_Stream_LE+0xb6>
     5ce:	85 30       	cpi	r24, 0x05	; 5
     5d0:	51 f0       	breq	.+20     	; 0x5e6 <Endpoint_Write_Control_Stream_LE+0xba>
     5d2:	80 91 e8 00 	lds	r24, 0x00E8
     5d6:	82 ff       	sbrs	r24, 2
     5d8:	f6 cf       	rjmp	.-20     	; 0x5c6 <Endpoint_Write_Control_Stream_LE+0x9a>
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	08 95       	ret
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	08 95       	ret
     5e2:	82 e0       	ldi	r24, 0x02	; 2
     5e4:	08 95       	ret
     5e6:	83 e0       	ldi	r24, 0x03	; 3
     5e8:	08 95       	ret

000005ea <Endpoint_Read_Control_Stream_LE>:
     5ea:	61 15       	cp	r22, r1
     5ec:	71 05       	cpc	r23, r1
     5ee:	29 f4       	brne	.+10     	; 0x5fa <Endpoint_Read_Control_Stream_LE+0x10>
					  ParserData->TotalReportItems++;
     5f0:	40 91 e8 00 	lds	r20, 0x00E8
     5f4:	4b 77       	andi	r20, 0x7B	; 123
     5f6:	40 93 e8 00 	sts	0x00E8, r20
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     5fa:	ac 01       	movw	r20, r24
     5fc:	28 c0       	rjmp	.+80     	; 0x64e <Endpoint_Read_Control_Stream_LE+0x64>
     5fe:	80 91 a4 01 	lds	r24, 0x01A4
     602:	88 23       	and	r24, r24
     604:	b9 f1       	breq	.+110    	; 0x674 <Endpoint_Read_Control_Stream_LE+0x8a>
     606:	85 30       	cpi	r24, 0x05	; 5
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     608:	79 f1       	breq	.+94     	; 0x668 <Endpoint_Read_Control_Stream_LE+0x7e>
     60a:	80 91 e8 00 	lds	r24, 0x00E8
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     60e:	83 fd       	sbrc	r24, 3
     610:	2d c0       	rjmp	.+90     	; 0x66c <Endpoint_Read_Control_Stream_LE+0x82>
     612:	80 91 e8 00 	lds	r24, 0x00E8
     616:	82 ff       	sbrs	r24, 2
     618:	f2 cf       	rjmp	.-28     	; 0x5fe <Endpoint_Read_Control_Stream_LE+0x14>
     61a:	fa 01       	movw	r30, r20
     61c:	07 c0       	rjmp	.+14     	; 0x62c <Endpoint_Read_Control_Stream_LE+0x42>
     61e:	80 91 f1 00 	lds	r24, 0x00F1
     622:	81 93       	st	Z+, r24
     624:	af 01       	movw	r20, r30
     626:	61 50       	subi	r22, 0x01	; 1
     628:	71 09       	sbc	r23, r1
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     62a:	61 f0       	breq	.+24     	; 0x644 <Endpoint_Read_Control_Stream_LE+0x5a>
     62c:	af 01       	movw	r20, r30
     62e:	90 91 f3 00 	lds	r25, 0x00F3
     632:	80 91 f2 00 	lds	r24, 0x00F2
     636:	39 2f       	mov	r19, r25
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	d9 01       	movw	r26, r18
     63c:	a8 2b       	or	r26, r24
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     63e:	cd 01       	movw	r24, r26
     640:	89 2b       	or	r24, r25
			
			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     642:	69 f7       	brne	.-38     	; 0x61e <Endpoint_Read_Control_Stream_LE+0x34>
     644:	80 91 e8 00 	lds	r24, 0x00E8
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     648:	8b 77       	andi	r24, 0x7B	; 123
     64a:	80 93 e8 00 	sts	0x00E8, r24
     64e:	61 15       	cp	r22, r1
     650:	71 05       	cpc	r23, r1
     652:	a9 f6       	brne	.-86     	; 0x5fe <Endpoint_Read_Control_Stream_LE+0x14>
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     654:	80 91 e8 00 	lds	r24, 0x00E8
     658:	80 fd       	sbrc	r24, 0
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     65a:	0a c0       	rjmp	.+20     	; 0x670 <Endpoint_Read_Control_Stream_LE+0x86>
     65c:	80 91 a4 01 	lds	r24, 0x01A4
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     660:	88 23       	and	r24, r24
     662:	41 f0       	breq	.+16     	; 0x674 <Endpoint_Read_Control_Stream_LE+0x8a>
     664:	85 30       	cpi	r24, 0x05	; 5
     666:	b1 f7       	brne	.-20     	; 0x654 <Endpoint_Read_Control_Stream_LE+0x6a>
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     668:	83 e0       	ldi	r24, 0x03	; 3
     66a:	08 95       	ret
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	08 95       	ret
	  return HID_PARSE_NoUnfilteredReportItems;
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	08 95       	ret

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     674:	82 e0       	ldi	r24, 0x02	; 2
     676:	08 95       	ret

00000678 <Endpoint_Write_Control_PStream_LE>:

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     678:	40 91 ab 01 	lds	r20, 0x01AB

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     67c:	50 91 ac 01 	lds	r21, 0x01AC
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     680:	46 17       	cp	r20, r22
     682:	57 07       	cpc	r21, r23
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     684:	48 f0       	brcs	.+18     	; 0x698 <Endpoint_Write_Control_PStream_LE+0x20>
     686:	61 15       	cp	r22, r1
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     688:	71 05       	cpc	r23, r1
     68a:	39 f4       	brne	.+14     	; 0x69a <Endpoint_Write_Control_PStream_LE+0x22>
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     68c:	40 91 e8 00 	lds	r20, 0x00E8
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     690:	4e 77       	andi	r20, 0x7E	; 126
     692:	40 93 e8 00 	sts	0x00E8, r20
     696:	01 c0       	rjmp	.+2      	; 0x69a <Endpoint_Write_Control_PStream_LE+0x22>

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     698:	ba 01       	movw	r22, r20
     69a:	fc 01       	movw	r30, r24
     69c:	40 e0       	ldi	r20, 0x00	; 0
     69e:	34 c0       	rjmp	.+104    	; 0x708 <Endpoint_Write_Control_PStream_LE+0x90>
     6a0:	80 91 a4 01 	lds	r24, 0x01A4
     6a4:	88 23       	and	r24, r24
     6a6:	09 f4       	brne	.+2      	; 0x6aa <Endpoint_Write_Control_PStream_LE+0x32>
     6a8:	43 c0       	rjmp	.+134    	; 0x730 <Endpoint_Write_Control_PStream_LE+0xb8>
     6aa:	85 30       	cpi	r24, 0x05	; 5
     6ac:	09 f4       	brne	.+2      	; 0x6b0 <Endpoint_Write_Control_PStream_LE+0x38>
     6ae:	42 c0       	rjmp	.+132    	; 0x734 <Endpoint_Write_Control_PStream_LE+0xbc>
     6b0:	80 91 e8 00 	lds	r24, 0x00E8
     6b4:	83 fd       	sbrc	r24, 3
     6b6:	3a c0       	rjmp	.+116    	; 0x72c <Endpoint_Write_Control_PStream_LE+0xb4>
     6b8:	80 91 e8 00 	lds	r24, 0x00E8
     6bc:	82 fd       	sbrc	r24, 2
     6be:	30 c0       	rjmp	.+96     	; 0x720 <Endpoint_Write_Control_PStream_LE+0xa8>
     6c0:	80 91 e8 00 	lds	r24, 0x00E8
     6c4:	80 ff       	sbrs	r24, 0
     6c6:	20 c0       	rjmp	.+64     	; 0x708 <Endpoint_Write_Control_PStream_LE+0x90>
     6c8:	90 91 f3 00 	lds	r25, 0x00F3
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     6cc:	80 91 f2 00 	lds	r24, 0x00F2
     6d0:	39 2f       	mov	r19, r25
     6d2:	20 e0       	ldi	r18, 0x00	; 0
     6d4:	a9 01       	movw	r20, r18
     6d6:	48 2b       	or	r20, r24
     6d8:	ca 01       	movw	r24, r20

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     6da:	07 c0       	rjmp	.+14     	; 0x6ea <Endpoint_Write_Control_PStream_LE+0x72>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     6dc:	44 91       	lpm	r20, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     6de:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     6e2:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     6e4:	61 50       	subi	r22, 0x01	; 1
     6e6:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     6e8:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     6ea:	61 15       	cp	r22, r1
     6ec:	71 05       	cpc	r23, r1
     6ee:	19 f0       	breq	.+6      	; 0x6f6 <Endpoint_Write_Control_PStream_LE+0x7e>
     6f0:	88 30       	cpi	r24, 0x08	; 8
     6f2:	91 05       	cpc	r25, r1
     6f4:	98 f3       	brcs	.-26     	; 0x6dc <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     6f6:	41 e0       	ldi	r20, 0x01	; 1
     6f8:	08 97       	sbiw	r24, 0x08	; 8
     6fa:	09 f0       	breq	.+2      	; 0x6fe <Endpoint_Write_Control_PStream_LE+0x86>
     6fc:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     6fe:	80 91 e8 00 	lds	r24, 0x00E8
     702:	8e 77       	andi	r24, 0x7E	; 126
     704:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     708:	61 15       	cp	r22, r1
     70a:	71 05       	cpc	r23, r1
     70c:	49 f6       	brne	.-110    	; 0x6a0 <Endpoint_Write_Control_PStream_LE+0x28>
     70e:	41 11       	cpse	r20, r1
     710:	c7 cf       	rjmp	.-114    	; 0x6a0 <Endpoint_Write_Control_PStream_LE+0x28>
     712:	06 c0       	rjmp	.+12     	; 0x720 <Endpoint_Write_Control_PStream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     714:	80 91 a4 01 	lds	r24, 0x01A4

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     718:	88 23       	and	r24, r24
     71a:	51 f0       	breq	.+20     	; 0x730 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     71c:	85 30       	cpi	r24, 0x05	; 5
     71e:	51 f0       	breq	.+20     	; 0x734 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     720:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     724:	82 ff       	sbrs	r24, 2
     726:	f6 cf       	rjmp	.-20     	; 0x714 <Endpoint_Write_Control_PStream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     730:	82 e0       	ldi	r24, 0x02	; 2
     732:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     734:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     736:	08 95       	ret

00000738 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     738:	ef 92       	push	r14
     73a:	ff 92       	push	r15
     73c:	0f 93       	push	r16
     73e:	1f 93       	push	r17
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	cd b7       	in	r28, 0x3d	; 61
     746:	de b7       	in	r29, 0x3e	; 62
     748:	ac 97       	sbiw	r28, 0x2c	; 44
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	f8 94       	cli
     74e:	de bf       	out	0x3e, r29	; 62
     750:	0f be       	out	0x3f, r0	; 63
     752:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     754:	e5 ea       	ldi	r30, 0xA5	; 165
     756:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     758:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     75c:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     75e:	21 e0       	ldi	r18, 0x01	; 1
     760:	ed 3a       	cpi	r30, 0xAD	; 173
     762:	f2 07       	cpc	r31, r18
     764:	c9 f7       	brne	.-14     	; 0x758 <USB_Device_ProcessControlRequest+0x20>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     766:	52 dd       	rcall	.-1372   	; 0x20c <EVENT_USB_Device_ControlRequest>
     768:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     76c:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     76e:	31 c1       	rjmp	.+610    	; 0x9d2 <USB_Device_ProcessControlRequest+0x29a>
     770:	80 91 a5 01 	lds	r24, 0x01A5
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     774:	90 91 a6 01 	lds	r25, 0x01A6

		switch (USB_ControlRequest.bRequest)
     778:	95 30       	cpi	r25, 0x05	; 5
     77a:	09 f4       	brne	.+2      	; 0x77e <USB_Device_ProcessControlRequest+0x46>
     77c:	87 c0       	rjmp	.+270    	; 0x88c <USB_Device_ProcessControlRequest+0x154>
     77e:	38 f4       	brcc	.+14     	; 0x78e <USB_Device_ProcessControlRequest+0x56>
     780:	91 30       	cpi	r25, 0x01	; 1
     782:	b1 f1       	breq	.+108    	; 0x7f0 <USB_Device_ProcessControlRequest+0xb8>
     784:	70 f0       	brcs	.+28     	; 0x7a2 <USB_Device_ProcessControlRequest+0x6a>
     786:	93 30       	cpi	r25, 0x03	; 3
     788:	09 f0       	breq	.+2      	; 0x78c <USB_Device_ProcessControlRequest+0x54>
     78a:	23 c1       	rjmp	.+582    	; 0x9d2 <USB_Device_ProcessControlRequest+0x29a>
     78c:	31 c0       	rjmp	.+98     	; 0x7f0 <USB_Device_ProcessControlRequest+0xb8>
     78e:	98 30       	cpi	r25, 0x08	; 8
     790:	09 f4       	brne	.+2      	; 0x794 <USB_Device_ProcessControlRequest+0x5c>
     792:	f4 c0       	rjmp	.+488    	; 0x97c <USB_Device_ProcessControlRequest+0x244>
     794:	99 30       	cpi	r25, 0x09	; 9
     796:	09 f4       	brne	.+2      	; 0x79a <USB_Device_ProcessControlRequest+0x62>
     798:	00 c1       	rjmp	.+512    	; 0x99a <USB_Device_ProcessControlRequest+0x262>
     79a:	96 30       	cpi	r25, 0x06	; 6
     79c:	09 f0       	breq	.+2      	; 0x7a0 <USB_Device_ProcessControlRequest+0x68>
     79e:	19 c1       	rjmp	.+562    	; 0x9d2 <USB_Device_ProcessControlRequest+0x29a>
     7a0:	9c c0       	rjmp	.+312    	; 0x8da <USB_Device_ProcessControlRequest+0x1a2>
     7a2:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     7a4:	21 f0       	breq	.+8      	; 0x7ae <USB_Device_ProcessControlRequest+0x76>
     7a6:	82 38       	cpi	r24, 0x82	; 130
     7a8:	09 f0       	breq	.+2      	; 0x7ac <USB_Device_ProcessControlRequest+0x74>
     7aa:	13 c1       	rjmp	.+550    	; 0x9d2 <USB_Device_ProcessControlRequest+0x29a>
     7ac:	08 c0       	rjmp	.+16     	; 0x7be <USB_Device_ProcessControlRequest+0x86>
     7ae:	80 91 a1 01 	lds	r24, 0x01A1
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     7b2:	90 91 a2 01 	lds	r25, 0x01A2
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     7b6:	99 23       	and	r25, r25
     7b8:	89 f0       	breq	.+34     	; 0x7dc <USB_Device_ProcessControlRequest+0xa4>
     7ba:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     7bc:	0f c0       	rjmp	.+30     	; 0x7dc <USB_Device_ProcessControlRequest+0xa4>
     7be:	80 91 a9 01 	lds	r24, 0x01A9
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     7c2:	90 91 aa 01 	lds	r25, 0x01AA
     7c6:	8f 70       	andi	r24, 0x0F	; 15
     7c8:	99 27       	eor	r25, r25
     7ca:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     7ce:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     7d2:	85 fb       	bst	r24, 5
     7d4:	88 27       	eor	r24, r24
     7d6:	80 f9       	bld	r24, 0
     7d8:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     7dc:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     7e0:	97 7f       	andi	r25, 0xF7	; 247
     7e2:	90 93 e8 00 	sts	0x00E8, r25
     7e6:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     7ea:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     7ee:	d1 c0       	rjmp	.+418    	; 0x992 <USB_Device_ProcessControlRequest+0x25a>
     7f0:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     7f2:	19 f0       	breq	.+6      	; 0x7fa <USB_Device_ProcessControlRequest+0xc2>
     7f4:	82 30       	cpi	r24, 0x02	; 2
     7f6:	09 f0       	breq	.+2      	; 0x7fa <USB_Device_ProcessControlRequest+0xc2>
     7f8:	ec c0       	rjmp	.+472    	; 0x9d2 <USB_Device_ProcessControlRequest+0x29a>
     7fa:	8f 71       	andi	r24, 0x1F	; 31
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     7fc:	21 f0       	breq	.+8      	; 0x806 <USB_Device_ProcessControlRequest+0xce>
     7fe:	82 30       	cpi	r24, 0x02	; 2
     800:	09 f0       	breq	.+2      	; 0x804 <USB_Device_ProcessControlRequest+0xcc>
     802:	e7 c0       	rjmp	.+462    	; 0x9d2 <USB_Device_ProcessControlRequest+0x29a>
     804:	0b c0       	rjmp	.+22     	; 0x81c <USB_Device_ProcessControlRequest+0xe4>
     806:	80 91 a7 01 	lds	r24, 0x01A7
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     80a:	81 30       	cpi	r24, 0x01	; 1
     80c:	09 f0       	breq	.+2      	; 0x810 <USB_Device_ProcessControlRequest+0xd8>
     80e:	e1 c0       	rjmp	.+450    	; 0x9d2 <USB_Device_ProcessControlRequest+0x29a>
     810:	93 30       	cpi	r25, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     812:	09 f0       	breq	.+2      	; 0x816 <USB_Device_ProcessControlRequest+0xde>
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	80 93 a2 01 	sts	0x01A2, r24
     81a:	2f c0       	rjmp	.+94     	; 0x87a <USB_Device_ProcessControlRequest+0x142>
     81c:	80 91 a7 01 	lds	r24, 0x01A7

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     820:	81 11       	cpse	r24, r1
     822:	2b c0       	rjmp	.+86     	; 0x87a <USB_Device_ProcessControlRequest+0x142>
     824:	80 91 a9 01 	lds	r24, 0x01A9
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     828:	90 91 aa 01 	lds	r25, 0x01AA
     82c:	8f 70       	andi	r24, 0x0F	; 15
     82e:	99 27       	eor	r25, r25
     830:	00 97       	sbiw	r24, 0x00	; 0

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     832:	09 f4       	brne	.+2      	; 0x836 <USB_Device_ProcessControlRequest+0xfe>
     834:	ce c0       	rjmp	.+412    	; 0x9d2 <USB_Device_ProcessControlRequest+0x29a>
     836:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     83a:	20 91 eb 00 	lds	r18, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     83e:	20 ff       	sbrs	r18, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     840:	1c c0       	rjmp	.+56     	; 0x87a <USB_Device_ProcessControlRequest+0x142>
     842:	20 91 a6 01 	lds	r18, 0x01A6
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     846:	23 30       	cpi	r18, 0x03	; 3
     848:	21 f4       	brne	.+8      	; 0x852 <USB_Device_ProcessControlRequest+0x11a>
     84a:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     84e:	80 62       	ori	r24, 0x20	; 32
     850:	12 c0       	rjmp	.+36     	; 0x876 <USB_Device_ProcessControlRequest+0x13e>
     852:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     856:	90 61       	ori	r25, 0x10	; 16
     858:	90 93 eb 00 	sts	0x00EB, r25
     85c:	21 e0       	ldi	r18, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	01 c0       	rjmp	.+2      	; 0x864 <USB_Device_ProcessControlRequest+0x12c>
     862:	22 0f       	add	r18, r18
     864:	8a 95       	dec	r24
     866:	ea f7       	brpl	.-6      	; 0x862 <USB_Device_ProcessControlRequest+0x12a>
     868:	20 93 ea 00 	sts	0x00EA, r18
     86c:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     870:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     874:	88 60       	ori	r24, 0x08	; 8
     876:	80 93 eb 00 	sts	0x00EB, r24
     87a:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     87e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     882:	87 7f       	andi	r24, 0xF7	; 247
     884:	80 93 e8 00 	sts	0x00E8, r24
     888:	6f dd       	rcall	.-1314   	; 0x368 <Endpoint_ClearStatusStage>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     88a:	a3 c0       	rjmp	.+326    	; 0x9d2 <USB_Device_ProcessControlRequest+0x29a>
     88c:	81 11       	cpse	r24, r1
     88e:	a1 c0       	rjmp	.+322    	; 0x9d2 <USB_Device_ProcessControlRequest+0x29a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     890:	00 91 a7 01 	lds	r16, 0x01A7
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
     894:	10 91 a8 01 	lds	r17, 0x01A8
     898:	0f 77       	andi	r16, 0x7F	; 127
     89a:	11 27       	eor	r17, r17
     89c:	e0 2e       	mov	r14, r16
     89e:	ff b6       	in	r15, 0x3f	; 63
     8a0:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     8a2:	80 91 e8 00 	lds	r24, 0x00E8
     8a6:	87 7f       	andi	r24, 0xF7	; 247
     8a8:	80 93 e8 00 	sts	0x00E8, r24
     8ac:	5d dd       	rcall	.-1350   	; 0x368 <Endpoint_ClearStatusStage>
     8ae:	80 91 e8 00 	lds	r24, 0x00E8
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     8b2:	80 ff       	sbrs	r24, 0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     8b4:	fc cf       	rjmp	.-8      	; 0x8ae <USB_Device_ProcessControlRequest+0x176>
     8b6:	80 91 e3 00 	lds	r24, 0x00E3

	while (!(Endpoint_IsINReady()));
     8ba:	80 78       	andi	r24, 0x80	; 128
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     8bc:	80 2b       	or	r24, r16
     8be:	80 93 e3 00 	sts	0x00E3, r24
     8c2:	80 68       	ori	r24, 0x80	; 128

				UDADDR = Temp;
     8c4:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
     8c8:	ee 20       	and	r14, r14
     8ca:	11 f0       	breq	.+4      	; 0x8d0 <USB_Device_ProcessControlRequest+0x198>
     8cc:	83 e0       	ldi	r24, 0x03	; 3

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <USB_Device_ProcessControlRequest+0x19a>
     8d0:	82 e0       	ldi	r24, 0x02	; 2
     8d2:	80 93 a4 01 	sts	0x01A4, r24
     8d6:	ff be       	out	0x3f, r15	; 63
     8d8:	7c c0       	rjmp	.+248    	; 0x9d2 <USB_Device_ProcessControlRequest+0x29a>
     8da:	80 58       	subi	r24, 0x80	; 128
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     8dc:	82 30       	cpi	r24, 0x02	; 2
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
     8de:	08 f0       	brcs	.+2      	; 0x8e2 <USB_Device_ProcessControlRequest+0x1aa>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     8e0:	78 c0       	rjmp	.+240    	; 0x9d2 <USB_Device_ProcessControlRequest+0x29a>
     8e2:	80 91 a7 01 	lds	r24, 0x01A7
     8e6:	90 91 a8 01 	lds	r25, 0x01A8
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     8ea:	8c 3d       	cpi	r24, 0xDC	; 220
     8ec:	23 e0       	ldi	r18, 0x03	; 3
     8ee:	92 07       	cpc	r25, r18
     8f0:	71 f5       	brne	.+92     	; 0x94e <USB_Device_ProcessControlRequest+0x216>
     8f2:	83 e0       	ldi	r24, 0x03	; 3
     8f4:	8a 83       	std	Y+2, r24	; 0x02
     8f6:	8a e2       	ldi	r24, 0x2A	; 42
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     8f8:	89 83       	std	Y+1, r24	; 0x01
     8fa:	4f b7       	in	r20, 0x3f	; 63
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     8fc:	f8 94       	cli
     8fe:	de 01       	movw	r26, r28
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     900:	13 96       	adiw	r26, 0x03	; 3
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     902:	20 e0       	ldi	r18, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
     904:	3e e0       	ldi	r19, 0x0E	; 14
     906:	51 e2       	ldi	r21, 0x21	; 33
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     908:	e3 2f       	mov	r30, r19
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     90a:	f0 e0       	ldi	r31, 0x00	; 0

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     90c:	50 93 57 00 	sts	0x0057, r21
     910:	e4 91       	lpm	r30, Z
     912:	20 ff       	sbrs	r18, 0
     914:	03 c0       	rjmp	.+6      	; 0x91c <USB_Device_ProcessControlRequest+0x1e4>
     916:	e2 95       	swap	r30

					if (SerialCharNum & 0x01)
     918:	ef 70       	andi	r30, 0x0F	; 15
     91a:	3f 5f       	subi	r19, 0xFF	; 255
					{
						SerialByte >>= 4;
     91c:	ef 70       	andi	r30, 0x0F	; 15
     91e:	8e 2f       	mov	r24, r30
						SigReadAddress++;
     920:	90 e0       	ldi	r25, 0x00	; 0
					}

					SerialByte &= 0x0F;
     922:	ea 30       	cpi	r30, 0x0A	; 10
     924:	10 f0       	brcs	.+4      	; 0x92a <USB_Device_ProcessControlRequest+0x1f2>
     926:	c7 96       	adiw	r24, 0x37	; 55

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     928:	01 c0       	rjmp	.+2      	; 0x92c <USB_Device_ProcessControlRequest+0x1f4>
     92a:	c0 96       	adiw	r24, 0x30	; 48
     92c:	8d 93       	st	X+, r24
     92e:	9d 93       	st	X+, r25
     930:	2f 5f       	subi	r18, 0xFF	; 255
     932:	24 31       	cpi	r18, 0x14	; 20
     934:	49 f7       	brne	.-46     	; 0x908 <USB_Device_ProcessControlRequest+0x1d0>
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     936:	4f bf       	out	0x3f, r20	; 63
     938:	80 91 e8 00 	lds	r24, 0x00E8
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     93c:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     93e:	80 93 e8 00 	sts	0x00E8, r24
     942:	6a e2       	ldi	r22, 0x2A	; 42
     944:	70 e0       	ldi	r23, 0x00	; 0
     946:	ce 01       	movw	r24, r28

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	f0 dd       	rcall	.-1056   	; 0x52c <Endpoint_Write_Control_Stream_LE>
     94c:	11 c0       	rjmp	.+34     	; 0x970 <USB_Device_ProcessControlRequest+0x238>
     94e:	ae 01       	movw	r20, r28
     950:	45 5d       	subi	r20, 0xD5	; 213
     952:	5f 4f       	sbci	r21, 0xFF	; 255
     954:	60 91 a9 01 	lds	r22, 0x01A9
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     958:	93 dc       	rcall	.-1754   	; 0x280 <CALLBACK_USB_GetDescriptor>
     95a:	00 97       	sbiw	r24, 0x00	; 0
     95c:	d1 f1       	breq	.+116    	; 0x9d2 <USB_Device_ProcessControlRequest+0x29a>
     95e:	20 91 e8 00 	lds	r18, 0x00E8
     962:	27 7f       	andi	r18, 0xF7	; 247
     964:	20 93 e8 00 	sts	0x00E8, r18
     968:	bc 01       	movw	r22, r24
     96a:	8b a5       	ldd	r24, Y+43	; 0x2b
     96c:	9c a5       	ldd	r25, Y+44	; 0x2c
     96e:	84 de       	rcall	.-760    	; 0x678 <Endpoint_Write_Control_PStream_LE>
     970:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     974:	8b 77       	andi	r24, 0x7B	; 123
     976:	80 93 e8 00 	sts	0x00E8, r24
     97a:	2b c0       	rjmp	.+86     	; 0x9d2 <USB_Device_ProcessControlRequest+0x29a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     97c:	80 38       	cpi	r24, 0x80	; 128
     97e:	49 f5       	brne	.+82     	; 0x9d2 <USB_Device_ProcessControlRequest+0x29a>
     980:	80 91 e8 00 	lds	r24, 0x00E8
     984:	87 7f       	andi	r24, 0xF7	; 247
     986:	80 93 e8 00 	sts	0x00E8, r24
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     98a:	80 91 a0 01 	lds	r24, 0x01A0
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     98e:	80 93 f1 00 	sts	0x00F1, r24
     992:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     996:	8e 77       	andi	r24, 0x7E	; 126
     998:	75 cf       	rjmp	.-278    	; 0x884 <USB_Device_ProcessControlRequest+0x14c>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     99a:	81 11       	cpse	r24, r1
     99c:	1a c0       	rjmp	.+52     	; 0x9d2 <USB_Device_ProcessControlRequest+0x29a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     99e:	90 91 a7 01 	lds	r25, 0x01A7
     9a2:	92 30       	cpi	r25, 0x02	; 2
     9a4:	b0 f4       	brcc	.+44     	; 0x9d2 <USB_Device_ProcessControlRequest+0x29a>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     9a6:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     9aa:	87 7f       	andi	r24, 0xF7	; 247
     9ac:	80 93 e8 00 	sts	0x00E8, r24
     9b0:	90 93 a0 01 	sts	0x01A0, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     9b4:	d9 dc       	rcall	.-1614   	; 0x368 <Endpoint_ClearStatusStage>
     9b6:	80 91 a0 01 	lds	r24, 0x01A0
     9ba:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     9bc:	04 c0       	rjmp	.+8      	; 0x9c6 <USB_Device_ProcessControlRequest+0x28e>
     9be:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
     9c2:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
     9c4:	02 c0       	rjmp	.+4      	; 0x9ca <USB_Device_ProcessControlRequest+0x292>
     9c6:	84 e0       	ldi	r24, 0x04	; 4
     9c8:	01 c0       	rjmp	.+2      	; 0x9cc <USB_Device_ProcessControlRequest+0x294>
     9ca:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     9cc:	80 93 a4 01 	sts	0x01A4, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     9d0:	08 dc       	rcall	.-2032   	; 0x1e2 <EVENT_USB_Device_ConfigurationChanged>
     9d2:	80 91 e8 00 	lds	r24, 0x00E8
     9d6:	83 ff       	sbrs	r24, 3
     9d8:	0a c0       	rjmp	.+20     	; 0x9ee <USB_Device_ProcessControlRequest+0x2b6>
     9da:	80 91 eb 00 	lds	r24, 0x00EB

	EVENT_USB_Device_ConfigurationChanged();
     9de:	80 62       	ori	r24, 0x20	; 32
     9e0:	80 93 eb 00 	sts	0x00EB, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     9e4:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     9e8:	87 7f       	andi	r24, 0xF7	; 247
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     9ea:	80 93 e8 00 	sts	0x00E8, r24
     9ee:	ac 96       	adiw	r28, 0x2c	; 44
     9f0:	0f b6       	in	r0, 0x3f	; 63
     9f2:	f8 94       	cli
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     9f4:	de bf       	out	0x3e, r29	; 62
     9f6:	0f be       	out	0x3f, r0	; 63
     9f8:	cd bf       	out	0x3d, r28	; 61
     9fa:	df 91       	pop	r29
     9fc:	cf 91       	pop	r28
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
     9fe:	1f 91       	pop	r17
     a00:	0f 91       	pop	r16
     a02:	ff 90       	pop	r15
     a04:	ef 90       	pop	r14
     a06:	08 95       	ret

00000a08 <USB_Event_Stub>:
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

// cppcheck-suppress unusedFunction
void USB_Event_Stub(void)
{
     a08:	08 95       	ret

00000a0a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     a0a:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     a0c:	80 91 a4 01 	lds	r24, 0x01A4
     a10:	88 23       	and	r24, r24
     a12:	a9 f0       	breq	.+42     	; 0xa3e <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     a14:	80 91 e9 00 	lds	r24, 0x00E9
     a18:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     a1a:	90 91 ec 00 	lds	r25, 0x00EC
     a1e:	90 ff       	sbrs	r25, 0
     a20:	02 c0       	rjmp	.+4      	; 0xa26 <USB_USBTask+0x1c>
     a22:	90 e8       	ldi	r25, 0x80	; 128
     a24:	01 c0       	rjmp	.+2      	; 0xa28 <USB_USBTask+0x1e>
     a26:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     a28:	c9 2f       	mov	r28, r25
     a2a:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a2c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a30:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     a34:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     a36:	80 de       	rcall	.-768    	; 0x738 <USB_Device_ProcessControlRequest>
     a38:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a3a:	c0 93 e9 00 	sts	0x00E9, r28
     a3e:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     a40:	08 95       	ret

00000a42 <Serial_SendString>:
     a42:	fc 01       	movw	r30, r24

void Serial_SendString(const char* StringPtr)
{
	uint8_t CurrByte;

	while ((CurrByte = *StringPtr) != 0x00)
     a44:	06 c0       	rjmp	.+12     	; 0xa52 <Serial_SendString+0x10>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     a46:	90 91 c8 00 	lds	r25, 0x00C8
     a4a:	95 ff       	sbrs	r25, 5
     a4c:	fc cf       	rjmp	.-8      	; 0xa46 <Serial_SendString+0x4>
				UDR1 = DataByte;
     a4e:	80 93 ce 00 	sts	0x00CE, r24
     a52:	81 91       	ld	r24, Z+
     a54:	81 11       	cpse	r24, r1
     a56:	f7 cf       	rjmp	.-18     	; 0xa46 <Serial_SendString+0x4>
	{
		Serial_SendByte(CurrByte);
		StringPtr++;
	}
}
     a58:	08 95       	ret

00000a5a <TWI_StartTransmission>:
	for (;;)
	{
		bool     BusCaptured = false;
		uint16_t TimeoutRemaining;

		TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
     a5a:	94 ea       	ldi	r25, 0xA4	; 164
     a5c:	90 93 bc 00 	sts	0x00BC, r25

		TimeoutRemaining = (TimeoutMS * 100);
     a60:	24 e6       	ldi	r18, 0x64	; 100
     a62:	62 9f       	mul	r22, r18
     a64:	b0 01       	movw	r22, r0
     a66:	11 24       	eor	r1, r1
     a68:	61 50       	subi	r22, 0x01	; 1
     a6a:	71 09       	sbc	r23, r1
		while (TimeoutRemaining-- && !(BusCaptured))
     a6c:	9b 01       	movw	r18, r22
uint8_t TWI_StartTransmission(const uint8_t SlaveAddress,
                              const uint8_t TimeoutMS)
{
	for (;;)
	{
		bool     BusCaptured = false;
     a6e:	40 e0       	ldi	r20, 0x00	; 0
					case TW_START:
					case TW_REP_START:
						BusCaptured = true;
						break;
					case TW_MT_ARB_LOST:
						TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
     a70:	54 ea       	ldi	r21, 0xA4	; 164
		uint16_t TimeoutRemaining;

		TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining-- && !(BusCaptured))
     a72:	1d c0       	rjmp	.+58     	; 0xaae <TWI_StartTransmission+0x54>
		{
			if (TWCR & (1 << TWINT))
     a74:	90 91 bc 00 	lds	r25, 0x00BC
     a78:	97 ff       	sbrs	r25, 7
     a7a:	13 c0       	rjmp	.+38     	; 0xaa2 <TWI_StartTransmission+0x48>
			{
				switch (TWSR & TW_STATUS_MASK)
     a7c:	90 91 b9 00 	lds	r25, 0x00B9
     a80:	98 7f       	andi	r25, 0xF8	; 248
     a82:	90 31       	cpi	r25, 0x10	; 16
     a84:	69 f0       	breq	.+26     	; 0xaa0 <TWI_StartTransmission+0x46>
     a86:	98 33       	cpi	r25, 0x38	; 56
     a88:	19 f0       	breq	.+6      	; 0xa90 <TWI_StartTransmission+0x36>
     a8a:	98 30       	cpi	r25, 0x08	; 8
     a8c:	21 f4       	brne	.+8      	; 0xa96 <TWI_StartTransmission+0x3c>
     a8e:	08 c0       	rjmp	.+16     	; 0xaa0 <TWI_StartTransmission+0x46>
					case TW_START:
					case TW_REP_START:
						BusCaptured = true;
						break;
					case TW_MT_ARB_LOST:
						TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
     a90:	50 93 bc 00 	sts	0x00BC, r21
						continue;
     a94:	0a c0       	rjmp	.+20     	; 0xaaa <TWI_StartTransmission+0x50>
					default:
						TWCR = (1 << TWEN);
     a96:	84 e0       	ldi	r24, 0x04	; 4
     a98:	80 93 bc 00 	sts	0x00BC, r24
						return TWI_ERROR_BusFault;
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	08 95       	ret
			{
				switch (TWSR & TW_STATUS_MASK)
				{
					case TW_START:
					case TW_REP_START:
						BusCaptured = true;
     aa0:	41 e0       	ldi	r20, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     aa2:	9a e1       	ldi	r25, 0x1A	; 26
     aa4:	9a 95       	dec	r25
     aa6:	f1 f7       	brne	.-4      	; 0xaa4 <TWI_StartTransmission+0x4a>
     aa8:	00 c0       	rjmp	.+0      	; 0xaaa <TWI_StartTransmission+0x50>
     aaa:	21 50       	subi	r18, 0x01	; 1
     aac:	31 09       	sbc	r19, r1
		uint16_t TimeoutRemaining;

		TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining-- && !(BusCaptured))
     aae:	2f 3f       	cpi	r18, 0xFF	; 255
     ab0:	9f ef       	ldi	r25, 0xFF	; 255
     ab2:	39 07       	cpc	r19, r25
     ab4:	21 f4       	brne	.+8      	; 0xabe <TWI_StartTransmission+0x64>
     ab6:	0b c0       	rjmp	.+22     	; 0xace <TWI_StartTransmission+0x74>
			}

			_delay_us(10);
		}

		if (!(TimeoutRemaining))
     ab8:	23 2b       	or	r18, r19
     aba:	21 f0       	breq	.+8      	; 0xac4 <TWI_StartTransmission+0x6a>
     abc:	08 c0       	rjmp	.+16     	; 0xace <TWI_StartTransmission+0x74>
		uint16_t TimeoutRemaining;

		TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining-- && !(BusCaptured))
     abe:	44 23       	and	r20, r20
     ac0:	c9 f2       	breq	.-78     	; 0xa74 <TWI_StartTransmission+0x1a>
     ac2:	fa cf       	rjmp	.-12     	; 0xab8 <TWI_StartTransmission+0x5e>
			_delay_us(10);
		}

		if (!(TimeoutRemaining))
		{
			TWCR = (1 << TWEN);
     ac4:	84 e0       	ldi	r24, 0x04	; 4
     ac6:	80 93 bc 00 	sts	0x00BC, r24
			return TWI_ERROR_BusCaptureTimeout;
     aca:	82 e0       	ldi	r24, 0x02	; 2
     acc:	08 95       	ret
		}

		TWDR = SlaveAddress;
     ace:	80 93 bb 00 	sts	0x00BB, r24
		TWCR = ((1 << TWINT) | (1 << TWEN));
     ad2:	84 e8       	ldi	r24, 0x84	; 132
     ad4:	80 93 bc 00 	sts	0x00BC, r24

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining--)
     ad8:	0e c0       	rjmp	.+28     	; 0xaf6 <TWI_StartTransmission+0x9c>
		{
			if (TWCR & (1 << TWINT))
     ada:	20 91 bc 00 	lds	r18, 0x00BC
     ade:	cb 01       	movw	r24, r22
     ae0:	01 97       	sbiw	r24, 0x01	; 1
     ae2:	27 ff       	sbrs	r18, 7
     ae4:	03 c0       	rjmp	.+6      	; 0xaec <TWI_StartTransmission+0x92>
			  break;

			_delay_us(10);
		}

		if (!(TimeoutRemaining))
     ae6:	67 2b       	or	r22, r23
     ae8:	b1 f0       	breq	.+44     	; 0xb16 <__stack+0x17>
     aea:	09 c0       	rjmp	.+18     	; 0xafe <TWI_StartTransmission+0xa4>
     aec:	2a e1       	ldi	r18, 0x1A	; 26
     aee:	2a 95       	dec	r18
     af0:	f1 f7       	brne	.-4      	; 0xaee <TWI_StartTransmission+0x94>
     af2:	00 c0       	rjmp	.+0      	; 0xaf4 <TWI_StartTransmission+0x9a>
     af4:	bc 01       	movw	r22, r24

		TWDR = SlaveAddress;
		TWCR = ((1 << TWINT) | (1 << TWEN));

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining--)
     af6:	6f 3f       	cpi	r22, 0xFF	; 255
     af8:	8f ef       	ldi	r24, 0xFF	; 255
     afa:	78 07       	cpc	r23, r24
     afc:	71 f7       	brne	.-36     	; 0xada <TWI_StartTransmission+0x80>
		}

		if (!(TimeoutRemaining))
		  return TWI_ERROR_SlaveResponseTimeout;

		switch (TWSR & TW_STATUS_MASK)
     afe:	80 91 b9 00 	lds	r24, 0x00B9
     b02:	88 7f       	andi	r24, 0xF8	; 248
     b04:	88 31       	cpi	r24, 0x18	; 24
     b06:	49 f0       	breq	.+18     	; 0xb1a <__stack+0x1b>
     b08:	80 34       	cpi	r24, 0x40	; 64
     b0a:	39 f0       	breq	.+14     	; 0xb1a <__stack+0x1b>
		{
			case TW_MT_SLA_ACK:
			case TW_MR_SLA_ACK:
				return TWI_ERROR_NoError;
			default:
				TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
     b0c:	84 e9       	ldi	r24, 0x94	; 148
     b0e:	80 93 bc 00 	sts	0x00BC, r24
				return TWI_ERROR_SlaveNotReady;
     b12:	84 e0       	ldi	r24, 0x04	; 4
     b14:	08 95       	ret

			_delay_us(10);
		}

		if (!(TimeoutRemaining))
		  return TWI_ERROR_SlaveResponseTimeout;
     b16:	83 e0       	ldi	r24, 0x03	; 3
     b18:	08 95       	ret

		switch (TWSR & TW_STATUS_MASK)
		{
			case TW_MT_SLA_ACK:
			case TW_MR_SLA_ACK:
				return TWI_ERROR_NoError;
     b1a:	80 e0       	ldi	r24, 0x00	; 0
			default:
				TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
				return TWI_ERROR_SlaveNotReady;
		}
	}
}
     b1c:	08 95       	ret

00000b1e <TWI_SendByte>:

bool TWI_SendByte(const uint8_t Byte)
{
	TWDR = Byte;
     b1e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = ((1 << TWINT) | (1 << TWEN));
     b22:	84 e8       	ldi	r24, 0x84	; 132
     b24:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR & (1 << TWINT)));
     b28:	80 91 bc 00 	lds	r24, 0x00BC
     b2c:	87 ff       	sbrs	r24, 7
     b2e:	fc cf       	rjmp	.-8      	; 0xb28 <TWI_SendByte+0xa>

	return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
     b30:	90 91 b9 00 	lds	r25, 0x00B9
     b34:	98 7f       	andi	r25, 0xF8	; 248
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	98 32       	cpi	r25, 0x28	; 40
     b3a:	09 f0       	breq	.+2      	; 0xb3e <TWI_SendByte+0x20>
     b3c:	80 e0       	ldi	r24, 0x00	; 0
}
     b3e:	08 95       	ret

00000b40 <TWI_ReceiveByte>:
bool TWI_ReceiveByte(uint8_t* const Byte,
					 const bool LastByte)
{
	uint8_t TWCRMask;

	if (LastByte)
     b40:	66 23       	and	r22, r22
     b42:	11 f0       	breq	.+4      	; 0xb48 <TWI_ReceiveByte+0x8>
	  TWCRMask = ((1 << TWINT) | (1 << TWEN));
     b44:	24 e8       	ldi	r18, 0x84	; 132
     b46:	01 c0       	rjmp	.+2      	; 0xb4a <TWI_ReceiveByte+0xa>
	else
	  TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));
     b48:	24 ec       	ldi	r18, 0xC4	; 196

	TWCR = TWCRMask;
     b4a:	20 93 bc 00 	sts	0x00BC, r18
	while (!(TWCR & (1 << TWINT)));
     b4e:	20 91 bc 00 	lds	r18, 0x00BC
     b52:	27 ff       	sbrs	r18, 7
     b54:	fc cf       	rjmp	.-8      	; 0xb4e <TWI_ReceiveByte+0xe>
	*Byte = TWDR;
     b56:	20 91 bb 00 	lds	r18, 0x00BB
     b5a:	fc 01       	movw	r30, r24
     b5c:	20 83       	st	Z, r18

	uint8_t Status = (TWSR & TW_STATUS_MASK);
     b5e:	90 91 b9 00 	lds	r25, 0x00B9
     b62:	98 7f       	andi	r25, 0xF8	; 248

	return ((LastByte) ? (Status == TW_MR_DATA_NACK) : (Status == TW_MR_DATA_ACK));
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	66 23       	and	r22, r22
     b68:	19 f0       	breq	.+6      	; 0xb70 <TWI_ReceiveByte+0x30>
     b6a:	98 35       	cpi	r25, 0x58	; 88
     b6c:	21 f0       	breq	.+8      	; 0xb76 <TWI_ReceiveByte+0x36>
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <TWI_ReceiveByte+0x34>
     b70:	90 35       	cpi	r25, 0x50	; 80
     b72:	09 f0       	breq	.+2      	; 0xb76 <TWI_ReceiveByte+0x36>
     b74:	80 e0       	ldi	r24, 0x00	; 0
}
     b76:	08 95       	ret

00000b78 <TWI_ReadPacket>:
                       const uint8_t TimeoutMS,
                       const uint8_t* InternalAddress,
                       uint8_t InternalAddressLen,
                       uint8_t* Buffer,
                       uint8_t Length)
{
     b78:	af 92       	push	r10
     b7a:	bf 92       	push	r11
     b7c:	cf 92       	push	r12
     b7e:	df 92       	push	r13
     b80:	ef 92       	push	r14
     b82:	ff 92       	push	r15
     b84:	0f 93       	push	r16
     b86:	1f 93       	push	r17
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29
     b8c:	00 d0       	rcall	.+0      	; 0xb8e <TWI_ReadPacket+0x16>
     b8e:	1f 92       	push	r1
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	d8 2e       	mov	r13, r24
     b96:	c6 2e       	mov	r12, r22
	uint8_t ErrorCode;

	if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
     b98:	8e 7f       	andi	r24, 0xFE	; 254
     b9a:	29 83       	std	Y+1, r18	; 0x01
     b9c:	4a 83       	std	Y+2, r20	; 0x02
     b9e:	5b 83       	std	Y+3, r21	; 0x03
     ba0:	5c df       	rcall	.-328    	; 0xa5a <TWI_StartTransmission>
     ba2:	f8 2e       	mov	r15, r24
     ba4:	29 81       	ldd	r18, Y+1	; 0x01
     ba6:	4a 81       	ldd	r20, Y+2	; 0x02
     ba8:	5b 81       	ldd	r21, Y+3	; 0x03
     baa:	88 23       	and	r24, r24
     bac:	79 f0       	breq	.+30     	; 0xbcc <TWI_ReadPacket+0x54>
     bae:	2c c0       	rjmp	.+88     	; 0xc08 <TWI_ReadPacket+0x90>
     bb0:	f5 01       	movw	r30, r10
	                                       TimeoutMS)) == TWI_ERROR_NoError)
	{
		while (InternalAddressLen--)
		{
			if (!(TWI_SendByte(*(InternalAddress++))))
     bb2:	81 91       	ld	r24, Z+
     bb4:	5f 01       	movw	r10, r30
     bb6:	b3 df       	rcall	.-154    	; 0xb1e <TWI_SendByte>
     bb8:	81 11       	cpse	r24, r1
     bba:	0b c0       	rjmp	.+22     	; 0xbd2 <TWI_ReadPacket+0x5a>
     bbc:	6c 2d       	mov	r22, r12
     bbe:	8d 2d       	mov	r24, r13
				ErrorCode = TWI_ERROR_SlaveNAK;
				break;
			}
		}

		if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_READ,
     bc0:	81 60       	ori	r24, 0x01	; 1
     bc2:	4b df       	rcall	.-362    	; 0xa5a <TWI_StartTransmission>
     bc4:	f8 2e       	mov	r15, r24
     bc6:	88 23       	and	r24, r24
     bc8:	39 f0       	breq	.+14     	; 0xbd8 <TWI_ReadPacket+0x60>
     bca:	1e c0       	rjmp	.+60     	; 0xc08 <TWI_ReadPacket+0x90>
     bcc:	5a 01       	movw	r10, r20
     bce:	f2 2e       	mov	r15, r18
     bd0:	f4 0e       	add	r15, r20
                       uint8_t* Buffer,
                       uint8_t Length)
{
	uint8_t ErrorCode;

	if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
     bd2:	fa 10       	cpse	r15, r10
	uint8_t Status = (TWSR & TW_STATUS_MASK);

	return ((LastByte) ? (Status == TW_MR_DATA_NACK) : (Status == TW_MR_DATA_ACK));
}

uint8_t TWI_ReadPacket(const uint8_t SlaveAddress,
     bd4:	ed cf       	rjmp	.-38     	; 0xbb0 <TWI_ReadPacket+0x38>
     bd6:	f2 cf       	rjmp	.-28     	; 0xbbc <TWI_ReadPacket+0x44>
	uint8_t ErrorCode;

	if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
	                                       TimeoutMS)) == TWI_ERROR_NoError)
	{
		while (InternalAddressLen--)
     bd8:	ea 94       	dec	r14
     bda:	0d c0       	rjmp	.+26     	; 0xbf6 <TWI_ReadPacket+0x7e>
     bdc:	68 01       	movw	r12, r16
     bde:	ff ef       	ldi	r31, 0xFF	; 255
     be0:	cf 1a       	sub	r12, r31
		if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_READ,
											   TimeoutMS)) == TWI_ERROR_NoError)
		{
			while (Length--)
			{
				if (!(TWI_ReceiveByte(Buffer++, (Length == 0))))
     be2:	df 0a       	sbc	r13, r31
     be4:	61 e0       	ldi	r22, 0x01	; 1
     be6:	e1 10       	cpse	r14, r1
     be8:	60 e0       	ldi	r22, 0x00	; 0
     bea:	c8 01       	movw	r24, r16
     bec:	a9 df       	rcall	.-174    	; 0xb40 <TWI_ReceiveByte>
     bee:	ea 94       	dec	r14
     bf0:	88 23       	and	r24, r24
     bf2:	29 f0       	breq	.+10     	; 0xbfe <TWI_ReadPacket+0x86>
     bf4:	86 01       	movw	r16, r12
     bf6:	8f ef       	ldi	r24, 0xFF	; 255
     bf8:	e8 12       	cpse	r14, r24
     bfa:	f0 cf       	rjmp	.-32     	; 0xbdc <TWI_ReadPacket+0x64>
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <TWI_ReadPacket+0x8a>
		}

		if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_READ,
											   TimeoutMS)) == TWI_ERROR_NoError)
		{
			while (Length--)
     bfe:	85 e0       	ldi	r24, 0x05	; 5
     c00:	f8 2e       	mov	r15, r24
     c02:	84 e9       	ldi	r24, 0x94	; 148
     c04:	80 93 bc 00 	sts	0x00BC, r24
			{
				if (!(TWI_ReceiveByte(Buffer++, (Length == 0))))
				{
					ErrorCode = TWI_ERROR_SlaveNAK;
     c08:	8f 2d       	mov	r24, r15

			/** Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
			static inline void TWI_StopTransmission(void) ATTR_ALWAYS_INLINE;
			static inline void TWI_StopTransmission(void)
			{
				TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
     c0a:	0f 90       	pop	r0
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
			TWI_StopTransmission();
		}
	}

	return ErrorCode;
}
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	1f 91       	pop	r17
     c16:	0f 91       	pop	r16
     c18:	ff 90       	pop	r15
     c1a:	ef 90       	pop	r14
     c1c:	df 90       	pop	r13
     c1e:	cf 90       	pop	r12
     c20:	bf 90       	pop	r11
     c22:	af 90       	pop	r10
     c24:	08 95       	ret

00000c26 <TWI_WritePacket>:
     c26:	af 92       	push	r10
     c28:	bf 92       	push	r11
     c2a:	df 92       	push	r13
     c2c:	ef 92       	push	r14
                        const uint8_t TimeoutMS,
                        const uint8_t* InternalAddress,
                        uint8_t InternalAddressLen,
                        const uint8_t* Buffer,
                        uint8_t Length)
{
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
     c38:	00 d0       	rcall	.+0      	; 0xc3a <TWI_WritePacket+0x14>
     c3a:	1f 92       	push	r1
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
     c40:	f1 2e       	mov	r15, r17
	uint8_t ErrorCode;

	if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
     c42:	8e 7f       	andi	r24, 0xFE	; 254
     c44:	29 83       	std	Y+1, r18	; 0x01
     c46:	4a 83       	std	Y+2, r20	; 0x02
     c48:	5b 83       	std	Y+3, r21	; 0x03
     c4a:	07 df       	rcall	.-498    	; 0xa5a <TWI_StartTransmission>
     c4c:	18 2f       	mov	r17, r24
     c4e:	29 81       	ldd	r18, Y+1	; 0x01
     c50:	4a 81       	ldd	r20, Y+2	; 0x02
     c52:	5b 81       	ldd	r21, Y+3	; 0x03
     c54:	88 23       	and	r24, r24
     c56:	49 f0       	breq	.+18     	; 0xc6a <TWI_WritePacket+0x44>
     c58:	1e c0       	rjmp	.+60     	; 0xc96 <TWI_WritePacket+0x70>
     c5a:	f5 01       	movw	r30, r10
	                                       TimeoutMS)) == TWI_ERROR_NoError)
	{
		while (InternalAddressLen--)
		{
			if (!(TWI_SendByte(*(InternalAddress++))))
     c5c:	81 91       	ld	r24, Z+
     c5e:	5f 01       	movw	r10, r30
     c60:	5e df       	rcall	.-324    	; 0xb1e <TWI_SendByte>
     c62:	81 11       	cpse	r24, r1
     c64:	05 c0       	rjmp	.+10     	; 0xc70 <TWI_WritePacket+0x4a>
     c66:	15 e0       	ldi	r17, 0x05	; 5
     c68:	0e c0       	rjmp	.+28     	; 0xc86 <TWI_WritePacket+0x60>
			{
				ErrorCode = TWI_ERROR_SlaveNAK;
     c6a:	5a 01       	movw	r10, r20
     c6c:	d2 2e       	mov	r13, r18
                        const uint8_t* Buffer,
                        uint8_t Length)
{
	uint8_t ErrorCode;

	if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
     c6e:	d4 0e       	add	r13, r20
	}

	return ErrorCode;
}

uint8_t TWI_WritePacket(const uint8_t SlaveAddress,
     c70:	da 10       	cpse	r13, r10
     c72:	f3 cf       	rjmp	.-26     	; 0xc5a <TWI_WritePacket+0x34>
	uint8_t ErrorCode;

	if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
	                                       TimeoutMS)) == TWI_ERROR_NoError)
	{
		while (InternalAddressLen--)
     c74:	08 c0       	rjmp	.+16     	; 0xc86 <TWI_WritePacket+0x60>
     c76:	f5 01       	movw	r30, r10
     c78:	81 91       	ld	r24, Z+
			}
		}

		while (Length--)
		{
			if (!(TWI_SendByte(*(Buffer++))))
     c7a:	5f 01       	movw	r10, r30
     c7c:	50 df       	rcall	.-352    	; 0xb1e <TWI_SendByte>
     c7e:	81 11       	cpse	r24, r1
     c80:	05 c0       	rjmp	.+10     	; 0xc8c <TWI_WritePacket+0x66>
     c82:	15 e0       	ldi	r17, 0x05	; 5
     c84:	05 c0       	rjmp	.+10     	; 0xc90 <TWI_WritePacket+0x6a>
     c86:	a0 2e       	mov	r10, r16
			{
				ErrorCode = TWI_ERROR_SlaveNAK;
     c88:	bf 2c       	mov	r11, r15
     c8a:	0e 0d       	add	r16, r14
	{
		while (InternalAddressLen--)
		{
			if (!(TWI_SendByte(*(InternalAddress++))))
			{
				ErrorCode = TWI_ERROR_SlaveNAK;
     c8c:	0a 11       	cpse	r16, r10
     c8e:	f3 cf       	rjmp	.-26     	; 0xc76 <TWI_WritePacket+0x50>
	}

	return ErrorCode;
}

uint8_t TWI_WritePacket(const uint8_t SlaveAddress,
     c90:	84 e9       	ldi	r24, 0x94	; 148
				ErrorCode = TWI_ERROR_SlaveNAK;
				break;
			}
		}

		while (Length--)
     c92:	80 93 bc 00 	sts	0x00BC, r24
     c96:	81 2f       	mov	r24, r17
     c98:	0f 90       	pop	r0
     c9a:	0f 90       	pop	r0

		TWI_StopTransmission();
	}

	return ErrorCode;
}
     c9c:	0f 90       	pop	r0
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	1f 91       	pop	r17
     ca4:	0f 91       	pop	r16
     ca6:	ff 90       	pop	r15
     ca8:	ef 90       	pop	r14
     caa:	df 90       	pop	r13
     cac:	bf 90       	pop	r11
     cae:	af 90       	pop	r10
     cb0:	08 95       	ret

00000cb2 <ADC_StartReading>:
     cb2:	80 93 7c 00 	sts	0x007C, r24
     cb6:	90 ff       	sbrs	r25, 0
			static inline void ADC_StartReading(const uint16_t MUXMask)
			{
				ADMUX = MUXMask;

				#if (defined(__AVR_ATmega16U4__)  || defined(__AVR_ATmega32U4__) || defined(__DOXYGEN__))
				if (MUXMask & (1 << 8))
     cb8:	04 c0       	rjmp	.+8      	; 0xcc2 <ADC_StartReading+0x10>
				  ADCSRB |=  (1 << MUX5);
     cba:	80 91 7b 00 	lds	r24, 0x007B
     cbe:	80 62       	ori	r24, 0x20	; 32
     cc0:	03 c0       	rjmp	.+6      	; 0xcc8 <ADC_StartReading+0x16>
				else
				  ADCSRB &= ~(1 << MUX5);
     cc2:	80 91 7b 00 	lds	r24, 0x007B
     cc6:	8f 7d       	andi	r24, 0xDF	; 223
     cc8:	80 93 7b 00 	sts	0x007B, r24
				#endif

				ADCSRA |= (1 << ADSC);
     ccc:	80 91 7a 00 	lds	r24, 0x007A
     cd0:	80 64       	ori	r24, 0x40	; 64
     cd2:	80 93 7a 00 	sts	0x007A, r24
     cd6:	08 95       	ret

00000cd8 <LCDbrightnessUpdate>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     cd8:	80 91 c8 00 	lds	r24, 0x00C8
     cdc:	85 ff       	sbrs	r24, 5
     cde:	fc cf       	rjmp	.-8      	; 0xcd8 <LCDbrightnessUpdate>
				UDR1 = DataByte;
     ce0:	8c e7       	ldi	r24, 0x7C	; 124
     ce2:	80 93 ce 00 	sts	0x00CE, r24
        Serial_SendString(data);
}

static void LCDbrightnessUpdate(void) {
    Serial_SendByte(0x7C);
    Serial_SendByte(128+brightness);
     ce6:	80 91 07 01 	lds	r24, 0x0107
     cea:	80 58       	subi	r24, 0x80	; 128
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     cec:	90 91 c8 00 	lds	r25, 0x00C8
     cf0:	95 ff       	sbrs	r25, 5
     cf2:	fc cf       	rjmp	.-8      	; 0xcec <LCDbrightnessUpdate+0x14>
				UDR1 = DataByte;
     cf4:	80 93 ce 00 	sts	0x00CE, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cf8:	2f e7       	ldi	r18, 0x7F	; 127
     cfa:	8a e1       	ldi	r24, 0x1A	; 26
     cfc:	96 e0       	ldi	r25, 0x06	; 6
     cfe:	21 50       	subi	r18, 0x01	; 1
     d00:	80 40       	sbci	r24, 0x00	; 0
     d02:	90 40       	sbci	r25, 0x00	; 0
     d04:	e1 f7       	brne	.-8      	; 0xcfe <LCDbrightnessUpdate+0x26>
     d06:	00 c0       	rjmp	.+0      	; 0xd08 <LCDbrightnessUpdate+0x30>
     d08:	00 00       	nop
     d0a:	08 95       	ret

00000d0c <LCDwrite>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     d0c:	20 91 c8 00 	lds	r18, 0x00C8
     d10:	25 ff       	sbrs	r18, 5
     d12:	fc cf       	rjmp	.-8      	; 0xd0c <LCDwrite>
				UDR1 = DataByte;
     d14:	2e ef       	ldi	r18, 0xFE	; 254
     d16:	20 93 ce 00 	sts	0x00CE, r18
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     d1a:	20 91 c8 00 	lds	r18, 0x00C8
     d1e:	25 ff       	sbrs	r18, 5
     d20:	fc cf       	rjmp	.-8      	; 0xd1a <LCDwrite+0xe>
				UDR1 = DataByte;
     d22:	21 e0       	ldi	r18, 0x01	; 1
     d24:	20 93 ce 00 	sts	0x00CE, r18
}

static void LCDwrite(char* data) {
        Serial_SendByte(0xFE);
        Serial_SendByte(0x01);
        Serial_SendString(data);
     d28:	8c ce       	rjmp	.-744    	; 0xa42 <Serial_SendString>

00000d2a <LCDnextLine>:
     d2a:	20 91 c8 00 	lds	r18, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     d2e:	25 ff       	sbrs	r18, 5
     d30:	fc cf       	rjmp	.-8      	; 0xd2a <LCDnextLine>
				UDR1 = DataByte;
     d32:	2e ef       	ldi	r18, 0xFE	; 254
     d34:	20 93 ce 00 	sts	0x00CE, r18
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     d38:	20 91 c8 00 	lds	r18, 0x00C8
     d3c:	25 ff       	sbrs	r18, 5
     d3e:	fc cf       	rjmp	.-8      	; 0xd38 <LCDnextLine+0xe>
				UDR1 = DataByte;
     d40:	20 ec       	ldi	r18, 0xC0	; 192
     d42:	20 93 ce 00 	sts	0x00CE, r18
}

static void LCDnextLine(char* data) {
        Serial_SendByte(0xFE);
        Serial_SendByte(192);
        Serial_SendString(data);
     d46:	7d ce       	rjmp	.-774    	; 0xa42 <Serial_SendString>

00000d48 <ButtonManage>:
     d48:	af 92       	push	r10
    ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_CHANNEL4);
    TWI_WritePacket(G_ADDRESS, 10, &DLPF_FS, sizeof(DLPF_FS), &gyroSetup, sizeof(gyroSetup));
    TWI_WritePacket(G_ADDRESS, 10, &SMPLRT_DIV, sizeof(SMPLRT_DIV), &gyroSampleRate, sizeof(gyroSampleRate));
}

void ButtonManage(void) {
     d4a:	bf 92       	push	r11
     d4c:	cf 92       	push	r12
     d4e:	df 92       	push	r13
     d50:	ef 92       	push	r14
     d52:	ff 92       	push	r15
     d54:	0f 93       	push	r16
     d56:	1f 93       	push	r17
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
    uint8_t integrator = 0;
    int output         = 0;
    int pin            = 0;

    if (port == 'B')
        pin = (!(PINB & inputPin));
     d5c:	33 b1       	in	r19, 0x03	; 3
     d5e:	34 72       	andi	r19, 0x24	; 36
     d60:	84 e1       	ldi	r24, 0x14	; 20
     d62:	90 e0       	ldi	r25, 0x00	; 0
#define GZ_L    0x22

//Functions
//========================
inline int debounce(int inputPin, char port) {
    uint8_t integrator = 0;
     d64:	20 e0       	ldi	r18, 0x00	; 0
        pin = (!(PIND & inputPin));
    else
        pin = (!(PINE & inputPin));

    for(int i=0; i < MAXIMUM; i++) {
        if (pin) {
     d66:	31 11       	cpse	r19, r1
     d68:	04 c0       	rjmp	.+8      	; 0xd72 <ButtonManage+0x2a>
            if (integrator > 0) {
     d6a:	22 23       	and	r18, r18
     d6c:	29 f0       	breq	.+10     	; 0xd78 <ButtonManage+0x30>
                integrator--;
     d6e:	21 50       	subi	r18, 0x01	; 1
     d70:	03 c0       	rjmp	.+6      	; 0xd78 <ButtonManage+0x30>
            }
        } else if (integrator < MAXIMUM) {
     d72:	24 31       	cpi	r18, 0x14	; 20
     d74:	08 f4       	brcc	.+2      	; 0xd78 <ButtonManage+0x30>
            integrator++;
     d76:	2f 5f       	subi	r18, 0xFF	; 255
     d78:	01 97       	sbiw	r24, 0x01	; 1
    else if (port == 'D')
        pin = (!(PIND & inputPin));
    else
        pin = (!(PINE & inputPin));

    for(int i=0; i < MAXIMUM; i++) {
     d7a:	a9 f7       	brne	.-22     	; 0xd66 <ButtonManage+0x1e>
            }
        } else if (integrator < MAXIMUM) {
            integrator++;
        }
    }
    if (integrator == 0) {
     d7c:	22 23       	and	r18, r18
     d7e:	21 f0       	breq	.+8      	; 0xd88 <ButtonManage+0x40>
        output = 0;
    } else if (integrator >= MAXIMUM) {
     d80:	01 e0       	ldi	r16, 0x01	; 1
     d82:	10 e0       	ldi	r17, 0x00	; 0
     d84:	24 31       	cpi	r18, 0x14	; 20
     d86:	10 f4       	brcc	.+4      	; 0xd8c <ButtonManage+0x44>
        } else if (integrator < MAXIMUM) {
            integrator++;
        }
    }
    if (integrator == 0) {
        output = 0;
     d88:	00 e0       	ldi	r16, 0x00	; 0
     d8a:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t integrator = 0;
    int output         = 0;
    int pin            = 0;

    if (port == 'B')
        pin = (!(PINB & inputPin));
     d8c:	33 b1       	in	r19, 0x03	; 3
     d8e:	38 70       	andi	r19, 0x08	; 8
     d90:	84 e1       	ldi	r24, 0x14	; 20
     d92:	90 e0       	ldi	r25, 0x00	; 0
#define GZ_L    0x22

//Functions
//========================
inline int debounce(int inputPin, char port) {
    uint8_t integrator = 0;
     d94:	20 e0       	ldi	r18, 0x00	; 0
        pin = (!(PIND & inputPin));
    else
        pin = (!(PINE & inputPin));

    for(int i=0; i < MAXIMUM; i++) {
        if (pin) {
     d96:	31 11       	cpse	r19, r1
     d98:	04 c0       	rjmp	.+8      	; 0xda2 <ButtonManage+0x5a>
            if (integrator > 0) {
     d9a:	22 23       	and	r18, r18
     d9c:	29 f0       	breq	.+10     	; 0xda8 <ButtonManage+0x60>
                integrator--;
     d9e:	21 50       	subi	r18, 0x01	; 1
     da0:	03 c0       	rjmp	.+6      	; 0xda8 <ButtonManage+0x60>
            }
        } else if (integrator < MAXIMUM) {
     da2:	24 31       	cpi	r18, 0x14	; 20
     da4:	08 f4       	brcc	.+2      	; 0xda8 <ButtonManage+0x60>
            integrator++;
     da6:	2f 5f       	subi	r18, 0xFF	; 255
     da8:	01 97       	sbiw	r24, 0x01	; 1
    else if (port == 'D')
        pin = (!(PIND & inputPin));
    else
        pin = (!(PINE & inputPin));

    for(int i=0; i < MAXIMUM; i++) {
     daa:	a9 f7       	brne	.-22     	; 0xd96 <ButtonManage+0x4e>
            }
        } else if (integrator < MAXIMUM) {
            integrator++;
        }
    }
    if (integrator == 0) {
     dac:	22 23       	and	r18, r18
     dae:	21 f0       	breq	.+8      	; 0xdb8 <ButtonManage+0x70>
        output = 0;
    } else if (integrator >= MAXIMUM) {
     db0:	c1 e0       	ldi	r28, 0x01	; 1
     db2:	d0 e0       	ldi	r29, 0x00	; 0
     db4:	24 31       	cpi	r18, 0x14	; 20
     db6:	10 f4       	brcc	.+4      	; 0xdbc <ButtonManage+0x74>
        } else if (integrator < MAXIMUM) {
            integrator++;
        }
    }
    if (integrator == 0) {
        output = 0;
     db8:	c0 e0       	ldi	r28, 0x00	; 0
     dba:	d0 e0       	ldi	r29, 0x00	; 0
    else if (port == 'C')
        pin = (!(PINC & inputPin));
    else if (port == 'D')
        pin = (!(PIND & inputPin));
    else
        pin = (!(PINE & inputPin));
     dbc:	3c b1       	in	r19, 0x0c	; 12
     dbe:	30 74       	andi	r19, 0x40	; 64
     dc0:	84 e1       	ldi	r24, 0x14	; 20
     dc2:	90 e0       	ldi	r25, 0x00	; 0
#define GZ_L    0x22

//Functions
//========================
inline int debounce(int inputPin, char port) {
    uint8_t integrator = 0;
     dc4:	20 e0       	ldi	r18, 0x00	; 0
        pin = (!(PIND & inputPin));
    else
        pin = (!(PINE & inputPin));

    for(int i=0; i < MAXIMUM; i++) {
        if (pin) {
     dc6:	31 11       	cpse	r19, r1
     dc8:	04 c0       	rjmp	.+8      	; 0xdd2 <ButtonManage+0x8a>
            if (integrator > 0) {
     dca:	22 23       	and	r18, r18
     dcc:	29 f0       	breq	.+10     	; 0xdd8 <ButtonManage+0x90>
                integrator--;
     dce:	21 50       	subi	r18, 0x01	; 1
     dd0:	03 c0       	rjmp	.+6      	; 0xdd8 <ButtonManage+0x90>
            }
        } else if (integrator < MAXIMUM) {
     dd2:	24 31       	cpi	r18, 0x14	; 20
     dd4:	08 f4       	brcc	.+2      	; 0xdd8 <ButtonManage+0x90>
            integrator++;
     dd6:	2f 5f       	subi	r18, 0xFF	; 255
     dd8:	01 97       	sbiw	r24, 0x01	; 1
    else if (port == 'D')
        pin = (!(PIND & inputPin));
    else
        pin = (!(PINE & inputPin));

    for(int i=0; i < MAXIMUM; i++) {
     dda:	a9 f7       	brne	.-22     	; 0xdc6 <ButtonManage+0x7e>
            }
        } else if (integrator < MAXIMUM) {
            integrator++;
        }
    }
    if (integrator == 0) {
     ddc:	22 23       	and	r18, r18
     dde:	41 f0       	breq	.+16     	; 0xdf0 <ButtonManage+0xa8>
        output = 0;
    } else if (integrator >= MAXIMUM) {
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	24 31       	cpi	r18, 0x14	; 20
     de6:	10 f4       	brcc	.+4      	; 0xdec <ButtonManage+0xa4>
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	90 e0       	ldi	r25, 0x00	; 0
        } else if (integrator < MAXIMUM) {
            integrator++;
        }
    }
    if (integrator == 0) {
        output = 0;
     dec:	7c 01       	movw	r14, r24
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <ButtonManage+0xac>
     df0:	e1 2c       	mov	r14, r1
     df2:	f1 2c       	mov	r15, r1
    uint8_t integrator = 0;
    int output         = 0;
    int pin            = 0;

    if (port == 'B')
        pin = (!(PINB & inputPin));
     df4:	33 b1       	in	r19, 0x03	; 3
     df6:	30 71       	andi	r19, 0x10	; 16
     df8:	84 e1       	ldi	r24, 0x14	; 20
     dfa:	90 e0       	ldi	r25, 0x00	; 0
#define GZ_L    0x22

//Functions
//========================
inline int debounce(int inputPin, char port) {
    uint8_t integrator = 0;
     dfc:	20 e0       	ldi	r18, 0x00	; 0
        pin = (!(PIND & inputPin));
    else
        pin = (!(PINE & inputPin));

    for(int i=0; i < MAXIMUM; i++) {
        if (pin) {
     dfe:	31 11       	cpse	r19, r1
     e00:	04 c0       	rjmp	.+8      	; 0xe0a <ButtonManage+0xc2>
            if (integrator > 0) {
     e02:	22 23       	and	r18, r18
     e04:	29 f0       	breq	.+10     	; 0xe10 <ButtonManage+0xc8>
                integrator--;
     e06:	21 50       	subi	r18, 0x01	; 1
     e08:	03 c0       	rjmp	.+6      	; 0xe10 <ButtonManage+0xc8>
            }
        } else if (integrator < MAXIMUM) {
     e0a:	24 31       	cpi	r18, 0x14	; 20
     e0c:	08 f4       	brcc	.+2      	; 0xe10 <ButtonManage+0xc8>
            integrator++;
     e0e:	2f 5f       	subi	r18, 0xFF	; 255
     e10:	01 97       	sbiw	r24, 0x01	; 1
    else if (port == 'D')
        pin = (!(PIND & inputPin));
    else
        pin = (!(PINE & inputPin));

    for(int i=0; i < MAXIMUM; i++) {
     e12:	a9 f7       	brne	.-22     	; 0xdfe <ButtonManage+0xb6>
            }
        } else if (integrator < MAXIMUM) {
            integrator++;
        }
    }
    if (integrator == 0) {
     e14:	22 23       	and	r18, r18
     e16:	41 f0       	breq	.+16     	; 0xe28 <ButtonManage+0xe0>
        output = 0;
    } else if (integrator >= MAXIMUM) {
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	24 31       	cpi	r18, 0x14	; 20
     e1e:	10 f4       	brcc	.+4      	; 0xe24 <ButtonManage+0xdc>
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	90 e0       	ldi	r25, 0x00	; 0
        } else if (integrator < MAXIMUM) {
            integrator++;
        }
    }
    if (integrator == 0) {
        output = 0;
     e24:	6c 01       	movw	r12, r24
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <ButtonManage+0xe4>
     e28:	c1 2c       	mov	r12, r1
     e2a:	d1 2c       	mov	r13, r1
    if (port == 'B')
        pin = (!(PINB & inputPin));
    else if (port == 'C')
        pin = (!(PINC & inputPin));
    else if (port == 'D')
        pin = (!(PIND & inputPin));
     e2c:	39 b1       	in	r19, 0x09	; 9
     e2e:	30 71       	andi	r19, 0x10	; 16
     e30:	84 e1       	ldi	r24, 0x14	; 20
     e32:	90 e0       	ldi	r25, 0x00	; 0
#define GZ_L    0x22

//Functions
//========================
inline int debounce(int inputPin, char port) {
    uint8_t integrator = 0;
     e34:	20 e0       	ldi	r18, 0x00	; 0
        pin = (!(PIND & inputPin));
    else
        pin = (!(PINE & inputPin));

    for(int i=0; i < MAXIMUM; i++) {
        if (pin) {
     e36:	31 11       	cpse	r19, r1
     e38:	04 c0       	rjmp	.+8      	; 0xe42 <ButtonManage+0xfa>
            if (integrator > 0) {
     e3a:	22 23       	and	r18, r18
     e3c:	29 f0       	breq	.+10     	; 0xe48 <ButtonManage+0x100>
                integrator--;
     e3e:	21 50       	subi	r18, 0x01	; 1
     e40:	03 c0       	rjmp	.+6      	; 0xe48 <ButtonManage+0x100>
            }
        } else if (integrator < MAXIMUM) {
     e42:	24 31       	cpi	r18, 0x14	; 20
     e44:	08 f4       	brcc	.+2      	; 0xe48 <ButtonManage+0x100>
            integrator++;
     e46:	2f 5f       	subi	r18, 0xFF	; 255
     e48:	01 97       	sbiw	r24, 0x01	; 1
    else if (port == 'D')
        pin = (!(PIND & inputPin));
    else
        pin = (!(PINE & inputPin));

    for(int i=0; i < MAXIMUM; i++) {
     e4a:	a9 f7       	brne	.-22     	; 0xe36 <ButtonManage+0xee>
            }
        } else if (integrator < MAXIMUM) {
            integrator++;
        }
    }
    if (integrator == 0) {
     e4c:	22 23       	and	r18, r18
     e4e:	41 f0       	breq	.+16     	; 0xe60 <ButtonManage+0x118>
        output = 0;
    } else if (integrator >= MAXIMUM) {
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	24 31       	cpi	r18, 0x14	; 20
     e56:	10 f4       	brcc	.+4      	; 0xe5c <ButtonManage+0x114>
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	90 e0       	ldi	r25, 0x00	; 0
        } else if (integrator < MAXIMUM) {
            integrator++;
        }
    }
    if (integrator == 0) {
        output = 0;
     e5c:	5c 01       	movw	r10, r24
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <ButtonManage+0x11c>
     e60:	a1 2c       	mov	r10, r1
     e62:	b1 2c       	mov	r11, r1
    int leftClick   = debounce(buttonLeft, 'B');
    int rightClick  = debounce(buttonRight, 'B');
    int upClick     = debounce(buttonUp, 'E');
    int downClick   = debounce(buttonDown, 'B');
    int centerClick = debounce(buttonCenter, 'D');
    if (!(leftClick || rightClick || upClick || downClick || centerClick)) {
     e64:	01 15       	cp	r16, r1
     e66:	11 05       	cpc	r17, r1
     e68:	69 f4       	brne	.+26     	; 0xe84 <ButtonManage+0x13c>
     e6a:	20 97       	sbiw	r28, 0x00	; 0
     e6c:	59 f4       	brne	.+22     	; 0xe84 <ButtonManage+0x13c>
     e6e:	e1 14       	cp	r14, r1
     e70:	f1 04       	cpc	r15, r1
     e72:	41 f4       	brne	.+16     	; 0xe84 <ButtonManage+0x13c>
     e74:	c1 14       	cp	r12, r1
     e76:	d1 04       	cpc	r13, r1
     e78:	29 f4       	brne	.+10     	; 0xe84 <ButtonManage+0x13c>
     e7a:	a1 14       	cp	r10, r1
     e7c:	b1 04       	cpc	r11, r1
     e7e:	11 f4       	brne	.+4      	; 0xe84 <ButtonManage+0x13c>
        click = false;
     e80:	10 92 81 01 	sts	0x0181, r1
    }

    if (!click) {
     e84:	80 91 81 01 	lds	r24, 0x0181
     e88:	81 11       	cpse	r24, r1
     e8a:	60 c1       	rjmp	.+704    	; 0x114c <ButtonManage+0x404>
        switch (menuState) {
     e8c:	80 91 0b 01 	lds	r24, 0x010B
     e90:	86 30       	cpi	r24, 0x06	; 6
     e92:	09 f4       	brne	.+2      	; 0xe96 <ButtonManage+0x14e>
     e94:	b1 c0       	rjmp	.+354    	; 0xff8 <ButtonManage+0x2b0>
     e96:	80 f4       	brcc	.+32     	; 0xeb8 <ButtonManage+0x170>
     e98:	82 30       	cpi	r24, 0x02	; 2
     e9a:	09 f4       	brne	.+2      	; 0xe9e <ButtonManage+0x156>
     e9c:	3f c0       	rjmp	.+126    	; 0xf1c <ButtonManage+0x1d4>
     e9e:	30 f4       	brcc	.+12     	; 0xeac <ButtonManage+0x164>
     ea0:	88 23       	and	r24, r24
     ea2:	f1 f0       	breq	.+60     	; 0xee0 <ButtonManage+0x198>
     ea4:	81 30       	cpi	r24, 0x01	; 1
     ea6:	09 f0       	breq	.+2      	; 0xeaa <ButtonManage+0x162>
     ea8:	42 c1       	rjmp	.+644    	; 0x112e <ButtonManage+0x3e6>
     eaa:	28 c0       	rjmp	.+80     	; 0xefc <ButtonManage+0x1b4>
     eac:	84 30       	cpi	r24, 0x04	; 4
     eae:	09 f4       	brne	.+2      	; 0xeb2 <ButtonManage+0x16a>
     eb0:	72 c0       	rjmp	.+228    	; 0xf96 <ButtonManage+0x24e>
     eb2:	08 f0       	brcs	.+2      	; 0xeb6 <ButtonManage+0x16e>
     eb4:	84 c0       	rjmp	.+264    	; 0xfbe <ButtonManage+0x276>
     eb6:	56 c0       	rjmp	.+172    	; 0xf64 <ButtonManage+0x21c>
     eb8:	89 30       	cpi	r24, 0x09	; 9
     eba:	09 f4       	brne	.+2      	; 0xebe <ButtonManage+0x176>
     ebc:	df c0       	rjmp	.+446    	; 0x107c <ButtonManage+0x334>
     ebe:	38 f4       	brcc	.+14     	; 0xece <ButtonManage+0x186>
     ec0:	87 30       	cpi	r24, 0x07	; 7
     ec2:	09 f4       	brne	.+2      	; 0xec6 <ButtonManage+0x17e>
     ec4:	b6 c0       	rjmp	.+364    	; 0x1032 <ButtonManage+0x2ea>
     ec6:	88 30       	cpi	r24, 0x08	; 8
     ec8:	09 f0       	breq	.+2      	; 0xecc <ButtonManage+0x184>
     eca:	31 c1       	rjmp	.+610    	; 0x112e <ButtonManage+0x3e6>
     ecc:	c6 c0       	rjmp	.+396    	; 0x105a <ButtonManage+0x312>
     ece:	8b 30       	cpi	r24, 0x0B	; 11
     ed0:	09 f4       	brne	.+2      	; 0xed4 <ButtonManage+0x18c>
     ed2:	ec c0       	rjmp	.+472    	; 0x10ac <ButtonManage+0x364>
     ed4:	08 f4       	brcc	.+2      	; 0xed8 <ButtonManage+0x190>
     ed6:	d9 c0       	rjmp	.+434    	; 0x108a <ButtonManage+0x342>
     ed8:	8c 30       	cpi	r24, 0x0C	; 12
     eda:	09 f0       	breq	.+2      	; 0xede <ButtonManage+0x196>
     edc:	28 c1       	rjmp	.+592    	; 0x112e <ButtonManage+0x3e6>
     ede:	f9 c0       	rjmp	.+498    	; 0x10d2 <ButtonManage+0x38a>
            case menuState_init:
                if (upClick)
     ee0:	e1 14       	cp	r14, r1
     ee2:	f1 04       	cpc	r15, r1
     ee4:	19 f0       	breq	.+6      	; 0xeec <ButtonManage+0x1a4>
                    menuState=menuState_settings;
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	80 93 0b 01 	sts	0x010B, r24
                if (downClick)
     eec:	c1 14       	cp	r12, r1
     eee:	d1 04       	cpc	r13, r1
     ef0:	09 f4       	brne	.+2      	; 0xef4 <ButtonManage+0x1ac>
     ef2:	1d c1       	rjmp	.+570    	; 0x112e <ButtonManage+0x3e6>
                    menuState=menuState_adc;
     ef4:	83 e0       	ldi	r24, 0x03	; 3
     ef6:	80 93 0b 01 	sts	0x010B, r24
     efa:	19 c1       	rjmp	.+562    	; 0x112e <ButtonManage+0x3e6>
                break;
            case menuState_settings:
                if (upClick)
     efc:	e1 14       	cp	r14, r1
     efe:	f1 04       	cpc	r15, r1
     f00:	19 f0       	breq	.+6      	; 0xf08 <ButtonManage+0x1c0>
                    menuState=menuState_buttons;
     f02:	8c e0       	ldi	r24, 0x0C	; 12
     f04:	80 93 0b 01 	sts	0x010B, r24
                if (downClick)
     f08:	c1 14       	cp	r12, r1
     f0a:	d1 04       	cpc	r13, r1
     f0c:	11 f0       	breq	.+4      	; 0xf12 <ButtonManage+0x1ca>
                    menuState=menuState_init;
     f0e:	10 92 0b 01 	sts	0x010B, r1
                if (rightClick)
     f12:	cd 2b       	or	r28, r29
     f14:	09 f4       	brne	.+2      	; 0xf18 <ButtonManage+0x1d0>
     f16:	a7 c1       	rjmp	.+846    	; 0x1266 <ButtonManage+0x51e>
                    menuState=menuState_settings_brightness;
     f18:	82 e0       	ldi	r24, 0x02	; 2
     f1a:	d8 c0       	rjmp	.+432    	; 0x10cc <ButtonManage+0x384>
                break;
            case menuState_settings_brightness:
                if (leftClick)
     f1c:	01 15       	cp	r16, r1
     f1e:	11 05       	cpc	r17, r1
     f20:	19 f0       	breq	.+6      	; 0xf28 <ButtonManage+0x1e0>
                    menuState=menuState_settings;
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	80 93 0b 01 	sts	0x010B, r24
                if (rightClick)
     f28:	20 97       	sbiw	r28, 0x00	; 0
     f2a:	19 f0       	breq	.+6      	; 0xf32 <ButtonManage+0x1ea>
                    menuState=menuState_settings;
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	80 93 0b 01 	sts	0x010B, r24
                if (upClick) {
     f32:	e1 14       	cp	r14, r1
     f34:	f1 04       	cpc	r15, r1
     f36:	39 f0       	breq	.+14     	; 0xf46 <ButtonManage+0x1fe>
                    if ((brightness<=30) && ((brightness+5)<=30)) {
     f38:	80 91 07 01 	lds	r24, 0x0107
     f3c:	8a 31       	cpi	r24, 0x1A	; 26
     f3e:	18 f4       	brcc	.+6      	; 0xf46 <ButtonManage+0x1fe>
                        brightness = brightness + 5;
     f40:	8b 5f       	subi	r24, 0xFB	; 251
     f42:	80 93 07 01 	sts	0x0107, r24
                    }
                }
                if (downClick) {
     f46:	c1 14       	cp	r12, r1
     f48:	d1 04       	cpc	r13, r1
     f4a:	09 f4       	brne	.+2      	; 0xf4e <ButtonManage+0x206>
     f4c:	f0 c0       	rjmp	.+480    	; 0x112e <ButtonManage+0x3e6>
                    if ((brightness>=0) && ((brightness-5)>=0)) {
     f4e:	20 91 07 01 	lds	r18, 0x0107
     f52:	82 2f       	mov	r24, r18
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	05 97       	sbiw	r24, 0x05	; 5
     f58:	0c f4       	brge	.+2      	; 0xf5c <ButtonManage+0x214>
     f5a:	e9 c0       	rjmp	.+466    	; 0x112e <ButtonManage+0x3e6>
                        brightness = brightness - 5;
     f5c:	25 50       	subi	r18, 0x05	; 5
     f5e:	20 93 07 01 	sts	0x0107, r18
     f62:	e5 c0       	rjmp	.+458    	; 0x112e <ButtonManage+0x3e6>
                    }
                }
                break;
            case menuState_adc:
                if (upClick) {
     f64:	e1 14       	cp	r14, r1
     f66:	f1 04       	cpc	r15, r1
     f68:	11 f0       	breq	.+4      	; 0xf6e <ButtonManage+0x226>
                    menuState=menuState_init;
     f6a:	10 92 0b 01 	sts	0x010B, r1
                }
                if (downClick) {
     f6e:	c1 14       	cp	r12, r1
     f70:	d1 04       	cpc	r13, r1
     f72:	19 f0       	breq	.+6      	; 0xf7a <ButtonManage+0x232>
                    menuState=menuState_gyro;
     f74:	88 e0       	ldi	r24, 0x08	; 8
     f76:	80 93 0b 01 	sts	0x010B, r24
                }
                if (rightClick) {
     f7a:	cd 2b       	or	r28, r29
     f7c:	09 f4       	brne	.+2      	; 0xf80 <ButtonManage+0x238>
     f7e:	73 c1       	rjmp	.+742    	; 0x1266 <ButtonManage+0x51e>
				DDRF  &= ~(1 << ChannelIndex);
				DIDR0 |=  (1 << ChannelIndex);
				#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
				if (ChannelIndex < 8)
				{
					DDRF  &= ~(1 << ChannelIndex);
     f80:	84 98       	cbi	0x10, 4	; 16
					DIDR0 |=  (1 << ChannelIndex);
     f82:	80 91 7e 00 	lds	r24, 0x007E
     f86:	80 61       	ori	r24, 0x10	; 16
     f88:	80 93 7e 00 	sts	0x007E, r24
                    ADC_SetupChannel(4);
                    ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_CHANNEL4);
     f8c:	84 e4       	ldi	r24, 0x44	; 68
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	90 de       	rcall	.-736    	; 0xcb2 <ADC_StartReading>
     f92:	84 e0       	ldi	r24, 0x04	; 4
                    menuState=menuState_x;
     f94:	9b c0       	rjmp	.+310    	; 0x10cc <ButtonManage+0x384>
     f96:	01 15       	cp	r16, r1
                }
                break;
            case menuState_x:
                if (leftClick) {
     f98:	11 05       	cpc	r17, r1
     f9a:	19 f0       	breq	.+6      	; 0xfa2 <ButtonManage+0x25a>
     f9c:	83 e0       	ldi	r24, 0x03	; 3
                    menuState=menuState_adc;
     f9e:	80 93 0b 01 	sts	0x010B, r24
     fa2:	cd 2b       	or	r28, r29
                }
                if (rightClick) {
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <ButtonManage+0x260>
     fa6:	5f c1       	rjmp	.+702    	; 0x1266 <ButtonManage+0x51e>
     fa8:	85 98       	cbi	0x10, 5	; 16
				DDRF  &= ~(1 << ChannelIndex);
				DIDR0 |=  (1 << ChannelIndex);
				#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
				if (ChannelIndex < 8)
				{
					DDRF  &= ~(1 << ChannelIndex);
     faa:	80 91 7e 00 	lds	r24, 0x007E
					DIDR0 |=  (1 << ChannelIndex);
     fae:	80 62       	ori	r24, 0x20	; 32
     fb0:	80 93 7e 00 	sts	0x007E, r24
     fb4:	85 e4       	ldi	r24, 0x45	; 69
                    ADC_SetupChannel(5);
                    ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_CHANNEL5);
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	7c de       	rcall	.-776    	; 0xcb2 <ADC_StartReading>
     fba:	85 e0       	ldi	r24, 0x05	; 5
     fbc:	87 c0       	rjmp	.+270    	; 0x10cc <ButtonManage+0x384>
                    menuState=menuState_y;
     fbe:	01 15       	cp	r16, r1
     fc0:	11 05       	cpc	r17, r1
                }
                break;
            case menuState_y:
                if (leftClick) {
     fc2:	61 f0       	breq	.+24     	; 0xfdc <ButtonManage+0x294>
     fc4:	84 98       	cbi	0x10, 4	; 16
     fc6:	80 91 7e 00 	lds	r24, 0x007E
     fca:	80 61       	ori	r24, 0x10	; 16
     fcc:	80 93 7e 00 	sts	0x007E, r24
     fd0:	84 e4       	ldi	r24, 0x44	; 68
     fd2:	90 e0       	ldi	r25, 0x00	; 0
                    ADC_SetupChannel(4);
                    ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_CHANNEL4);
     fd4:	6e de       	rcall	.-804    	; 0xcb2 <ADC_StartReading>
     fd6:	84 e0       	ldi	r24, 0x04	; 4
     fd8:	80 93 0b 01 	sts	0x010B, r24
                    menuState=menuState_x;
     fdc:	cd 2b       	or	r28, r29
     fde:	09 f4       	brne	.+2      	; 0xfe2 <ButtonManage+0x29a>
     fe0:	42 c1       	rjmp	.+644    	; 0x1266 <ButtonManage+0x51e>
                }
                if (rightClick) {
     fe2:	86 98       	cbi	0x10, 6	; 16
     fe4:	80 91 7e 00 	lds	r24, 0x007E
				DDRF  &= ~(1 << ChannelIndex);
				DIDR0 |=  (1 << ChannelIndex);
				#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
				if (ChannelIndex < 8)
				{
					DDRF  &= ~(1 << ChannelIndex);
     fe8:	80 64       	ori	r24, 0x40	; 64
					DIDR0 |=  (1 << ChannelIndex);
     fea:	80 93 7e 00 	sts	0x007E, r24
     fee:	86 e4       	ldi	r24, 0x46	; 70
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	5f de       	rcall	.-834    	; 0xcb2 <ADC_StartReading>
                    ADC_SetupChannel(6);
                    ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_CHANNEL6);
     ff4:	86 e0       	ldi	r24, 0x06	; 6
     ff6:	6a c0       	rjmp	.+212    	; 0x10cc <ButtonManage+0x384>
     ff8:	01 15       	cp	r16, r1
     ffa:	11 05       	cpc	r17, r1
                    menuState=menuState_z;
     ffc:	61 f0       	breq	.+24     	; 0x1016 <ButtonManage+0x2ce>
     ffe:	85 98       	cbi	0x10, 5	; 16
                }
                break;
            case menuState_z:
                if (leftClick) {
    1000:	80 91 7e 00 	lds	r24, 0x007E
    1004:	80 62       	ori	r24, 0x20	; 32
				DDRF  &= ~(1 << ChannelIndex);
				DIDR0 |=  (1 << ChannelIndex);
				#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
				if (ChannelIndex < 8)
				{
					DDRF  &= ~(1 << ChannelIndex);
    1006:	80 93 7e 00 	sts	0x007E, r24
					DIDR0 |=  (1 << ChannelIndex);
    100a:	85 e4       	ldi	r24, 0x45	; 69
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	51 de       	rcall	.-862    	; 0xcb2 <ADC_StartReading>
    1010:	85 e0       	ldi	r24, 0x05	; 5
                    ADC_SetupChannel(5);
                    ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_CHANNEL5);
    1012:	80 93 0b 01 	sts	0x010B, r24
    1016:	cd 2b       	or	r28, r29
    1018:	09 f4       	brne	.+2      	; 0x101c <ButtonManage+0x2d4>
                    menuState=menuState_y;
    101a:	25 c1       	rjmp	.+586    	; 0x1266 <ButtonManage+0x51e>
    101c:	87 98       	cbi	0x10, 7	; 16
    101e:	80 91 7e 00 	lds	r24, 0x007E
                }
                if (rightClick) {
    1022:	80 68       	ori	r24, 0x80	; 128
    1024:	80 93 7e 00 	sts	0x007E, r24
    1028:	87 e4       	ldi	r24, 0x47	; 71
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	42 de       	rcall	.-892    	; 0xcb2 <ADC_StartReading>
    102e:	87 e0       	ldi	r24, 0x07	; 7
    1030:	4d c0       	rjmp	.+154    	; 0x10cc <ButtonManage+0x384>
                    ADC_SetupChannel(7);
                    ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_CHANNEL7);
    1032:	01 15       	cp	r16, r1
    1034:	11 05       	cpc	r17, r1
    1036:	61 f0       	breq	.+24     	; 0x1050 <ButtonManage+0x308>
    1038:	86 98       	cbi	0x10, 6	; 16
                    menuState=menuState_pot;
    103a:	80 91 7e 00 	lds	r24, 0x007E
                }
                break;
            case menuState_pot:
                if (leftClick) {
    103e:	80 64       	ori	r24, 0x40	; 64
    1040:	80 93 7e 00 	sts	0x007E, r24
				DDRF  &= ~(1 << ChannelIndex);
				DIDR0 |=  (1 << ChannelIndex);
				#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
				if (ChannelIndex < 8)
				{
					DDRF  &= ~(1 << ChannelIndex);
    1044:	86 e4       	ldi	r24, 0x46	; 70
					DIDR0 |=  (1 << ChannelIndex);
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	34 de       	rcall	.-920    	; 0xcb2 <ADC_StartReading>
    104a:	86 e0       	ldi	r24, 0x06	; 6
    104c:	80 93 0b 01 	sts	0x010B, r24
                    ADC_SetupChannel(6);
                    ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_CHANNEL6);
    1050:	cd 2b       	or	r28, r29
    1052:	09 f4       	brne	.+2      	; 0x1056 <ButtonManage+0x30e>
    1054:	08 c1       	rjmp	.+528    	; 0x1266 <ButtonManage+0x51e>
    1056:	83 e0       	ldi	r24, 0x03	; 3
                    menuState=menuState_z;
    1058:	39 c0       	rjmp	.+114    	; 0x10cc <ButtonManage+0x384>
    105a:	e1 14       	cp	r14, r1
    105c:	f1 04       	cpc	r15, r1
                }
                if (rightClick) {
    105e:	19 f0       	breq	.+6      	; 0x1066 <ButtonManage+0x31e>
    1060:	83 e0       	ldi	r24, 0x03	; 3
    1062:	80 93 0b 01 	sts	0x010B, r24
                    menuState=menuState_adc;
    1066:	c1 14       	cp	r12, r1
                }
                break;
            case menuState_gyro:
                if (upClick)
    1068:	d1 04       	cpc	r13, r1
    106a:	19 f0       	breq	.+6      	; 0x1072 <ButtonManage+0x32a>
    106c:	8c e0       	ldi	r24, 0x0C	; 12
                    menuState=menuState_adc;
    106e:	80 93 0b 01 	sts	0x010B, r24
    1072:	cd 2b       	or	r28, r29
                if (downClick)
    1074:	09 f4       	brne	.+2      	; 0x1078 <ButtonManage+0x330>
    1076:	f7 c0       	rjmp	.+494    	; 0x1266 <ButtonManage+0x51e>
    1078:	89 e0       	ldi	r24, 0x09	; 9
                    menuState=menuState_buttons;
    107a:	28 c0       	rjmp	.+80     	; 0x10cc <ButtonManage+0x384>
    107c:	8e e1       	ldi	r24, 0x1E	; 30
    107e:	80 93 0c 01 	sts	0x010C, r24
                if (rightClick)
    1082:	8d e1       	ldi	r24, 0x1D	; 29
    1084:	80 93 0d 01 	sts	0x010D, r24
                    menuState=menuState_gyroX;
    1088:	52 c0       	rjmp	.+164    	; 0x112e <ButtonManage+0x3e6>
                break;
            case menuState_gyroX:
                InternalReadAddress = GX_L;
    108a:	80 e2       	ldi	r24, 0x20	; 32
    108c:	80 93 0c 01 	sts	0x010C, r24
                InternalReadAddressHigh = GX_H;
    1090:	8f e1       	ldi	r24, 0x1F	; 31
    1092:	80 93 0d 01 	sts	0x010D, r24
/*                if (leftClick)
                    menuState=menuState_gyro;
                if (rightClick)
                    menuState=menuState_gyroY;*/
                break;
    1096:	01 15       	cp	r16, r1
            case menuState_gyroY:
                InternalReadAddress = GY_L;
    1098:	11 05       	cpc	r17, r1
    109a:	19 f0       	breq	.+6      	; 0x10a2 <ButtonManage+0x35a>
    109c:	89 e0       	ldi	r24, 0x09	; 9
                InternalReadAddressHigh = GY_H;
    109e:	80 93 0b 01 	sts	0x010B, r24
    10a2:	cd 2b       	or	r28, r29
                if (leftClick)
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <ButtonManage+0x360>
    10a6:	df c0       	rjmp	.+446    	; 0x1266 <ButtonManage+0x51e>
    10a8:	8b e0       	ldi	r24, 0x0B	; 11
                    menuState=menuState_gyroX;
    10aa:	10 c0       	rjmp	.+32     	; 0x10cc <ButtonManage+0x384>
    10ac:	82 e2       	ldi	r24, 0x22	; 34
    10ae:	80 93 0c 01 	sts	0x010C, r24
                if (rightClick)
    10b2:	81 e2       	ldi	r24, 0x21	; 33
    10b4:	80 93 0d 01 	sts	0x010D, r24
                    menuState=menuState_gyroZ;
    10b8:	01 15       	cp	r16, r1
                break;
            case menuState_gyroZ:
                InternalReadAddress = GZ_L;
    10ba:	11 05       	cpc	r17, r1
    10bc:	19 f0       	breq	.+6      	; 0x10c4 <ButtonManage+0x37c>
    10be:	8a e0       	ldi	r24, 0x0A	; 10
                InternalReadAddressHigh = GZ_H;
    10c0:	80 93 0b 01 	sts	0x010B, r24
    10c4:	cd 2b       	or	r28, r29
                if (leftClick)
    10c6:	09 f4       	brne	.+2      	; 0x10ca <ButtonManage+0x382>
    10c8:	ce c0       	rjmp	.+412    	; 0x1266 <ButtonManage+0x51e>
    10ca:	88 e0       	ldi	r24, 0x08	; 8
                    menuState=menuState_gyroY;
    10cc:	80 93 0b 01 	sts	0x010B, r24
    10d0:	38 c0       	rjmp	.+112    	; 0x1142 <ButtonManage+0x3fa>
                if (rightClick)
    10d2:	e1 14       	cp	r14, r1
    10d4:	f1 04       	cpc	r15, r1
    10d6:	39 f0       	breq	.+14     	; 0x10e6 <ButtonManage+0x39e>
                    menuState=menuState_gyro;
    10d8:	88 e0       	ldi	r24, 0x08	; 8
    10da:	80 93 0b 01 	sts	0x010B, r24
    10de:	10 92 83 01 	sts	0x0183, r1
                break;
            case menuState_buttons:
                if (upClick) {
    10e2:	10 92 82 01 	sts	0x0182, r1
                    menuState=menuState_gyro;
    10e6:	c1 14       	cp	r12, r1
    10e8:	d1 04       	cpc	r13, r1
    10ea:	39 f0       	breq	.+14     	; 0x10fa <ButtonManage+0x3b2>
                    button = NULL;
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	80 93 0b 01 	sts	0x010B, r24
    10f2:	10 92 83 01 	sts	0x0183, r1
                }
                if (downClick) {
    10f6:	10 92 82 01 	sts	0x0182, r1
                    menuState=menuState_settings;
    10fa:	01 15       	cp	r16, r1
    10fc:	11 05       	cpc	r17, r1
    10fe:	31 f0       	breq	.+12     	; 0x110c <ButtonManage+0x3c4>
                    button = NULL;
    1100:	82 e1       	ldi	r24, 0x12	; 18
    1102:	91 e0       	ldi	r25, 0x01	; 1
    1104:	90 93 83 01 	sts	0x0183, r25
                }
                if (leftClick)
    1108:	80 93 82 01 	sts	0x0182, r24
    110c:	20 97       	sbiw	r28, 0x00	; 0
                    button = "Left";
    110e:	31 f0       	breq	.+12     	; 0x111c <ButtonManage+0x3d4>
    1110:	87 e1       	ldi	r24, 0x17	; 23
    1112:	91 e0       	ldi	r25, 0x01	; 1
    1114:	90 93 83 01 	sts	0x0183, r25
    1118:	80 93 82 01 	sts	0x0182, r24
                if (rightClick)
    111c:	a1 14       	cp	r10, r1
                    button = "Right";
    111e:	b1 04       	cpc	r11, r1
    1120:	31 f0       	breq	.+12     	; 0x112e <ButtonManage+0x3e6>
    1122:	8d e1       	ldi	r24, 0x1D	; 29
    1124:	91 e0       	ldi	r25, 0x01	; 1
    1126:	90 93 83 01 	sts	0x0183, r25
                if (centerClick)
    112a:	80 93 82 01 	sts	0x0182, r24
    112e:	01 2b       	or	r16, r17
                    button = "Center";
    1130:	41 f4       	brne	.+16     	; 0x1142 <ButtonManage+0x3fa>
    1132:	cd 2b       	or	r28, r29
    1134:	31 f4       	brne	.+12     	; 0x1142 <ButtonManage+0x3fa>
    1136:	ef 28       	or	r14, r15
    1138:	21 f4       	brne	.+8      	; 0x1142 <ButtonManage+0x3fa>
    113a:	cd 28       	or	r12, r13
                break;
            default:
                break;
        }

        if (leftClick || rightClick || upClick || downClick || centerClick) {
    113c:	11 f4       	brne	.+4      	; 0x1142 <ButtonManage+0x3fa>
    113e:	ab 28       	or	r10, r11
    1140:	29 f0       	breq	.+10     	; 0x114c <ButtonManage+0x404>
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	80 93 81 01 	sts	0x0181, r24
    1148:	80 93 0e 01 	sts	0x010E, r24
    114c:	80 91 0b 01 	lds	r24, 0x010B
            click = true;
    1150:	84 30       	cpi	r24, 0x04	; 4
    1152:	08 f4       	brcc	.+2      	; 0x1156 <ButtonManage+0x40e>
    1154:	8c c0       	rjmp	.+280    	; 0x126e <ButtonManage+0x526>
            update = true;
    1156:	88 30       	cpi	r24, 0x08	; 8
    1158:	28 f0       	brcs	.+10     	; 0x1164 <ButtonManage+0x41c>
        }
    }
    switch (menuState) {
    115a:	89 50       	subi	r24, 0x09	; 9
    115c:	83 30       	cpi	r24, 0x03	; 3
    115e:	08 f0       	brcs	.+2      	; 0x1162 <ButtonManage+0x41a>
    1160:	86 c0       	rjmp	.+268    	; 0x126e <ButtonManage+0x526>
    1162:	2f c0       	rjmp	.+94     	; 0x11c2 <ButtonManage+0x47a>
    1164:	80 91 7a 00 	lds	r24, 0x007A
    1168:	84 ff       	sbrs	r24, 4
    116a:	fc cf       	rjmp	.-8      	; 0x1164 <ButtonManage+0x41c>
    116c:	80 91 7a 00 	lds	r24, 0x007A
    1170:	80 61       	ori	r24, 0x10	; 16
			 *          complete and ready to be read out with \ref ADC_GetResult().
			 */
			static inline bool ADC_IsReadingComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool ADC_IsReadingComplete(void)
			{
				return ((ADCSRA & (1 << ADIF)) ? true : false);
    1172:	80 93 7a 00 	sts	0x007A, r24
        case menuState_x:
        case menuState_y:
        case menuState_z:
        case menuState_pot:
            while (!(ADC_IsReadingComplete())) {};
    1176:	80 91 78 00 	lds	r24, 0x0078
			 *  \return The result of the last ADC conversion as an unsigned value.
			 */
			static inline uint16_t ADC_GetResult(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t ADC_GetResult(void)
			{
				ADCSRA |= (1 << ADIF);
    117a:	90 91 79 00 	lds	r25, 0x0079
    117e:	90 93 85 01 	sts	0x0185, r25
    1182:	80 93 84 01 	sts	0x0184, r24
				return ADC;
    1186:	9f 93       	push	r25
    1188:	8f 93       	push	r24
    118a:	84 e2       	ldi	r24, 0x24	; 36
            adc_value = ADC_GetResult();
    118c:	91 e0       	ldi	r25, 0x01	; 1
    118e:	9f 93       	push	r25
    1190:	8f 93       	push	r24
    1192:	86 e8       	ldi	r24, 0x86	; 134
            sprintf(adcStr, "%d", adc_value);
    1194:	91 e0       	ldi	r25, 0x01	; 1
    1196:	9f 93       	push	r25
    1198:	8f 93       	push	r24
    119a:	22 d1       	rcall	.+580    	; 0x13e0 <sprintf>
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	86 e8       	ldi	r24, 0x86	; 134
    11aa:	91 e0       	ldi	r25, 0x01	; 1
            LCDnextLine(adcStr);
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	1f 91       	pop	r17
    11b2:	0f 91       	pop	r16
    11b4:	ff 90       	pop	r15
    11b6:	ef 90       	pop	r14
    11b8:	df 90       	pop	r13
    11ba:	cf 90       	pop	r12
            TWI_WritePacket(MCP_ADDRESS, 10, &dacOutput, sizeof(dacOutput), &dacValue, sizeof(dacValue));
            break;
        default:
            break;
    }
}
    11bc:	bf 90       	pop	r11
    11be:	af 90       	pop	r10
    11c0:	b4 cd       	rjmp	.-1176   	; 0xd2a <LCDnextLine>
    11c2:	ee 24       	eor	r14, r14
    11c4:	e3 94       	inc	r14
    11c6:	00 e9       	ldi	r16, 0x90	; 144
    11c8:	11 e0       	ldi	r17, 0x01	; 1
    11ca:	21 e0       	ldi	r18, 0x01	; 1
    11cc:	4d e0       	ldi	r20, 0x0D	; 13
    11ce:	51 e0       	ldi	r21, 0x01	; 1
        case menuState_z:
        case menuState_pot:
            while (!(ADC_IsReadingComplete())) {};
            adc_value = ADC_GetResult();
            sprintf(adcStr, "%d", adc_value);
            LCDnextLine(adcStr);
    11d0:	6a e0       	ldi	r22, 0x0A	; 10
    11d2:	88 e6       	ldi	r24, 0x68	; 104
            break;
        case menuState_gyroX:
        case menuState_gyroY:
        case menuState_gyroZ:
            TWI_ReadPacket(G_ADDRESS, 10, &InternalReadAddressHigh, sizeof(InternalReadAddressHigh), &GyroPacketHigh, sizeof(GyroPacketHigh));
    11d4:	d1 dc       	rcall	.-1630   	; 0xb78 <TWI_ReadPacket>
    11d6:	01 e9       	ldi	r16, 0x91	; 145
    11d8:	11 e0       	ldi	r17, 0x01	; 1
    11da:	21 e0       	ldi	r18, 0x01	; 1
    11dc:	4c e0       	ldi	r20, 0x0C	; 12
    11de:	51 e0       	ldi	r21, 0x01	; 1
    11e0:	6a e0       	ldi	r22, 0x0A	; 10
    11e2:	88 e6       	ldi	r24, 0x68	; 104
    11e4:	c9 dc       	rcall	.-1646   	; 0xb78 <TWI_ReadPacket>
    11e6:	90 91 90 01 	lds	r25, 0x0190
            TWI_ReadPacket(G_ADDRESS, 10, &InternalReadAddress, sizeof(InternalReadAddress), &GyroPacket, sizeof(GyroPacket));
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	20 91 91 01 	lds	r18, 0x0191
    11f0:	82 2b       	or	r24, r18
    11f2:	90 93 10 01 	sts	0x0110, r25
    11f6:	80 93 0f 01 	sts	0x010F, r24
    11fa:	9f 93       	push	r25
            gyroValue = GyroPacket | (GyroPacketHigh<<8);
    11fc:	8f 93       	push	r24
    11fe:	84 e2       	ldi	r24, 0x24	; 36
    1200:	91 e0       	ldi	r25, 0x01	; 1
    1202:	9f 93       	push	r25
    1204:	8f 93       	push	r24
    1206:	82 e9       	ldi	r24, 0x92	; 146
    1208:	91 e0       	ldi	r25, 0x01	; 1
    120a:	9f 93       	push	r25
    120c:	8f 93       	push	r24
    120e:	e8 d0       	rcall	.+464    	; 0x13e0 <sprintf>
            sprintf(gyroStr, "%d", gyroValue);
    1210:	82 e9       	ldi	r24, 0x92	; 146
    1212:	91 e0       	ldi	r25, 0x01	; 1
    1214:	8a dd       	rcall	.-1260   	; 0xd2a <LCDnextLine>
    1216:	8f e2       	ldi	r24, 0x2F	; 47
    1218:	95 e7       	ldi	r25, 0x75	; 117
    121a:	01 97       	sbiw	r24, 0x01	; 1
    121c:	f1 f7       	brne	.-4      	; 0x121a <ButtonManage+0x4d2>
    121e:	00 c0       	rjmp	.+0      	; 0x1220 <ButtonManage+0x4d8>
    1220:	00 00       	nop
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
            LCDnextLine(gyroStr);
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	80 91 7a 00 	lds	r24, 0x007A
    1232:	84 ff       	sbrs	r24, 4
    1234:	fc cf       	rjmp	.-8      	; 0x122e <ButtonManage+0x4e6>
    1236:	80 91 7a 00 	lds	r24, 0x007A
    123a:	80 61       	ori	r24, 0x10	; 16
    123c:	80 93 7a 00 	sts	0x007A, r24
    1240:	80 91 78 00 	lds	r24, 0x0078
    1244:	90 91 79 00 	lds	r25, 0x0079
			 *          complete and ready to be read out with \ref ADC_GetResult().
			 */
			static inline bool ADC_IsReadingComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool ADC_IsReadingComplete(void)
			{
				return ((ADCSRA & (1 << ADIF)) ? true : false);
    1248:	90 93 9d 01 	sts	0x019D, r25
            _delay_ms(15);
            while (!(ADC_IsReadingComplete())) {};
    124c:	80 93 9c 01 	sts	0x019C, r24
			 *  \return The result of the last ADC conversion as an unsigned value.
			 */
			static inline uint16_t ADC_GetResult(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t ADC_GetResult(void)
			{
				ADCSRA |= (1 << ADIF);
    1250:	82 e0       	ldi	r24, 0x02	; 2
    1252:	e8 2e       	mov	r14, r24
    1254:	0c e9       	ldi	r16, 0x9C	; 156
    1256:	11 e0       	ldi	r17, 0x01	; 1
    1258:	21 e0       	ldi	r18, 0x01	; 1
				return ADC;
    125a:	41 e1       	ldi	r20, 0x11	; 17
    125c:	51 e0       	ldi	r21, 0x01	; 1
    125e:	6a e0       	ldi	r22, 0x0A	; 10
    1260:	80 ec       	ldi	r24, 0xC0	; 192
            dacValue = ADC_GetResult();
    1262:	e1 dc       	rcall	.-1598   	; 0xc26 <TWI_WritePacket>
    1264:	04 c0       	rjmp	.+8      	; 0x126e <ButtonManage+0x526>
    1266:	01 2b       	or	r16, r17
    1268:	09 f0       	breq	.+2      	; 0x126c <ButtonManage+0x524>
//            dacValue = gyroValue;
            TWI_WritePacket(MCP_ADDRESS, 10, &dacOutput, sizeof(dacOutput), &dacValue, sizeof(dacValue));
    126a:	6b cf       	rjmp	.-298    	; 0x1142 <ButtonManage+0x3fa>
    126c:	64 cf       	rjmp	.-312    	; 0x1136 <ButtonManage+0x3ee>
    126e:	df 91       	pop	r29
    1270:	cf 91       	pop	r28
    1272:	1f 91       	pop	r17
    1274:	0f 91       	pop	r16
    1276:	ff 90       	pop	r15
    1278:	ef 90       	pop	r14
    127a:	df 90       	pop	r13
    127c:	cf 90       	pop	r12
    127e:	bf 90       	pop	r11
            break;
    1280:	af 90       	pop	r10
                break;
            default:
                break;
        }

        if (leftClick || rightClick || upClick || downClick || centerClick) {
    1282:	08 95       	ret

00001284 <LCDupdate>:
    1284:	80 91 0e 01 	lds	r24, 0x010E
    1288:	88 23       	and	r24, r24
            TWI_WritePacket(MCP_ADDRESS, 10, &dacOutput, sizeof(dacOutput), &dacValue, sizeof(dacValue));
            break;
        default:
            break;
    }
}
    128a:	09 f4       	brne	.+2      	; 0x128e <LCDupdate+0xa>
    128c:	68 c0       	rjmp	.+208    	; 0x135e <LCDupdate+0xda>
    128e:	80 91 0b 01 	lds	r24, 0x010B
    1292:	86 30       	cpi	r24, 0x06	; 6
    1294:	09 f4       	brne	.+2      	; 0x1298 <LCDupdate+0x14>
    1296:	53 c0       	rjmp	.+166    	; 0x133e <LCDupdate+0xba>
    1298:	78 f4       	brcc	.+30     	; 0x12b8 <LCDupdate+0x34>
    129a:	82 30       	cpi	r24, 0x02	; 2
    129c:	41 f1       	breq	.+80     	; 0x12ee <LCDupdate+0x6a>
    129e:	30 f4       	brcc	.+12     	; 0x12ac <LCDupdate+0x28>

void LCDupdate(void) {
    if (update) {
        switch (menuState) {
    12a0:	88 23       	and	r24, r24
    12a2:	e1 f0       	breq	.+56     	; 0x12dc <LCDupdate+0x58>
    12a4:	81 30       	cpi	r24, 0x01	; 1
    12a6:	09 f0       	breq	.+2      	; 0x12aa <LCDupdate+0x26>
    12a8:	58 c0       	rjmp	.+176    	; 0x135a <LCDupdate+0xd6>
    12aa:	1b c0       	rjmp	.+54     	; 0x12e2 <LCDupdate+0x5e>
    12ac:	84 30       	cpi	r24, 0x04	; 4
    12ae:	09 f4       	brne	.+2      	; 0x12b2 <LCDupdate+0x2e>
    12b0:	40 c0       	rjmp	.+128    	; 0x1332 <LCDupdate+0xae>
    12b2:	08 f0       	brcs	.+2      	; 0x12b6 <LCDupdate+0x32>
    12b4:	41 c0       	rjmp	.+130    	; 0x1338 <LCDupdate+0xb4>
    12b6:	36 c0       	rjmp	.+108    	; 0x1324 <LCDupdate+0xa0>
    12b8:	89 30       	cpi	r24, 0x09	; 9
    12ba:	09 f4       	brne	.+2      	; 0x12be <LCDupdate+0x3a>
    12bc:	3a c0       	rjmp	.+116    	; 0x1332 <LCDupdate+0xae>
    12be:	38 f4       	brcc	.+14     	; 0x12ce <LCDupdate+0x4a>
    12c0:	87 30       	cpi	r24, 0x07	; 7
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <LCDupdate+0x42>
    12c4:	3f c0       	rjmp	.+126    	; 0x1344 <LCDupdate+0xc0>
    12c6:	88 30       	cpi	r24, 0x08	; 8
    12c8:	09 f0       	breq	.+2      	; 0x12cc <LCDupdate+0x48>
    12ca:	47 c0       	rjmp	.+142    	; 0x135a <LCDupdate+0xd6>
    12cc:	2f c0       	rjmp	.+94     	; 0x132c <LCDupdate+0xa8>
    12ce:	8b 30       	cpi	r24, 0x0B	; 11
    12d0:	b1 f1       	breq	.+108    	; 0x133e <LCDupdate+0xba>
    12d2:	90 f1       	brcs	.+100    	; 0x1338 <LCDupdate+0xb4>
    12d4:	8c 30       	cpi	r24, 0x0C	; 12
    12d6:	09 f0       	breq	.+2      	; 0x12da <LCDupdate+0x56>
    12d8:	40 c0       	rjmp	.+128    	; 0x135a <LCDupdate+0xd6>
    12da:	37 c0       	rjmp	.+110    	; 0x134a <LCDupdate+0xc6>
            case menuState_init:
                LCDwrite("Hello, Josh!");
    12dc:	87 e2       	ldi	r24, 0x27	; 39
    12de:	91 e0       	ldi	r25, 0x01	; 1
    12e0:	23 c0       	rjmp	.+70     	; 0x1328 <LCDupdate+0xa4>
                break;
            case menuState_settings:
                LCDwrite("Settings:");
    12e2:	84 e3       	ldi	r24, 0x34	; 52
    12e4:	91 e0       	ldi	r25, 0x01	; 1
    12e6:	12 dd       	rcall	.-1500   	; 0xd0c <LCDwrite>
    12e8:	8e e3       	ldi	r24, 0x3E	; 62
                LCDnextLine("Nothing!");
    12ea:	91 e0       	ldi	r25, 0x01	; 1
    12ec:	35 c0       	rjmp	.+106    	; 0x1358 <LCDupdate+0xd4>
    12ee:	87 e4       	ldi	r24, 0x47	; 71
                break;
            case menuState_settings_brightness:
                LCDwrite("S: Brightness");
    12f0:	91 e0       	ldi	r25, 0x01	; 1
    12f2:	0c dd       	rcall	.-1512   	; 0xd0c <LCDwrite>
    12f4:	80 91 07 01 	lds	r24, 0x0107
                sprintf(brightnessStr, "%d", brightness);
    12f8:	1f 92       	push	r1
    12fa:	8f 93       	push	r24
    12fc:	84 e2       	ldi	r24, 0x24	; 36
    12fe:	91 e0       	ldi	r25, 0x01	; 1
    1300:	9f 93       	push	r25
    1302:	8f 93       	push	r24
    1304:	8e e9       	ldi	r24, 0x9E	; 158
    1306:	91 e0       	ldi	r25, 0x01	; 1
    1308:	9f 93       	push	r25
    130a:	8f 93       	push	r24
    130c:	69 d0       	rcall	.+210    	; 0x13e0 <sprintf>
    130e:	8e e9       	ldi	r24, 0x9E	; 158
    1310:	91 e0       	ldi	r25, 0x01	; 1
    1312:	0b dd       	rcall	.-1514   	; 0xd2a <LCDnextLine>
                LCDnextLine(brightnessStr);
    1314:	e1 dc       	rcall	.-1598   	; 0xcd8 <LCDbrightnessUpdate>
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
                LCDbrightnessUpdate();
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
                break;
    1320:	0f 90       	pop	r0
    1322:	1b c0       	rjmp	.+54     	; 0x135a <LCDupdate+0xd6>
    1324:	85 e5       	ldi	r24, 0x55	; 85
    1326:	91 e0       	ldi	r25, 0x01	; 1
    1328:	f1 dc       	rcall	.-1566   	; 0xd0c <LCDwrite>
    132a:	17 c0       	rjmp	.+46     	; 0x135a <LCDupdate+0xd6>
    132c:	80 e6       	ldi	r24, 0x60	; 96
            case menuState_adc:
                LCDwrite("ADC values");
    132e:	91 e0       	ldi	r25, 0x01	; 1
    1330:	fb cf       	rjmp	.-10     	; 0x1328 <LCDupdate+0xa4>
    1332:	8c e6       	ldi	r24, 0x6C	; 108
    1334:	91 e0       	ldi	r25, 0x01	; 1
                break;
    1336:	f8 cf       	rjmp	.-16     	; 0x1328 <LCDupdate+0xa4>
            case menuState_gyro:
                LCDwrite("Gyro values");
    1338:	8e e6       	ldi	r24, 0x6E	; 110
    133a:	91 e0       	ldi	r25, 0x01	; 1
    133c:	f5 cf       	rjmp	.-22     	; 0x1328 <LCDupdate+0xa4>
        break;
            case menuState_x:
            case menuState_gyroX:
                LCDwrite("X");
    133e:	80 e7       	ldi	r24, 0x70	; 112
    1340:	91 e0       	ldi	r25, 0x01	; 1
    1342:	f2 cf       	rjmp	.-28     	; 0x1328 <LCDupdate+0xa4>
                break;
            case menuState_y:
            case menuState_gyroY:
                LCDwrite("Y");
    1344:	82 e7       	ldi	r24, 0x72	; 114
    1346:	91 e0       	ldi	r25, 0x01	; 1
    1348:	ef cf       	rjmp	.-34     	; 0x1328 <LCDupdate+0xa4>
                break;
            case menuState_z:
            case menuState_gyroZ:
                LCDwrite("Z");
    134a:	86 e7       	ldi	r24, 0x76	; 118
    134c:	91 e0       	ldi	r25, 0x01	; 1
    134e:	de dc       	rcall	.-1604   	; 0xd0c <LCDwrite>
                break;
            case menuState_pot:
                LCDwrite("Pot");
    1350:	80 91 82 01 	lds	r24, 0x0182
    1354:	90 91 83 01 	lds	r25, 0x0183
                break;
            case menuState_buttons:
                LCDwrite("Buttons!");
    1358:	e8 dc       	rcall	.-1584   	; 0xd2a <LCDnextLine>
    135a:	10 92 0e 01 	sts	0x010E, r1
                LCDnextLine(button);
    135e:	08 95       	ret

00001360 <LCDstart>:
    1360:	ef 92       	push	r14
    1362:	0f 93       	push	r16
    1364:	1f 93       	push	r17
    1366:	2f ef       	ldi	r18, 0xFF	; 255
    1368:	89 e6       	ldi	r24, 0x69	; 105
                break;
            default:
                break;
        }
        update = false;
    136a:	98 e1       	ldi	r25, 0x18	; 24
    136c:	21 50       	subi	r18, 0x01	; 1
    136e:	80 40       	sbci	r24, 0x00	; 0
    1370:	90 40       	sbci	r25, 0x00	; 0
    1372:	e1 f7       	brne	.-8      	; 0x136c <LCDstart+0xc>
    1374:	00 c0       	rjmp	.+0      	; 0x1376 <LCDstart+0x16>
    1376:	00 00       	nop
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
    1378:	83 e3       	ldi	r24, 0x33	; 51
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	90 93 cd 00 	sts	0x00CD, r25
    1380:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
    1384:	86 e0       	ldi	r24, 0x06	; 6
    1386:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
    138a:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
    138e:	88 e1       	ldi	r24, 0x18	; 24
    1390:	80 93 c9 00 	sts	0x00C9, r24

				DDRD  |= (1 << 3);
    1394:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
    1396:	5a 9a       	sbi	0x0b, 2	; 11
static enum menuStates_t menuState=menuState_gyroX;

void LCDstart(void) {
    _delay_ms(1000);
    Serial_Init(9600, false);
    LCDupdate();
    1398:	75 df       	rcall	.-278    	; 0x1284 <LCDupdate>
    139a:	8f e0       	ldi	r24, 0x0F	; 15
    brightness = 15;
    139c:	80 93 07 01 	sts	0x0107, r24
    13a0:	9b dc       	rcall	.-1738   	; 0xcd8 <LCDbrightnessUpdate>
    LCDbrightnessUpdate();
    13a2:	84 98       	cbi	0x10, 4	; 16
    13a4:	ee e7       	ldi	r30, 0x7E	; 126
				DDRF  &= ~(1 << ChannelIndex);
				DIDR0 |=  (1 << ChannelIndex);
				#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
				if (ChannelIndex < 8)
				{
					DDRF  &= ~(1 << ChannelIndex);
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
					DIDR0 |=  (1 << ChannelIndex);
    13a8:	80 81       	ld	r24, Z
    13aa:	80 61       	ori	r24, 0x10	; 16
    13ac:	80 83       	st	Z, r24
    13ae:	84 e4       	ldi	r24, 0x44	; 68
    13b0:	90 e0       	ldi	r25, 0x00	; 0

    ADC_SetupChannel(4);
    ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_CHANNEL4);
    13b2:	7f dc       	rcall	.-1794   	; 0xcb2 <ADC_StartReading>
    13b4:	ee 24       	eor	r14, r14
    13b6:	e3 94       	inc	r14
    13b8:	09 e0       	ldi	r16, 0x09	; 9
    TWI_WritePacket(G_ADDRESS, 10, &DLPF_FS, sizeof(DLPF_FS), &gyroSetup, sizeof(gyroSetup));
    13ba:	11 e0       	ldi	r17, 0x01	; 1
    13bc:	21 e0       	ldi	r18, 0x01	; 1
    13be:	48 e0       	ldi	r20, 0x08	; 8
    13c0:	51 e0       	ldi	r21, 0x01	; 1
    13c2:	6a e0       	ldi	r22, 0x0A	; 10
    13c4:	88 e6       	ldi	r24, 0x68	; 104
    13c6:	2f dc       	rcall	.-1954   	; 0xc26 <TWI_WritePacket>
    13c8:	00 e8       	ldi	r16, 0x80	; 128
    13ca:	11 e0       	ldi	r17, 0x01	; 1
    13cc:	21 e0       	ldi	r18, 0x01	; 1
    13ce:	4a e0       	ldi	r20, 0x0A	; 10
    TWI_WritePacket(G_ADDRESS, 10, &SMPLRT_DIV, sizeof(SMPLRT_DIV), &gyroSampleRate, sizeof(gyroSampleRate));
    13d0:	51 e0       	ldi	r21, 0x01	; 1
    13d2:	6a e0       	ldi	r22, 0x0A	; 10
    13d4:	88 e6       	ldi	r24, 0x68	; 104
    13d6:	27 dc       	rcall	.-1970   	; 0xc26 <TWI_WritePacket>
    13d8:	1f 91       	pop	r17
    13da:	0f 91       	pop	r16
    13dc:	ef 90       	pop	r14
    13de:	08 95       	ret

000013e0 <sprintf>:
    13e0:	a0 e1       	ldi	r26, 0x10	; 16
}
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e5 ef       	ldi	r30, 0xF5	; 245
    13e6:	f9 e0       	ldi	r31, 0x09	; 9
    13e8:	98 c2       	rjmp	.+1328   	; 0x191a <__prologue_saves__+0x1c>
    13ea:	0f 89       	ldd	r16, Y+23	; 0x17
    13ec:	18 8d       	ldd	r17, Y+24	; 0x18
    13ee:	86 e0       	ldi	r24, 0x06	; 6
    13f0:	8c 83       	std	Y+4, r24	; 0x04
    13f2:	1a 83       	std	Y+2, r17	; 0x02
    13f4:	09 83       	std	Y+1, r16	; 0x01
    13f6:	8f ef       	ldi	r24, 0xFF	; 255
    13f8:	9f e7       	ldi	r25, 0x7F	; 127
    13fa:	9e 83       	std	Y+6, r25	; 0x06
    13fc:	8d 83       	std	Y+5, r24	; 0x05
    13fe:	ae 01       	movw	r20, r28
    1400:	45 5e       	subi	r20, 0xE5	; 229
    1402:	5f 4f       	sbci	r21, 0xFF	; 255
    1404:	58 8b       	std	Y+16, r21	; 0x10
    1406:	4f 87       	std	Y+15, r20	; 0x0f
    1408:	69 8d       	ldd	r22, Y+25	; 0x19
    140a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    140c:	ce 01       	movw	r24, r28
    140e:	01 96       	adiw	r24, 0x01	; 1
    1410:	08 d0       	rcall	.+16     	; 0x1422 <vfprintf>
    1412:	ef 81       	ldd	r30, Y+7	; 0x07
    1414:	f8 85       	ldd	r31, Y+8	; 0x08
    1416:	e0 0f       	add	r30, r16
    1418:	f1 1f       	adc	r31, r17
    141a:	10 82       	st	Z, r1
    141c:	60 96       	adiw	r28, 0x10	; 16
    141e:	e4 e0       	ldi	r30, 0x04	; 4
    1420:	98 c2       	rjmp	.+1328   	; 0x1952 <__epilogue_restores__+0x1c>

00001422 <vfprintf>:
    1422:	ac e0       	ldi	r26, 0x0C	; 12
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	e6 e1       	ldi	r30, 0x16	; 22
    1428:	fa e0       	ldi	r31, 0x0A	; 10
    142a:	69 c2       	rjmp	.+1234   	; 0x18fe <__prologue_saves__>
    142c:	7c 01       	movw	r14, r24
    142e:	6b 01       	movw	r12, r22
    1430:	8a 01       	movw	r16, r20
    1432:	fc 01       	movw	r30, r24
    1434:	17 82       	std	Z+7, r1	; 0x07
    1436:	16 82       	std	Z+6, r1	; 0x06
    1438:	83 81       	ldd	r24, Z+3	; 0x03
    143a:	81 ff       	sbrs	r24, 1
    143c:	ba c1       	rjmp	.+884    	; 0x17b2 <vfprintf+0x390>
    143e:	88 24       	eor	r8, r8
    1440:	83 94       	inc	r8
    1442:	91 2c       	mov	r9, r1
    1444:	8c 0e       	add	r8, r28
    1446:	9d 1e       	adc	r9, r29
    1448:	f7 01       	movw	r30, r14
    144a:	93 81       	ldd	r25, Z+3	; 0x03
    144c:	f6 01       	movw	r30, r12
    144e:	93 fd       	sbrc	r25, 3
    1450:	85 91       	lpm	r24, Z+
    1452:	93 ff       	sbrs	r25, 3
    1454:	81 91       	ld	r24, Z+
    1456:	6f 01       	movw	r12, r30
    1458:	88 23       	and	r24, r24
    145a:	09 f4       	brne	.+2      	; 0x145e <vfprintf+0x3c>
    145c:	a6 c1       	rjmp	.+844    	; 0x17aa <vfprintf+0x388>
    145e:	85 32       	cpi	r24, 0x25	; 37
    1460:	39 f4       	brne	.+14     	; 0x1470 <vfprintf+0x4e>
    1462:	93 fd       	sbrc	r25, 3
    1464:	85 91       	lpm	r24, Z+
    1466:	93 ff       	sbrs	r25, 3
    1468:	81 91       	ld	r24, Z+
    146a:	6f 01       	movw	r12, r30
    146c:	85 32       	cpi	r24, 0x25	; 37
    146e:	21 f4       	brne	.+8      	; 0x1478 <vfprintf+0x56>
    1470:	b7 01       	movw	r22, r14
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	ba d1       	rcall	.+884    	; 0x17ea <fputc>
    1476:	e8 cf       	rjmp	.-48     	; 0x1448 <vfprintf+0x26>
    1478:	71 2c       	mov	r7, r1
    147a:	31 2c       	mov	r3, r1
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	20 32       	cpi	r18, 0x20	; 32
    1480:	a8 f4       	brcc	.+42     	; 0x14ac <vfprintf+0x8a>
    1482:	8b 32       	cpi	r24, 0x2B	; 43
    1484:	61 f0       	breq	.+24     	; 0x149e <vfprintf+0x7c>
    1486:	28 f4       	brcc	.+10     	; 0x1492 <vfprintf+0x70>
    1488:	80 32       	cpi	r24, 0x20	; 32
    148a:	51 f0       	breq	.+20     	; 0x14a0 <vfprintf+0x7e>
    148c:	83 32       	cpi	r24, 0x23	; 35
    148e:	71 f4       	brne	.+28     	; 0x14ac <vfprintf+0x8a>
    1490:	0b c0       	rjmp	.+22     	; 0x14a8 <vfprintf+0x86>
    1492:	8d 32       	cpi	r24, 0x2D	; 45
    1494:	39 f0       	breq	.+14     	; 0x14a4 <vfprintf+0x82>
    1496:	80 33       	cpi	r24, 0x30	; 48
    1498:	49 f4       	brne	.+18     	; 0x14ac <vfprintf+0x8a>
    149a:	21 60       	ori	r18, 0x01	; 1
    149c:	28 c0       	rjmp	.+80     	; 0x14ee <vfprintf+0xcc>
    149e:	22 60       	ori	r18, 0x02	; 2
    14a0:	24 60       	ori	r18, 0x04	; 4
    14a2:	25 c0       	rjmp	.+74     	; 0x14ee <vfprintf+0xcc>
    14a4:	28 60       	ori	r18, 0x08	; 8
    14a6:	23 c0       	rjmp	.+70     	; 0x14ee <vfprintf+0xcc>
    14a8:	20 61       	ori	r18, 0x10	; 16
    14aa:	21 c0       	rjmp	.+66     	; 0x14ee <vfprintf+0xcc>
    14ac:	27 fd       	sbrc	r18, 7
    14ae:	27 c0       	rjmp	.+78     	; 0x14fe <vfprintf+0xdc>
    14b0:	38 2f       	mov	r19, r24
    14b2:	30 53       	subi	r19, 0x30	; 48
    14b4:	3a 30       	cpi	r19, 0x0A	; 10
    14b6:	78 f4       	brcc	.+30     	; 0x14d6 <vfprintf+0xb4>
    14b8:	26 ff       	sbrs	r18, 6
    14ba:	06 c0       	rjmp	.+12     	; 0x14c8 <vfprintf+0xa6>
    14bc:	fa e0       	ldi	r31, 0x0A	; 10
    14be:	7f 9e       	mul	r7, r31
    14c0:	30 0d       	add	r19, r0
    14c2:	11 24       	eor	r1, r1
    14c4:	73 2e       	mov	r7, r19
    14c6:	13 c0       	rjmp	.+38     	; 0x14ee <vfprintf+0xcc>
    14c8:	8a e0       	ldi	r24, 0x0A	; 10
    14ca:	38 9e       	mul	r3, r24
    14cc:	30 0d       	add	r19, r0
    14ce:	11 24       	eor	r1, r1
    14d0:	33 2e       	mov	r3, r19
    14d2:	20 62       	ori	r18, 0x20	; 32
    14d4:	0c c0       	rjmp	.+24     	; 0x14ee <vfprintf+0xcc>
    14d6:	8e 32       	cpi	r24, 0x2E	; 46
    14d8:	21 f4       	brne	.+8      	; 0x14e2 <vfprintf+0xc0>
    14da:	26 fd       	sbrc	r18, 6
    14dc:	66 c1       	rjmp	.+716    	; 0x17aa <vfprintf+0x388>
    14de:	20 64       	ori	r18, 0x40	; 64
    14e0:	06 c0       	rjmp	.+12     	; 0x14ee <vfprintf+0xcc>
    14e2:	8c 36       	cpi	r24, 0x6C	; 108
    14e4:	11 f4       	brne	.+4      	; 0x14ea <vfprintf+0xc8>
    14e6:	20 68       	ori	r18, 0x80	; 128
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <vfprintf+0xcc>
    14ea:	88 36       	cpi	r24, 0x68	; 104
    14ec:	41 f4       	brne	.+16     	; 0x14fe <vfprintf+0xdc>
    14ee:	f6 01       	movw	r30, r12
    14f0:	93 fd       	sbrc	r25, 3
    14f2:	85 91       	lpm	r24, Z+
    14f4:	93 ff       	sbrs	r25, 3
    14f6:	81 91       	ld	r24, Z+
    14f8:	6f 01       	movw	r12, r30
    14fa:	81 11       	cpse	r24, r1
    14fc:	c0 cf       	rjmp	.-128    	; 0x147e <vfprintf+0x5c>
    14fe:	98 2f       	mov	r25, r24
    1500:	95 54       	subi	r25, 0x45	; 69
    1502:	93 30       	cpi	r25, 0x03	; 3
    1504:	18 f0       	brcs	.+6      	; 0x150c <vfprintf+0xea>
    1506:	90 52       	subi	r25, 0x20	; 32
    1508:	93 30       	cpi	r25, 0x03	; 3
    150a:	28 f4       	brcc	.+10     	; 0x1516 <vfprintf+0xf4>
    150c:	0c 5f       	subi	r16, 0xFC	; 252
    150e:	1f 4f       	sbci	r17, 0xFF	; 255
    1510:	ff e3       	ldi	r31, 0x3F	; 63
    1512:	f9 83       	std	Y+1, r31	; 0x01
    1514:	0d c0       	rjmp	.+26     	; 0x1530 <vfprintf+0x10e>
    1516:	83 36       	cpi	r24, 0x63	; 99
    1518:	31 f0       	breq	.+12     	; 0x1526 <vfprintf+0x104>
    151a:	83 37       	cpi	r24, 0x73	; 115
    151c:	71 f0       	breq	.+28     	; 0x153a <vfprintf+0x118>
    151e:	83 35       	cpi	r24, 0x53	; 83
    1520:	09 f0       	breq	.+2      	; 0x1524 <vfprintf+0x102>
    1522:	5a c0       	rjmp	.+180    	; 0x15d8 <vfprintf+0x1b6>
    1524:	22 c0       	rjmp	.+68     	; 0x156a <vfprintf+0x148>
    1526:	f8 01       	movw	r30, r16
    1528:	80 81       	ld	r24, Z
    152a:	89 83       	std	Y+1, r24	; 0x01
    152c:	0e 5f       	subi	r16, 0xFE	; 254
    152e:	1f 4f       	sbci	r17, 0xFF	; 255
    1530:	66 24       	eor	r6, r6
    1532:	63 94       	inc	r6
    1534:	71 2c       	mov	r7, r1
    1536:	54 01       	movw	r10, r8
    1538:	14 c0       	rjmp	.+40     	; 0x1562 <vfprintf+0x140>
    153a:	28 01       	movw	r4, r16
    153c:	f2 e0       	ldi	r31, 0x02	; 2
    153e:	4f 0e       	add	r4, r31
    1540:	51 1c       	adc	r5, r1
    1542:	f8 01       	movw	r30, r16
    1544:	a0 80       	ld	r10, Z
    1546:	b1 80       	ldd	r11, Z+1	; 0x01
    1548:	26 ff       	sbrs	r18, 6
    154a:	03 c0       	rjmp	.+6      	; 0x1552 <vfprintf+0x130>
    154c:	67 2d       	mov	r22, r7
    154e:	70 e0       	ldi	r23, 0x00	; 0
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <vfprintf+0x134>
    1552:	6f ef       	ldi	r22, 0xFF	; 255
    1554:	7f ef       	ldi	r23, 0xFF	; 255
    1556:	c5 01       	movw	r24, r10
    1558:	2c 87       	std	Y+12, r18	; 0x0c
    155a:	3c d1       	rcall	.+632    	; 0x17d4 <strnlen>
    155c:	3c 01       	movw	r6, r24
    155e:	82 01       	movw	r16, r4
    1560:	2c 85       	ldd	r18, Y+12	; 0x0c
    1562:	6f e7       	ldi	r22, 0x7F	; 127
    1564:	26 2e       	mov	r2, r22
    1566:	22 22       	and	r2, r18
    1568:	17 c0       	rjmp	.+46     	; 0x1598 <vfprintf+0x176>
    156a:	28 01       	movw	r4, r16
    156c:	f2 e0       	ldi	r31, 0x02	; 2
    156e:	4f 0e       	add	r4, r31
    1570:	51 1c       	adc	r5, r1
    1572:	f8 01       	movw	r30, r16
    1574:	a0 80       	ld	r10, Z
    1576:	b1 80       	ldd	r11, Z+1	; 0x01
    1578:	26 ff       	sbrs	r18, 6
    157a:	03 c0       	rjmp	.+6      	; 0x1582 <vfprintf+0x160>
    157c:	67 2d       	mov	r22, r7
    157e:	70 e0       	ldi	r23, 0x00	; 0
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <vfprintf+0x164>
    1582:	6f ef       	ldi	r22, 0xFF	; 255
    1584:	7f ef       	ldi	r23, 0xFF	; 255
    1586:	c5 01       	movw	r24, r10
    1588:	2c 87       	std	Y+12, r18	; 0x0c
    158a:	19 d1       	rcall	.+562    	; 0x17be <strnlen_P>
    158c:	3c 01       	movw	r6, r24
    158e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1590:	50 e8       	ldi	r21, 0x80	; 128
    1592:	25 2e       	mov	r2, r21
    1594:	22 2a       	or	r2, r18
    1596:	82 01       	movw	r16, r4
    1598:	23 fc       	sbrc	r2, 3
    159a:	1a c0       	rjmp	.+52     	; 0x15d0 <vfprintf+0x1ae>
    159c:	05 c0       	rjmp	.+10     	; 0x15a8 <vfprintf+0x186>
    159e:	b7 01       	movw	r22, r14
    15a0:	80 e2       	ldi	r24, 0x20	; 32
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	22 d1       	rcall	.+580    	; 0x17ea <fputc>
    15a6:	3a 94       	dec	r3
    15a8:	83 2d       	mov	r24, r3
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	68 16       	cp	r6, r24
    15ae:	79 06       	cpc	r7, r25
    15b0:	b0 f3       	brcs	.-20     	; 0x159e <vfprintf+0x17c>
    15b2:	0e c0       	rjmp	.+28     	; 0x15d0 <vfprintf+0x1ae>
    15b4:	f5 01       	movw	r30, r10
    15b6:	27 fc       	sbrc	r2, 7
    15b8:	85 91       	lpm	r24, Z+
    15ba:	27 fe       	sbrs	r2, 7
    15bc:	81 91       	ld	r24, Z+
    15be:	5f 01       	movw	r10, r30
    15c0:	b7 01       	movw	r22, r14
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	12 d1       	rcall	.+548    	; 0x17ea <fputc>
    15c6:	31 10       	cpse	r3, r1
    15c8:	3a 94       	dec	r3
    15ca:	f1 e0       	ldi	r31, 0x01	; 1
    15cc:	6f 1a       	sub	r6, r31
    15ce:	71 08       	sbc	r7, r1
    15d0:	61 14       	cp	r6, r1
    15d2:	71 04       	cpc	r7, r1
    15d4:	79 f7       	brne	.-34     	; 0x15b4 <vfprintf+0x192>
    15d6:	e6 c0       	rjmp	.+460    	; 0x17a4 <vfprintf+0x382>
    15d8:	84 36       	cpi	r24, 0x64	; 100
    15da:	11 f0       	breq	.+4      	; 0x15e0 <vfprintf+0x1be>
    15dc:	89 36       	cpi	r24, 0x69	; 105
    15de:	39 f5       	brne	.+78     	; 0x162e <vfprintf+0x20c>
    15e0:	f8 01       	movw	r30, r16
    15e2:	27 ff       	sbrs	r18, 7
    15e4:	07 c0       	rjmp	.+14     	; 0x15f4 <vfprintf+0x1d2>
    15e6:	60 81       	ld	r22, Z
    15e8:	71 81       	ldd	r23, Z+1	; 0x01
    15ea:	82 81       	ldd	r24, Z+2	; 0x02
    15ec:	93 81       	ldd	r25, Z+3	; 0x03
    15ee:	0c 5f       	subi	r16, 0xFC	; 252
    15f0:	1f 4f       	sbci	r17, 0xFF	; 255
    15f2:	08 c0       	rjmp	.+16     	; 0x1604 <vfprintf+0x1e2>
    15f4:	60 81       	ld	r22, Z
    15f6:	71 81       	ldd	r23, Z+1	; 0x01
    15f8:	88 27       	eor	r24, r24
    15fa:	77 fd       	sbrc	r23, 7
    15fc:	80 95       	com	r24
    15fe:	98 2f       	mov	r25, r24
    1600:	0e 5f       	subi	r16, 0xFE	; 254
    1602:	1f 4f       	sbci	r17, 0xFF	; 255
    1604:	4f e6       	ldi	r20, 0x6F	; 111
    1606:	64 2e       	mov	r6, r20
    1608:	62 22       	and	r6, r18
    160a:	97 ff       	sbrs	r25, 7
    160c:	09 c0       	rjmp	.+18     	; 0x1620 <vfprintf+0x1fe>
    160e:	90 95       	com	r25
    1610:	80 95       	com	r24
    1612:	70 95       	com	r23
    1614:	61 95       	neg	r22
    1616:	7f 4f       	sbci	r23, 0xFF	; 255
    1618:	8f 4f       	sbci	r24, 0xFF	; 255
    161a:	9f 4f       	sbci	r25, 0xFF	; 255
    161c:	f0 e8       	ldi	r31, 0x80	; 128
    161e:	6f 2a       	or	r6, r31
    1620:	2a e0       	ldi	r18, 0x0A	; 10
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	a4 01       	movw	r20, r8
    1626:	0d d1       	rcall	.+538    	; 0x1842 <__ultoa_invert>
    1628:	a8 2e       	mov	r10, r24
    162a:	a8 18       	sub	r10, r8
    162c:	43 c0       	rjmp	.+134    	; 0x16b4 <vfprintf+0x292>
    162e:	85 37       	cpi	r24, 0x75	; 117
    1630:	31 f4       	brne	.+12     	; 0x163e <vfprintf+0x21c>
    1632:	3f ee       	ldi	r19, 0xEF	; 239
    1634:	b3 2e       	mov	r11, r19
    1636:	b2 22       	and	r11, r18
    1638:	2a e0       	ldi	r18, 0x0A	; 10
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	24 c0       	rjmp	.+72     	; 0x1686 <vfprintf+0x264>
    163e:	99 ef       	ldi	r25, 0xF9	; 249
    1640:	b9 2e       	mov	r11, r25
    1642:	b2 22       	and	r11, r18
    1644:	8f 36       	cpi	r24, 0x6F	; 111
    1646:	b9 f0       	breq	.+46     	; 0x1676 <vfprintf+0x254>
    1648:	20 f4       	brcc	.+8      	; 0x1652 <vfprintf+0x230>
    164a:	88 35       	cpi	r24, 0x58	; 88
    164c:	09 f0       	breq	.+2      	; 0x1650 <vfprintf+0x22e>
    164e:	ad c0       	rjmp	.+346    	; 0x17aa <vfprintf+0x388>
    1650:	0d c0       	rjmp	.+26     	; 0x166c <vfprintf+0x24a>
    1652:	80 37       	cpi	r24, 0x70	; 112
    1654:	21 f0       	breq	.+8      	; 0x165e <vfprintf+0x23c>
    1656:	88 37       	cpi	r24, 0x78	; 120
    1658:	09 f0       	breq	.+2      	; 0x165c <vfprintf+0x23a>
    165a:	a7 c0       	rjmp	.+334    	; 0x17aa <vfprintf+0x388>
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <vfprintf+0x240>
    165e:	20 e1       	ldi	r18, 0x10	; 16
    1660:	b2 2a       	or	r11, r18
    1662:	b4 fe       	sbrs	r11, 4
    1664:	0b c0       	rjmp	.+22     	; 0x167c <vfprintf+0x25a>
    1666:	84 e0       	ldi	r24, 0x04	; 4
    1668:	b8 2a       	or	r11, r24
    166a:	08 c0       	rjmp	.+16     	; 0x167c <vfprintf+0x25a>
    166c:	24 ff       	sbrs	r18, 4
    166e:	09 c0       	rjmp	.+18     	; 0x1682 <vfprintf+0x260>
    1670:	e6 e0       	ldi	r30, 0x06	; 6
    1672:	be 2a       	or	r11, r30
    1674:	06 c0       	rjmp	.+12     	; 0x1682 <vfprintf+0x260>
    1676:	28 e0       	ldi	r18, 0x08	; 8
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	05 c0       	rjmp	.+10     	; 0x1686 <vfprintf+0x264>
    167c:	20 e1       	ldi	r18, 0x10	; 16
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <vfprintf+0x264>
    1682:	20 e1       	ldi	r18, 0x10	; 16
    1684:	32 e0       	ldi	r19, 0x02	; 2
    1686:	f8 01       	movw	r30, r16
    1688:	b7 fe       	sbrs	r11, 7
    168a:	07 c0       	rjmp	.+14     	; 0x169a <vfprintf+0x278>
    168c:	60 81       	ld	r22, Z
    168e:	71 81       	ldd	r23, Z+1	; 0x01
    1690:	82 81       	ldd	r24, Z+2	; 0x02
    1692:	93 81       	ldd	r25, Z+3	; 0x03
    1694:	0c 5f       	subi	r16, 0xFC	; 252
    1696:	1f 4f       	sbci	r17, 0xFF	; 255
    1698:	06 c0       	rjmp	.+12     	; 0x16a6 <vfprintf+0x284>
    169a:	60 81       	ld	r22, Z
    169c:	71 81       	ldd	r23, Z+1	; 0x01
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	0e 5f       	subi	r16, 0xFE	; 254
    16a4:	1f 4f       	sbci	r17, 0xFF	; 255
    16a6:	a4 01       	movw	r20, r8
    16a8:	cc d0       	rcall	.+408    	; 0x1842 <__ultoa_invert>
    16aa:	a8 2e       	mov	r10, r24
    16ac:	a8 18       	sub	r10, r8
    16ae:	8f e7       	ldi	r24, 0x7F	; 127
    16b0:	68 2e       	mov	r6, r24
    16b2:	6b 20       	and	r6, r11
    16b4:	66 fe       	sbrs	r6, 6
    16b6:	0b c0       	rjmp	.+22     	; 0x16ce <vfprintf+0x2ac>
    16b8:	36 2d       	mov	r19, r6
    16ba:	3e 7f       	andi	r19, 0xFE	; 254
    16bc:	a7 14       	cp	r10, r7
    16be:	50 f4       	brcc	.+20     	; 0x16d4 <vfprintf+0x2b2>
    16c0:	64 fe       	sbrs	r6, 4
    16c2:	0a c0       	rjmp	.+20     	; 0x16d8 <vfprintf+0x2b6>
    16c4:	62 fc       	sbrc	r6, 2
    16c6:	08 c0       	rjmp	.+16     	; 0x16d8 <vfprintf+0x2b6>
    16c8:	36 2d       	mov	r19, r6
    16ca:	3e 7e       	andi	r19, 0xEE	; 238
    16cc:	05 c0       	rjmp	.+10     	; 0x16d8 <vfprintf+0x2b6>
    16ce:	ba 2c       	mov	r11, r10
    16d0:	36 2d       	mov	r19, r6
    16d2:	03 c0       	rjmp	.+6      	; 0x16da <vfprintf+0x2b8>
    16d4:	ba 2c       	mov	r11, r10
    16d6:	01 c0       	rjmp	.+2      	; 0x16da <vfprintf+0x2b8>
    16d8:	b7 2c       	mov	r11, r7
    16da:	34 ff       	sbrs	r19, 4
    16dc:	0d c0       	rjmp	.+26     	; 0x16f8 <vfprintf+0x2d6>
    16de:	fe 01       	movw	r30, r28
    16e0:	ea 0d       	add	r30, r10
    16e2:	f1 1d       	adc	r31, r1
    16e4:	80 81       	ld	r24, Z
    16e6:	80 33       	cpi	r24, 0x30	; 48
    16e8:	11 f4       	brne	.+4      	; 0x16ee <vfprintf+0x2cc>
    16ea:	39 7e       	andi	r19, 0xE9	; 233
    16ec:	09 c0       	rjmp	.+18     	; 0x1700 <vfprintf+0x2de>
    16ee:	32 ff       	sbrs	r19, 2
    16f0:	06 c0       	rjmp	.+12     	; 0x16fe <vfprintf+0x2dc>
    16f2:	b3 94       	inc	r11
    16f4:	b3 94       	inc	r11
    16f6:	04 c0       	rjmp	.+8      	; 0x1700 <vfprintf+0x2de>
    16f8:	83 2f       	mov	r24, r19
    16fa:	86 78       	andi	r24, 0x86	; 134
    16fc:	09 f0       	breq	.+2      	; 0x1700 <vfprintf+0x2de>
    16fe:	b3 94       	inc	r11
    1700:	33 fd       	sbrc	r19, 3
    1702:	13 c0       	rjmp	.+38     	; 0x172a <vfprintf+0x308>
    1704:	30 ff       	sbrs	r19, 0
    1706:	0e c0       	rjmp	.+28     	; 0x1724 <vfprintf+0x302>
    1708:	7a 2c       	mov	r7, r10
    170a:	b3 14       	cp	r11, r3
    170c:	58 f4       	brcc	.+22     	; 0x1724 <vfprintf+0x302>
    170e:	73 0c       	add	r7, r3
    1710:	7b 18       	sub	r7, r11
    1712:	b3 2c       	mov	r11, r3
    1714:	07 c0       	rjmp	.+14     	; 0x1724 <vfprintf+0x302>
    1716:	b7 01       	movw	r22, r14
    1718:	80 e2       	ldi	r24, 0x20	; 32
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	3c 87       	std	Y+12, r19	; 0x0c
    171e:	65 d0       	rcall	.+202    	; 0x17ea <fputc>
    1720:	b3 94       	inc	r11
    1722:	3c 85       	ldd	r19, Y+12	; 0x0c
    1724:	b3 14       	cp	r11, r3
    1726:	b8 f3       	brcs	.-18     	; 0x1716 <vfprintf+0x2f4>
    1728:	04 c0       	rjmp	.+8      	; 0x1732 <vfprintf+0x310>
    172a:	b3 14       	cp	r11, r3
    172c:	10 f4       	brcc	.+4      	; 0x1732 <vfprintf+0x310>
    172e:	3b 18       	sub	r3, r11
    1730:	01 c0       	rjmp	.+2      	; 0x1734 <vfprintf+0x312>
    1732:	31 2c       	mov	r3, r1
    1734:	34 ff       	sbrs	r19, 4
    1736:	11 c0       	rjmp	.+34     	; 0x175a <vfprintf+0x338>
    1738:	b7 01       	movw	r22, r14
    173a:	80 e3       	ldi	r24, 0x30	; 48
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	3c 87       	std	Y+12, r19	; 0x0c
    1740:	54 d0       	rcall	.+168    	; 0x17ea <fputc>
    1742:	3c 85       	ldd	r19, Y+12	; 0x0c
    1744:	32 ff       	sbrs	r19, 2
    1746:	1c c0       	rjmp	.+56     	; 0x1780 <vfprintf+0x35e>
    1748:	31 ff       	sbrs	r19, 1
    174a:	03 c0       	rjmp	.+6      	; 0x1752 <vfprintf+0x330>
    174c:	88 e5       	ldi	r24, 0x58	; 88
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	02 c0       	rjmp	.+4      	; 0x1756 <vfprintf+0x334>
    1752:	88 e7       	ldi	r24, 0x78	; 120
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	b7 01       	movw	r22, r14
    1758:	0c c0       	rjmp	.+24     	; 0x1772 <vfprintf+0x350>
    175a:	83 2f       	mov	r24, r19
    175c:	86 78       	andi	r24, 0x86	; 134
    175e:	81 f0       	breq	.+32     	; 0x1780 <vfprintf+0x35e>
    1760:	31 fd       	sbrc	r19, 1
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <vfprintf+0x346>
    1764:	80 e2       	ldi	r24, 0x20	; 32
    1766:	01 c0       	rjmp	.+2      	; 0x176a <vfprintf+0x348>
    1768:	8b e2       	ldi	r24, 0x2B	; 43
    176a:	37 fd       	sbrc	r19, 7
    176c:	8d e2       	ldi	r24, 0x2D	; 45
    176e:	b7 01       	movw	r22, r14
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	3b d0       	rcall	.+118    	; 0x17ea <fputc>
    1774:	05 c0       	rjmp	.+10     	; 0x1780 <vfprintf+0x35e>
    1776:	b7 01       	movw	r22, r14
    1778:	80 e3       	ldi	r24, 0x30	; 48
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	36 d0       	rcall	.+108    	; 0x17ea <fputc>
    177e:	7a 94       	dec	r7
    1780:	a7 14       	cp	r10, r7
    1782:	c8 f3       	brcs	.-14     	; 0x1776 <vfprintf+0x354>
    1784:	aa 94       	dec	r10
    1786:	f4 01       	movw	r30, r8
    1788:	ea 0d       	add	r30, r10
    178a:	f1 1d       	adc	r31, r1
    178c:	b7 01       	movw	r22, r14
    178e:	80 81       	ld	r24, Z
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	2b d0       	rcall	.+86     	; 0x17ea <fputc>
    1794:	a1 10       	cpse	r10, r1
    1796:	f6 cf       	rjmp	.-20     	; 0x1784 <vfprintf+0x362>
    1798:	05 c0       	rjmp	.+10     	; 0x17a4 <vfprintf+0x382>
    179a:	b7 01       	movw	r22, r14
    179c:	80 e2       	ldi	r24, 0x20	; 32
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	24 d0       	rcall	.+72     	; 0x17ea <fputc>
    17a2:	3a 94       	dec	r3
    17a4:	31 10       	cpse	r3, r1
    17a6:	f9 cf       	rjmp	.-14     	; 0x179a <vfprintf+0x378>
    17a8:	4f ce       	rjmp	.-866    	; 0x1448 <vfprintf+0x26>
    17aa:	f7 01       	movw	r30, r14
    17ac:	26 81       	ldd	r18, Z+6	; 0x06
    17ae:	37 81       	ldd	r19, Z+7	; 0x07
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <vfprintf+0x394>
    17b2:	2f ef       	ldi	r18, 0xFF	; 255
    17b4:	3f ef       	ldi	r19, 0xFF	; 255
    17b6:	c9 01       	movw	r24, r18
    17b8:	2c 96       	adiw	r28, 0x0c	; 12
    17ba:	e2 e1       	ldi	r30, 0x12	; 18
    17bc:	bc c0       	rjmp	.+376    	; 0x1936 <__epilogue_restores__>

000017be <strnlen_P>:
    17be:	fc 01       	movw	r30, r24
    17c0:	05 90       	lpm	r0, Z+
    17c2:	61 50       	subi	r22, 0x01	; 1
    17c4:	70 40       	sbci	r23, 0x00	; 0
    17c6:	01 10       	cpse	r0, r1
    17c8:	d8 f7       	brcc	.-10     	; 0x17c0 <strnlen_P+0x2>
    17ca:	80 95       	com	r24
    17cc:	90 95       	com	r25
    17ce:	8e 0f       	add	r24, r30
    17d0:	9f 1f       	adc	r25, r31
    17d2:	08 95       	ret

000017d4 <strnlen>:
    17d4:	fc 01       	movw	r30, r24
    17d6:	61 50       	subi	r22, 0x01	; 1
    17d8:	70 40       	sbci	r23, 0x00	; 0
    17da:	01 90       	ld	r0, Z+
    17dc:	01 10       	cpse	r0, r1
    17de:	d8 f7       	brcc	.-10     	; 0x17d6 <strnlen+0x2>
    17e0:	80 95       	com	r24
    17e2:	90 95       	com	r25
    17e4:	8e 0f       	add	r24, r30
    17e6:	9f 1f       	adc	r25, r31
    17e8:	08 95       	ret

000017ea <fputc>:
    17ea:	0f 93       	push	r16
    17ec:	1f 93       	push	r17
    17ee:	cf 93       	push	r28
    17f0:	df 93       	push	r29
    17f2:	8c 01       	movw	r16, r24
    17f4:	eb 01       	movw	r28, r22
    17f6:	8b 81       	ldd	r24, Y+3	; 0x03
    17f8:	81 fd       	sbrc	r24, 1
    17fa:	03 c0       	rjmp	.+6      	; 0x1802 <fputc+0x18>
    17fc:	0f ef       	ldi	r16, 0xFF	; 255
    17fe:	1f ef       	ldi	r17, 0xFF	; 255
    1800:	1a c0       	rjmp	.+52     	; 0x1836 <fputc+0x4c>
    1802:	82 ff       	sbrs	r24, 2
    1804:	0d c0       	rjmp	.+26     	; 0x1820 <fputc+0x36>
    1806:	2e 81       	ldd	r18, Y+6	; 0x06
    1808:	3f 81       	ldd	r19, Y+7	; 0x07
    180a:	8c 81       	ldd	r24, Y+4	; 0x04
    180c:	9d 81       	ldd	r25, Y+5	; 0x05
    180e:	28 17       	cp	r18, r24
    1810:	39 07       	cpc	r19, r25
    1812:	64 f4       	brge	.+24     	; 0x182c <fputc+0x42>
    1814:	e8 81       	ld	r30, Y
    1816:	f9 81       	ldd	r31, Y+1	; 0x01
    1818:	01 93       	st	Z+, r16
    181a:	f9 83       	std	Y+1, r31	; 0x01
    181c:	e8 83       	st	Y, r30
    181e:	06 c0       	rjmp	.+12     	; 0x182c <fputc+0x42>
    1820:	e8 85       	ldd	r30, Y+8	; 0x08
    1822:	f9 85       	ldd	r31, Y+9	; 0x09
    1824:	80 2f       	mov	r24, r16
    1826:	09 95       	icall
    1828:	89 2b       	or	r24, r25
    182a:	41 f7       	brne	.-48     	; 0x17fc <fputc+0x12>
    182c:	8e 81       	ldd	r24, Y+6	; 0x06
    182e:	9f 81       	ldd	r25, Y+7	; 0x07
    1830:	01 96       	adiw	r24, 0x01	; 1
    1832:	9f 83       	std	Y+7, r25	; 0x07
    1834:	8e 83       	std	Y+6, r24	; 0x06
    1836:	c8 01       	movw	r24, r16
    1838:	df 91       	pop	r29
    183a:	cf 91       	pop	r28
    183c:	1f 91       	pop	r17
    183e:	0f 91       	pop	r16
    1840:	08 95       	ret

00001842 <__ultoa_invert>:
    1842:	fa 01       	movw	r30, r20
    1844:	aa 27       	eor	r26, r26
    1846:	28 30       	cpi	r18, 0x08	; 8
    1848:	51 f1       	breq	.+84     	; 0x189e <__ultoa_invert+0x5c>
    184a:	20 31       	cpi	r18, 0x10	; 16
    184c:	81 f1       	breq	.+96     	; 0x18ae <__ultoa_invert+0x6c>
    184e:	e8 94       	clt
    1850:	6f 93       	push	r22
    1852:	6e 7f       	andi	r22, 0xFE	; 254
    1854:	6e 5f       	subi	r22, 0xFE	; 254
    1856:	7f 4f       	sbci	r23, 0xFF	; 255
    1858:	8f 4f       	sbci	r24, 0xFF	; 255
    185a:	9f 4f       	sbci	r25, 0xFF	; 255
    185c:	af 4f       	sbci	r26, 0xFF	; 255
    185e:	b1 e0       	ldi	r27, 0x01	; 1
    1860:	3e d0       	rcall	.+124    	; 0x18de <__ultoa_invert+0x9c>
    1862:	b4 e0       	ldi	r27, 0x04	; 4
    1864:	3c d0       	rcall	.+120    	; 0x18de <__ultoa_invert+0x9c>
    1866:	67 0f       	add	r22, r23
    1868:	78 1f       	adc	r23, r24
    186a:	89 1f       	adc	r24, r25
    186c:	9a 1f       	adc	r25, r26
    186e:	a1 1d       	adc	r26, r1
    1870:	68 0f       	add	r22, r24
    1872:	79 1f       	adc	r23, r25
    1874:	8a 1f       	adc	r24, r26
    1876:	91 1d       	adc	r25, r1
    1878:	a1 1d       	adc	r26, r1
    187a:	6a 0f       	add	r22, r26
    187c:	71 1d       	adc	r23, r1
    187e:	81 1d       	adc	r24, r1
    1880:	91 1d       	adc	r25, r1
    1882:	a1 1d       	adc	r26, r1
    1884:	20 d0       	rcall	.+64     	; 0x18c6 <__ultoa_invert+0x84>
    1886:	09 f4       	brne	.+2      	; 0x188a <__ultoa_invert+0x48>
    1888:	68 94       	set
    188a:	3f 91       	pop	r19
    188c:	2a e0       	ldi	r18, 0x0A	; 10
    188e:	26 9f       	mul	r18, r22
    1890:	11 24       	eor	r1, r1
    1892:	30 19       	sub	r19, r0
    1894:	30 5d       	subi	r19, 0xD0	; 208
    1896:	31 93       	st	Z+, r19
    1898:	de f6       	brtc	.-74     	; 0x1850 <__ultoa_invert+0xe>
    189a:	cf 01       	movw	r24, r30
    189c:	08 95       	ret
    189e:	46 2f       	mov	r20, r22
    18a0:	47 70       	andi	r20, 0x07	; 7
    18a2:	40 5d       	subi	r20, 0xD0	; 208
    18a4:	41 93       	st	Z+, r20
    18a6:	b3 e0       	ldi	r27, 0x03	; 3
    18a8:	0f d0       	rcall	.+30     	; 0x18c8 <__ultoa_invert+0x86>
    18aa:	c9 f7       	brne	.-14     	; 0x189e <__ultoa_invert+0x5c>
    18ac:	f6 cf       	rjmp	.-20     	; 0x189a <__ultoa_invert+0x58>
    18ae:	46 2f       	mov	r20, r22
    18b0:	4f 70       	andi	r20, 0x0F	; 15
    18b2:	40 5d       	subi	r20, 0xD0	; 208
    18b4:	4a 33       	cpi	r20, 0x3A	; 58
    18b6:	18 f0       	brcs	.+6      	; 0x18be <__ultoa_invert+0x7c>
    18b8:	49 5d       	subi	r20, 0xD9	; 217
    18ba:	31 fd       	sbrc	r19, 1
    18bc:	40 52       	subi	r20, 0x20	; 32
    18be:	41 93       	st	Z+, r20
    18c0:	02 d0       	rcall	.+4      	; 0x18c6 <__ultoa_invert+0x84>
    18c2:	a9 f7       	brne	.-22     	; 0x18ae <__ultoa_invert+0x6c>
    18c4:	ea cf       	rjmp	.-44     	; 0x189a <__ultoa_invert+0x58>
    18c6:	b4 e0       	ldi	r27, 0x04	; 4
    18c8:	a6 95       	lsr	r26
    18ca:	97 95       	ror	r25
    18cc:	87 95       	ror	r24
    18ce:	77 95       	ror	r23
    18d0:	67 95       	ror	r22
    18d2:	ba 95       	dec	r27
    18d4:	c9 f7       	brne	.-14     	; 0x18c8 <__ultoa_invert+0x86>
    18d6:	00 97       	sbiw	r24, 0x00	; 0
    18d8:	61 05       	cpc	r22, r1
    18da:	71 05       	cpc	r23, r1
    18dc:	08 95       	ret
    18de:	9b 01       	movw	r18, r22
    18e0:	ac 01       	movw	r20, r24
    18e2:	0a 2e       	mov	r0, r26
    18e4:	06 94       	lsr	r0
    18e6:	57 95       	ror	r21
    18e8:	47 95       	ror	r20
    18ea:	37 95       	ror	r19
    18ec:	27 95       	ror	r18
    18ee:	ba 95       	dec	r27
    18f0:	c9 f7       	brne	.-14     	; 0x18e4 <__ultoa_invert+0xa2>
    18f2:	62 0f       	add	r22, r18
    18f4:	73 1f       	adc	r23, r19
    18f6:	84 1f       	adc	r24, r20
    18f8:	95 1f       	adc	r25, r21
    18fa:	a0 1d       	adc	r26, r0
    18fc:	08 95       	ret

000018fe <__prologue_saves__>:
    18fe:	2f 92       	push	r2
    1900:	3f 92       	push	r3
    1902:	4f 92       	push	r4
    1904:	5f 92       	push	r5
    1906:	6f 92       	push	r6
    1908:	7f 92       	push	r7
    190a:	8f 92       	push	r8
    190c:	9f 92       	push	r9
    190e:	af 92       	push	r10
    1910:	bf 92       	push	r11
    1912:	cf 92       	push	r12
    1914:	df 92       	push	r13
    1916:	ef 92       	push	r14
    1918:	ff 92       	push	r15
    191a:	0f 93       	push	r16
    191c:	1f 93       	push	r17
    191e:	cf 93       	push	r28
    1920:	df 93       	push	r29
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
    1926:	ca 1b       	sub	r28, r26
    1928:	db 0b       	sbc	r29, r27
    192a:	0f b6       	in	r0, 0x3f	; 63
    192c:	f8 94       	cli
    192e:	de bf       	out	0x3e, r29	; 62
    1930:	0f be       	out	0x3f, r0	; 63
    1932:	cd bf       	out	0x3d, r28	; 61
    1934:	09 94       	ijmp

00001936 <__epilogue_restores__>:
    1936:	2a 88       	ldd	r2, Y+18	; 0x12
    1938:	39 88       	ldd	r3, Y+17	; 0x11
    193a:	48 88       	ldd	r4, Y+16	; 0x10
    193c:	5f 84       	ldd	r5, Y+15	; 0x0f
    193e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1940:	7d 84       	ldd	r7, Y+13	; 0x0d
    1942:	8c 84       	ldd	r8, Y+12	; 0x0c
    1944:	9b 84       	ldd	r9, Y+11	; 0x0b
    1946:	aa 84       	ldd	r10, Y+10	; 0x0a
    1948:	b9 84       	ldd	r11, Y+9	; 0x09
    194a:	c8 84       	ldd	r12, Y+8	; 0x08
    194c:	df 80       	ldd	r13, Y+7	; 0x07
    194e:	ee 80       	ldd	r14, Y+6	; 0x06
    1950:	fd 80       	ldd	r15, Y+5	; 0x05
    1952:	0c 81       	ldd	r16, Y+4	; 0x04
    1954:	1b 81       	ldd	r17, Y+3	; 0x03
    1956:	aa 81       	ldd	r26, Y+2	; 0x02
    1958:	b9 81       	ldd	r27, Y+1	; 0x01
    195a:	ce 0f       	add	r28, r30
    195c:	d1 1d       	adc	r29, r1
    195e:	0f b6       	in	r0, 0x3f	; 63
    1960:	f8 94       	cli
    1962:	de bf       	out	0x3e, r29	; 62
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	cd bf       	out	0x3d, r28	; 61
    1968:	ed 01       	movw	r28, r26
    196a:	08 95       	ret

0000196c <_exit>:
    196c:	f8 94       	cli

0000196e <__stop_program>:
    196e:	ff cf       	rjmp	.-2      	; 0x196e <__stop_program>
