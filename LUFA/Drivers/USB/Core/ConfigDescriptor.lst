   1               		.file	"ConfigDescriptor.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.USB_GetNextDescriptor,"ax",@progbits
  13               	USB_GetNextDescriptor:
  14               	.LFB83:
  15               		.file 1 "../../LUFA/Drivers/USB/Core/ConfigDescriptor.h"
   1:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** /*
   2:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****              LUFA Library
   3:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****      Copyright (C) Dean Camera, 2012.
   4:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
   5:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****            www.lufa-lib.org
   7:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** */
   8:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
   9:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** /*
  10:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
  12:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****   documentation, and that the name of the author not be used in
  18:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
  21:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****   this software.
  29:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** */
  30:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
  31:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** /** \file
  32:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****  *  \brief USB Configuration Descriptor definitions.
  33:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****  *  \copydetails Group_ConfigDescriptorParser
  34:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****  *
  35:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****  */
  38:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
  39:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** /** \ingroup Group_StdDescriptors
  40:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****  *  \defgroup Group_ConfigDescriptorParser Configuration Descriptor Parser
  41:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****  *  \brief USB Configuration Descriptor definitions.
  42:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****  *
  43:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****  *  This section of the library gives a friendly API which can be used in host applications to easi
  44:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****  *  parse an attached device's configuration descriptor so that endpoint, interface and other descr
  45:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****  *  data can be extracted and used as needed.
  46:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****  *
  47:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****  *  @{
  48:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****  */
  49:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
  50:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** #ifndef __CONFIGDESCRIPTOR_H__
  51:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** #define __CONFIGDESCRIPTOR_H__
  52:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
  53:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 	/* Includes: */
  54:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 		#include "../../../Common/Common.h"
  55:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 		#include "USBMode.h"
  56:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 		#include "HostStandardReq.h"
  57:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 		#include "StdDescriptors.h"
  58:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
  59:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 	/* Enable C linkage for C++ Compilers: */
  60:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 		#if defined(__cplusplus)
  61:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			extern "C" {
  62:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 		#endif
  63:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
  64:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 	/* Preprocessor Checks: */
  65:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  66:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  67:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 		#endif
  68:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
  69:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 	/* Public Interface - May be used in end-application: */
  70:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 		/* Macros: */
  71:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			/** Casts a pointer to a descriptor inside the configuration descriptor into a pointer to the gi
  72:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  descriptor type.
  73:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *
  74:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  Usage Example:
  75:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  \code
  76:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  uint8_t* CurrDescriptor = &ConfigDescriptor[0]; // Pointing to the configuration header
  77:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  USB_Descriptor_Configuration_Header_t* ConfigHeaderPtr = DESCRIPTOR_PCAST(CurrDescriptor,
  78:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *                                                           USB_Descriptor_Configuration_Header
  79:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  
  80:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  // Can now access elements of the configuration header struct using the -> indirection opera
  81:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  \endcode
  82:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 */
  83:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			#define DESCRIPTOR_PCAST(DescriptorPtr, Type) ((Type*)(DescriptorPtr))
  84:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
  85:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			/** Casts a pointer to a descriptor inside the configuration descriptor into the given descripto
  86:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  type (as an actual struct instance rather than a pointer to a struct).
  87:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *
  88:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  Usage Example:
  89:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  \code
  90:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  uint8_t* CurrDescriptor = &ConfigDescriptor[0]; // Pointing to the configuration header
  91:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  USB_Descriptor_Configuration_Header_t ConfigHeader = DESCRIPTOR_CAST(CurrDescriptor,
  92:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *                                                       USB_Descriptor_Configuration_Header_t);
  93:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  
  94:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  // Can now access elements of the configuration header struct using the . operator
  95:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  \endcode
  96:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 */
  97:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			#define DESCRIPTOR_CAST(DescriptorPtr, Type)  (*DESCRIPTOR_PCAST(DescriptorPtr, Type))
  98:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
  99:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			/** Returns the descriptor's type, expressed as the 8-bit type value in the header of the descri
 100:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  This value's meaning depends on the descriptor's placement in the descriptor, but standard t
 101:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  values can be accessed in the \ref USB_DescriptorTypes_t enum.
 102:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 */
 103:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			#define DESCRIPTOR_TYPE(DescriptorPtr)    DESCRIPTOR_PCAST(DescriptorPtr, USB_Descriptor_Header_
 104:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
 105:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			/** Returns the descriptor's size, expressed as the 8-bit value indicating the number of bytes. 
 106:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			#define DESCRIPTOR_SIZE(DescriptorPtr)    DESCRIPTOR_PCAST(DescriptorPtr, USB_Descriptor_Header_
 107:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
 108:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 		/* Type Defines: */
 109:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			/** Type define for a Configuration Descriptor comparator function (function taking a pointer to
 110:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  of type void, returning a uint8_t value).
 111:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *
 112:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  \see \ref USB_GetNextDescriptorComp function for more details.
 113:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 */
 114:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			typedef uint8_t (* ConfigComparatorPtr_t)(void*);
 115:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
 116:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 		/* Enums: */
 117:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			/** Enum for the possible return codes of the \ref USB_Host_GetDeviceConfigDescriptor() function
 118:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			enum USB_Host_GetConfigDescriptor_ErrorCodes_t
 119:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			{
 120:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				HOST_GETCONFIG_Successful       = 0, /**< No error occurred while retrieving the configuration 
 121:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				HOST_GETCONFIG_DeviceDisconnect = 1, /**< The attached device was disconnected while retrieving
 122:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				                                        * descriptor.
 123:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				                                        */
 124:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				HOST_GETCONFIG_PipeError        = 2, /**< An error occurred in the pipe while sending the reque
 125:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				HOST_GETCONFIG_SetupStalled     = 3, /**< The attached device stalled the request to retrieve t
 126:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				                                        * descriptor.
 127:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				                                        */
 128:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				HOST_GETCONFIG_SoftwareTimeOut  = 4, /**< The request or data transfer timed out. */
 129:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				HOST_GETCONFIG_BuffOverflow     = 5, /**< The device's configuration descriptor is too large to
 130:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				                                        * buffer.
 131:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				                                        */
 132:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				HOST_GETCONFIG_InvalidData      = 6, /**< The device returned invalid configuration descriptor 
 133:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			};
 134:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
 135:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			/** Enum for return values of a descriptor comparator function. */
 136:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			enum DSearch_Return_ErrorCodes_t
 137:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			{
 138:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				DESCRIPTOR_SEARCH_Found                = 0, /**< Current descriptor matches comparator criteria
 139:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				DESCRIPTOR_SEARCH_Fail                 = 1, /**< No further descriptor could possibly match cri
 140:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				DESCRIPTOR_SEARCH_NotFound             = 2, /**< Current descriptor does not match comparator c
 141:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			};
 142:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
 143:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			/** Enum for return values of \ref USB_GetNextDescriptorComp(). */
 144:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			enum DSearch_Comp_Return_ErrorCodes_t
 145:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			{
 146:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				DESCRIPTOR_SEARCH_COMP_Found           = 0, /**< Configuration descriptor now points to descrip
 147:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				                                             *   search criteria of the given comparator functi
 148:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				DESCRIPTOR_SEARCH_COMP_Fail            = 1, /**< Comparator function returned \ref DESCRIPTOR_S
 149:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				DESCRIPTOR_SEARCH_COMP_EndOfDescriptor = 2, /**< End of configuration descriptor reached before
 150:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			};
 151:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
 152:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 		/* Function Prototypes: */
 153:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			/** Retrieves the configuration descriptor data from an attached device via a standard request i
 154:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  including validity and size checking to prevent a buffer overflow.
 155:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *
 156:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  \param[in]     ConfigNumber   Device configuration descriptor number to fetch from the devic
 157:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *                                single configuration devices).
 158:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  \param[in,out] ConfigSizePtr  Pointer to a location for storing the retrieved configuration 
 159:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  \param[out]    BufferPtr      Pointer to the buffer for storing the configuration descriptor
 160:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  \param[out]    BufferSize     Size of the allocated buffer where the configuration descripto
 161:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *
 162:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  \return A value from the \ref USB_Host_GetConfigDescriptor_ErrorCodes_t enum.
 163:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 */
 164:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
 165:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			                                           uint16_t* const ConfigSizePtr,
 166:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			                                           void* const BufferPtr,
 167:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			                                           const uint16_t BufferSize) ATTR_NON_NULL_PTR_ARG(2) A
 168:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
 169:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			/** Skips to the next sub-descriptor inside the configuration descriptor of the specified type v
 170:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  The bytes remaining value is automatically decremented.
 171:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *
 172:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 * \param[in,out] BytesRem       Pointer to the number of bytes remaining of the configuration d
 173:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 * \param[in,out] CurrConfigLoc  Pointer to the current descriptor inside the configuration desc
 174:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 * \param[in]     Type           Descriptor type value to search for.
 175:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 */
 176:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			void USB_GetNextDescriptorOfType(uint16_t* const BytesRem,
 177:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			                                 void** const CurrConfigLoc,
 178:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			                                 const uint8_t Type)
 179:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			                                 ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
 180:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
 181:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			/** Skips to the next sub-descriptor inside the configuration descriptor of the specified type v
 182:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  which must come before a descriptor of the second given type value. If the BeforeType type
 183:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  descriptor is reached first, the number of bytes remaining to process is set to zero and the
 184:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  function exits. The bytes remaining value is automatically decremented.
 185:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *
 186:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 * \param[in,out] BytesRem       Pointer to the number of bytes remaining of the configuration d
 187:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 * \param[in,out] CurrConfigLoc  Pointer to the current descriptor inside the configuration desc
 188:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 * \param[in]     Type           Descriptor type value to search for.
 189:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 * \param[in]     BeforeType     Descriptor type value which must not be reached before the give
 190:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 */
 191:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			void USB_GetNextDescriptorOfTypeBefore(uint16_t* const BytesRem,
 192:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			                                       void** const CurrConfigLoc,
 193:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			                                       const uint8_t Type,
 194:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			                                       const uint8_t BeforeType)
 195:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			                                       ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
 196:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
 197:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			/** Skips to the next sub-descriptor inside the configuration descriptor of the specified type v
 198:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  which must come after a descriptor of the second given type value. The bytes remaining value
 199:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  automatically decremented.
 200:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *
 201:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 * \param[in,out] BytesRem       Pointer to the number of bytes remaining of the configuration d
 202:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 * \param[in,out] CurrConfigLoc  Pointer to the current descriptor inside the configuration desc
 203:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 * \param[in]     Type           Descriptor type value to search for.
 204:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 * \param[in]     AfterType      Descriptor type value which must be reached before the given Ty
 205:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 */
 206:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			void USB_GetNextDescriptorOfTypeAfter(uint16_t* const BytesRem,
 207:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			                                      void** const CurrConfigLoc,
 208:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			                                      const uint8_t Type,
 209:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			                                      const uint8_t AfterType)
 210:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			                                      ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
 211:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
 212:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			/** Searches for the next descriptor in the given configuration descriptor using a pre-made comp
 213:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  function. The routine updates the position and remaining configuration descriptor bytes valu
 214:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  automatically. If a comparator routine fails a search, the descriptor pointer is retreated b
 215:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  so that the next descriptor search invocation will start from the descriptor which first cau
 216:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  original search to fail. This behaviour allows for one comparator to be used immediately aft
 217:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  has failed, starting the second search from the descriptor which failed the first.
 218:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *
 219:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  Comparator functions should be standard functions which accept a pointer to the header of th
 220:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  descriptor inside the configuration descriptor which is being compared, and should return a 
 221:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  the \ref DSearch_Return_ErrorCodes_t enum as a uint8_t value.
 222:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *
 223:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  \note This function is available in USB Host mode only.
 224:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *
 225:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  \param[in,out] BytesRem           Pointer to an int storing the remaining bytes in the confi
 226:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  \param[in,out] CurrConfigLoc      Pointer to the current position in the configuration descr
 227:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  \param[in]     ComparatorRoutine  Name of the comparator search function to use on the confi
 228:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *
 229:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  \return Value of one of the members of the \ref DSearch_Comp_Return_ErrorCodes_t enum.
 230:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *
 231:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  Usage Example:
 232:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  \code
 233:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  uint8_t EndpointSearcher(void* CurrentDescriptor); // Comparator Prototype
 234:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  
 235:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  uint8_t EndpointSearcher(void* CurrentDescriptor)
 236:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  {
 237:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *     if (DESCRIPTOR_TYPE(CurrentDescriptor) == DTYPE_Endpoint)
 238:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *         return DESCRIPTOR_SEARCH_Found;
 239:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *     else
 240:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *         return DESCRIPTOR_SEARCH_NotFound;
 241:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  }
 242:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  
 243:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  //...
 244:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  
 245:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  // After retrieving configuration descriptor:
 246:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  if (USB_Host_GetNextDescriptorComp(&BytesRemaining, &CurrentConfigLoc, EndpointSearcher) ==
 247:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *      Descriptor_Search_Comp_Found)
 248:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  {
 249:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *      // Do something with the endpoint descriptor
 250:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  }
 251:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  \endcode
 252:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 */
 253:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
 254:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			                                  void** const CurrConfigLoc,
 255:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			                                  ConfigComparatorPtr_t const ComparatorRoutine);
 256:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
 257:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 		/* Inline Functions: */
 258:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			/** Skips over the current sub-descriptor inside the configuration descriptor, so that the point
 259:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			    points to the next sub-descriptor. The bytes remaining value is automatically decremented.
 260:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *
 261:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 * \param[in,out] BytesRem       Pointer to the number of bytes remaining of the configuration d
 262:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 * \param[in,out] CurrConfigLoc  Pointer to the current descriptor inside the configuration desc
 263:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 */
 264:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
 265:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON
 266:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
 267:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			                                         void** CurrConfigLoc)
 268:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			{
  16               		.loc 1 268 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 CF93      		push r28
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 28, -2
  23 0002 DF93      		push r29
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 29, -3
  27               	/* prologue: function */
  28               	/* frame size = 0 */
  29               	/* stack size = 2 */
  30               	.L__stack_usage = 2
  31 0004 FC01      		movw r30,r24
 269:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
  32               		.loc 1 269 0
  33 0006 EB01      		movw r28,r22
  34 0008 A881      		ld r26,Y
  35 000a B981      		ldd r27,Y+1
  36 000c 8C91      		ld r24,X
  37               	.LVL1:
  38 000e 90E0      		ldi r25,0
  39               	.LVL2:
  40 0010 2081      		ld r18,Z
  41 0012 3181      		ldd r19,Z+1
  42 0014 8217      		cp r24,r18
  43 0016 9307      		cpc r25,r19
  44 0018 00F4      		brsh .L2
  45 001a 9C01      		movw r18,r24
  46               	.L2:
  47               	.LVL3:
 270:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
 271:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				if (*BytesRem < CurrDescriptorSize)
 272:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				  CurrDescriptorSize = *BytesRem;
 273:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
 274:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
  48               		.loc 1 274 0
  49 001c A20F      		add r26,r18
  50 001e B31F      		adc r27,r19
  51 0020 EB01      		movw r28,r22
  52 0022 B983      		std Y+1,r27
  53 0024 A883      		st Y,r26
 275:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				*BytesRem      -= CurrDescriptorSize;
  54               		.loc 1 275 0
  55 0026 8081      		ld r24,Z
  56 0028 9181      		ldd r25,Z+1
  57 002a 821B      		sub r24,r18
  58 002c 930B      		sbc r25,r19
  59 002e 9183      		std Z+1,r25
  60 0030 8083      		st Z,r24
  61               	/* epilogue start */
 276:../../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			}
  62               		.loc 1 276 0
  63 0032 DF91      		pop r29
  64 0034 CF91      		pop r28
  65 0036 0895      		ret
  66               		.cfi_endproc
  67               	.LFE83:
  69               		.section	.text.USB_GetNextDescriptorOfType,"ax",@progbits
  70               	.global	USB_GetNextDescriptorOfType
  72               	USB_GetNextDescriptorOfType:
  73               	.LFB84:
  74               		.file 2 "../../LUFA/Drivers/USB/Core/ConfigDescriptor.c"
   1:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** /*
   2:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****              LUFA Library
   3:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****      Copyright (C) Dean Camera, 2012.
   4:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
   5:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****            www.lufa-lib.org
   7:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** */
   8:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
   9:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** /*
  10:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
  12:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****   documentation, and that the name of the author not be used in
  18:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
  21:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****   this software.
  29:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** */
  30:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
  31:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** #define  __INCLUDE_FROM_USB_DRIVER
  32:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** #include "ConfigDescriptor.h"
  33:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
  34:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** #if defined(USB_CAN_BE_HOST)
  35:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
  36:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****                                            uint16_t* const ConfigSizePtr,
  37:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****                                            void* const BufferPtr,
  38:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****                                            const uint16_t BufferSize)
  39:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** {
  40:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	uint8_t ErrorCode;
  41:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];
  42:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
  43:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	USB_ControlRequest = (USB_Request_Header_t)
  44:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 		{
  45:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
  46:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 			.bRequest      = REQ_GetDescriptor,
  47:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
  48:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 			.wIndex        = 0,
  49:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
  50:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 		};
  51:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
  52:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	Pipe_SelectPipe(PIPE_CONTROLPIPE);
  53:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
  54:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
  55:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	  return ErrorCode;
  56:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
  57:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)
  58:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
  59:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	if (*ConfigSizePtr > BufferSize)
  60:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	  return HOST_GETCONFIG_BuffOverflow;
  61:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
  62:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	USB_ControlRequest.wLength = *ConfigSizePtr;
  63:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
  64:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
  65:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	  return ErrorCode;
  66:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
  67:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
  68:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	  return HOST_GETCONFIG_InvalidData;
  69:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
  70:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	return HOST_GETCONFIG_Successful;
  71:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** }
  72:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** #endif
  73:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
  74:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** void USB_GetNextDescriptorOfType(uint16_t* const BytesRem,
  75:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****                                  void** const CurrConfigLoc,
  76:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****                                  const uint8_t Type)
  77:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** {
  75               		.loc 2 77 0
  76               		.cfi_startproc
  77               	.LVL4:
  78 0000 CF92      		push r12
  79               	.LCFI2:
  80               		.cfi_def_cfa_offset 3
  81               		.cfi_offset 12, -2
  82 0002 DF92      		push r13
  83               	.LCFI3:
  84               		.cfi_def_cfa_offset 4
  85               		.cfi_offset 13, -3
  86 0004 EF92      		push r14
  87               	.LCFI4:
  88               		.cfi_def_cfa_offset 5
  89               		.cfi_offset 14, -4
  90 0006 FF92      		push r15
  91               	.LCFI5:
  92               		.cfi_def_cfa_offset 6
  93               		.cfi_offset 15, -5
  94 0008 CF93      		push r28
  95               	.LCFI6:
  96               		.cfi_def_cfa_offset 7
  97               		.cfi_offset 28, -6
  98 000a DF93      		push r29
  99               	.LCFI7:
 100               		.cfi_def_cfa_offset 8
 101               		.cfi_offset 29, -7
 102 000c 1F92      		push __zero_reg__
 103               	.LCFI8:
 104               		.cfi_def_cfa_offset 9
 105 000e CDB7      		in r28,__SP_L__
 106 0010 DEB7      		in r29,__SP_H__
 107               	.LCFI9:
 108               		.cfi_def_cfa_register 28
 109               	/* prologue: function */
 110               	/* frame size = 1 */
 111               	/* stack size = 7 */
 112               	.L__stack_usage = 7
 113 0012 7C01      		movw r14,r24
 114 0014 6B01      		movw r12,r22
  78:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	while (*BytesRem)
 115               		.loc 2 78 0
 116 0016 00C0      		rjmp .L4
 117               	.LVL5:
 118               	.L5:
  79:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	{
  80:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
 119               		.loc 2 80 0
 120 0018 B601      		movw r22,r12
 121 001a C701      		movw r24,r14
 122 001c 4983      		std Y+1,r20
 123 001e 0E94 0000 		call USB_GetNextDescriptor
 124               	.LVL6:
  81:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
  82:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 		if (DESCRIPTOR_TYPE(*CurrConfigLoc) == Type)
 125               		.loc 2 82 0
 126 0022 D601      		movw r26,r12
 127 0024 ED91      		ld r30,X+
 128 0026 FC91      		ld r31,X
 129 0028 8181      		ldd r24,Z+1
 130 002a 4981      		ldd r20,Y+1
 131 002c 8417      		cp r24,r20
 132 002e 01F0      		breq .L3
 133               	.L4:
  78:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	while (*BytesRem)
 134               		.loc 2 78 0 discriminator 1
 135 0030 F701      		movw r30,r14
 136 0032 8081      		ld r24,Z
 137 0034 9181      		ldd r25,Z+1
 138 0036 892B      		or r24,r25
 139 0038 01F4      		brne .L5
 140               	.L3:
 141               	/* epilogue start */
  83:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 		  return;
  84:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	}
  85:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** }
 142               		.loc 2 85 0
 143 003a 0F90      		pop __tmp_reg__
 144 003c DF91      		pop r29
 145 003e CF91      		pop r28
 146 0040 FF90      		pop r15
 147 0042 EF90      		pop r14
 148               	.LVL7:
 149 0044 DF90      		pop r13
 150 0046 CF90      		pop r12
 151               	.LVL8:
 152 0048 0895      		ret
 153               		.cfi_endproc
 154               	.LFE84:
 156               		.section	.text.USB_GetNextDescriptorOfTypeBefore,"ax",@progbits
 157               	.global	USB_GetNextDescriptorOfTypeBefore
 159               	USB_GetNextDescriptorOfTypeBefore:
 160               	.LFB85:
  86:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
  87:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** void USB_GetNextDescriptorOfTypeBefore(uint16_t* const BytesRem,
  88:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****                                        void** const CurrConfigLoc,
  89:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****                                        const uint8_t Type,
  90:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****                                        const uint8_t BeforeType)
  91:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** {
 161               		.loc 2 91 0
 162               		.cfi_startproc
 163               	.LVL9:
 164 0000 CF92      		push r12
 165               	.LCFI10:
 166               		.cfi_def_cfa_offset 3
 167               		.cfi_offset 12, -2
 168 0002 DF92      		push r13
 169               	.LCFI11:
 170               		.cfi_def_cfa_offset 4
 171               		.cfi_offset 13, -3
 172 0004 EF92      		push r14
 173               	.LCFI12:
 174               		.cfi_def_cfa_offset 5
 175               		.cfi_offset 14, -4
 176 0006 FF92      		push r15
 177               	.LCFI13:
 178               		.cfi_def_cfa_offset 6
 179               		.cfi_offset 15, -5
 180 0008 CF93      		push r28
 181               	.LCFI14:
 182               		.cfi_def_cfa_offset 7
 183               		.cfi_offset 28, -6
 184 000a DF93      		push r29
 185               	.LCFI15:
 186               		.cfi_def_cfa_offset 8
 187               		.cfi_offset 29, -7
 188 000c 00D0      		rcall .
 189               	.LCFI16:
 190               		.cfi_def_cfa_offset 10
 191 000e CDB7      		in r28,__SP_L__
 192 0010 DEB7      		in r29,__SP_H__
 193               	.LCFI17:
 194               		.cfi_def_cfa_register 28
 195               	/* prologue: function */
 196               	/* frame size = 2 */
 197               	/* stack size = 8 */
 198               	.L__stack_usage = 8
 199 0012 7C01      		movw r14,r24
 200 0014 6B01      		movw r12,r22
  92:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	while (*BytesRem)
 201               		.loc 2 92 0
 202 0016 00C0      		rjmp .L9
 203               	.LVL10:
 204               	.L12:
  93:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	{
  94:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
 205               		.loc 2 94 0
 206 0018 B601      		movw r22,r12
 207 001a C701      		movw r24,r14
 208 001c 2A83      		std Y+2,r18
 209 001e 4983      		std Y+1,r20
 210 0020 0E94 0000 		call USB_GetNextDescriptor
 211               	.LVL11:
  95:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
  96:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 		if (DESCRIPTOR_TYPE(*CurrConfigLoc) == Type)
 212               		.loc 2 96 0
 213 0024 D601      		movw r26,r12
 214 0026 ED91      		ld r30,X+
 215 0028 FC91      		ld r31,X
 216 002a 8181      		ldd r24,Z+1
 217 002c 4981      		ldd r20,Y+1
 218 002e 2A81      		ldd r18,Y+2
 219 0030 8417      		cp r24,r20
 220 0032 01F0      		breq .L8
  97:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 		{
  98:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 			return;
  99:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 		}
 100:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 		else if (DESCRIPTOR_TYPE(*CurrConfigLoc) == BeforeType)
 221               		.loc 2 100 0
 222 0034 8213      		cpse r24,r18
 223 0036 00C0      		rjmp .L9
 101:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 		{
 102:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 			*BytesRem = 0;
 224               		.loc 2 102 0
 225 0038 F701      		movw r30,r14
 226 003a 1182      		std Z+1,__zero_reg__
 227 003c 1082      		st Z,__zero_reg__
 103:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 			return;
 228               		.loc 2 103 0
 229 003e 00C0      		rjmp .L8
 230               	.L9:
  92:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	while (*BytesRem)
 231               		.loc 2 92 0 discriminator 1
 232 0040 D701      		movw r26,r14
 233 0042 8D91      		ld r24,X+
 234 0044 9C91      		ld r25,X
 235 0046 892B      		or r24,r25
 236 0048 01F4      		brne .L12
 237               	.L8:
 238               	/* epilogue start */
 104:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 		}
 105:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	}
 106:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** }
 239               		.loc 2 106 0
 240 004a 0F90      		pop __tmp_reg__
 241 004c 0F90      		pop __tmp_reg__
 242 004e DF91      		pop r29
 243 0050 CF91      		pop r28
 244 0052 FF90      		pop r15
 245 0054 EF90      		pop r14
 246               	.LVL12:
 247 0056 DF90      		pop r13
 248 0058 CF90      		pop r12
 249               	.LVL13:
 250 005a 0895      		ret
 251               		.cfi_endproc
 252               	.LFE85:
 254               		.section	.text.USB_GetNextDescriptorOfTypeAfter,"ax",@progbits
 255               	.global	USB_GetNextDescriptorOfTypeAfter
 257               	USB_GetNextDescriptorOfTypeAfter:
 258               	.LFB86:
 107:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
 108:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** void USB_GetNextDescriptorOfTypeAfter(uint16_t* const BytesRem,
 109:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****                                       void** const CurrConfigLoc,
 110:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****                                       const uint8_t Type,
 111:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****                                       const uint8_t AfterType)
 112:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** {
 259               		.loc 2 112 0
 260               		.cfi_startproc
 261               	.LVL14:
 262 0000 CF92      		push r12
 263               	.LCFI18:
 264               		.cfi_def_cfa_offset 3
 265               		.cfi_offset 12, -2
 266 0002 DF92      		push r13
 267               	.LCFI19:
 268               		.cfi_def_cfa_offset 4
 269               		.cfi_offset 13, -3
 270 0004 EF92      		push r14
 271               	.LCFI20:
 272               		.cfi_def_cfa_offset 5
 273               		.cfi_offset 14, -4
 274 0006 FF92      		push r15
 275               	.LCFI21:
 276               		.cfi_def_cfa_offset 6
 277               		.cfi_offset 15, -5
 278 0008 CF93      		push r28
 279               	.LCFI22:
 280               		.cfi_def_cfa_offset 7
 281               		.cfi_offset 28, -6
 282               	/* prologue: function */
 283               	/* frame size = 0 */
 284               	/* stack size = 5 */
 285               	.L__stack_usage = 5
 286 000a 7C01      		movw r14,r24
 287 000c 6B01      		movw r12,r22
 288 000e C42F      		mov r28,r20
 113:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);
 289               		.loc 2 113 0
 290 0010 422F      		mov r20,r18
 291               	.LVL15:
 292 0012 0E94 0000 		call USB_GetNextDescriptorOfType
 293               	.LVL16:
 114:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
 115:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	if (*BytesRem)
 294               		.loc 2 115 0
 295 0016 F701      		movw r30,r14
 296 0018 8081      		ld r24,Z
 297 001a 9181      		ldd r25,Z+1
 298 001c 892B      		or r24,r25
 299 001e 01F0      		breq .L15
 116:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
 300               		.loc 2 116 0
 301 0020 4C2F      		mov r20,r28
 302 0022 B601      		movw r22,r12
 303 0024 C701      		movw r24,r14
 304               	/* epilogue start */
 117:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** }
 305               		.loc 2 117 0
 306 0026 CF91      		pop r28
 307               	.LVL17:
 308 0028 FF90      		pop r15
 309 002a EF90      		pop r14
 310               	.LVL18:
 311 002c DF90      		pop r13
 312 002e CF90      		pop r12
 313               	.LVL19:
 116:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
 314               		.loc 2 116 0
 315 0030 0C94 0000 		jmp USB_GetNextDescriptorOfType
 316               	.LVL20:
 317               	.L15:
 318               	/* epilogue start */
 319               		.loc 2 117 0
 320 0034 CF91      		pop r28
 321               	.LVL21:
 322 0036 FF90      		pop r15
 323 0038 EF90      		pop r14
 324               	.LVL22:
 325 003a DF90      		pop r13
 326 003c CF90      		pop r12
 327               	.LVL23:
 328 003e 0895      		ret
 329               		.cfi_endproc
 330               	.LFE86:
 332               		.section	.text.USB_GetNextDescriptorComp,"ax",@progbits
 333               	.global	USB_GetNextDescriptorComp
 335               	USB_GetNextDescriptorComp:
 336               	.LFB87:
 118:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
 119:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
 120:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****                                   void** const CurrConfigLoc,
 121:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****                                   ConfigComparatorPtr_t const ComparatorRoutine)
 122:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** {
 337               		.loc 2 122 0
 338               		.cfi_startproc
 339               	.LVL24:
 340 0000 6F92      		push r6
 341               	.LCFI23:
 342               		.cfi_def_cfa_offset 3
 343               		.cfi_offset 6, -2
 344 0002 7F92      		push r7
 345               	.LCFI24:
 346               		.cfi_def_cfa_offset 4
 347               		.cfi_offset 7, -3
 348 0004 8F92      		push r8
 349               	.LCFI25:
 350               		.cfi_def_cfa_offset 5
 351               		.cfi_offset 8, -4
 352 0006 9F92      		push r9
 353               	.LCFI26:
 354               		.cfi_def_cfa_offset 6
 355               		.cfi_offset 9, -5
 356 0008 AF92      		push r10
 357               	.LCFI27:
 358               		.cfi_def_cfa_offset 7
 359               		.cfi_offset 10, -6
 360 000a BF92      		push r11
 361               	.LCFI28:
 362               		.cfi_def_cfa_offset 8
 363               		.cfi_offset 11, -7
 364 000c CF92      		push r12
 365               	.LCFI29:
 366               		.cfi_def_cfa_offset 9
 367               		.cfi_offset 12, -8
 368 000e DF92      		push r13
 369               	.LCFI30:
 370               		.cfi_def_cfa_offset 10
 371               		.cfi_offset 13, -9
 372 0010 EF92      		push r14
 373               	.LCFI31:
 374               		.cfi_def_cfa_offset 11
 375               		.cfi_offset 14, -10
 376 0012 FF92      		push r15
 377               	.LCFI32:
 378               		.cfi_def_cfa_offset 12
 379               		.cfi_offset 15, -11
 380               	/* prologue: function */
 381               	/* frame size = 0 */
 382               	/* stack size = 10 */
 383               	.L__stack_usage = 10
 384 0014 6C01      		movw r12,r24
 385 0016 7B01      		movw r14,r22
 386 0018 4A01      		movw r8,r20
 123:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	uint8_t ErrorCode;
 124:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
 125:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	while (*BytesRem)
 387               		.loc 2 125 0
 388 001a 00C0      		rjmp .L18
 389               	.LVL25:
 390               	.L20:
 391               	.LBB2:
 126:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	{
 127:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 		uint8_t* PrevDescLoc  = *CurrConfigLoc;
 392               		.loc 2 127 0
 393 001c F701      		movw r30,r14
 394 001e 6080      		ld r6,Z
 395 0020 7180      		ldd r7,Z+1
 396               	.LVL26:
 128:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 		uint16_t PrevBytesRem = *BytesRem;
 129:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
 130:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
 397               		.loc 2 130 0
 398 0022 B701      		movw r22,r14
 399 0024 C601      		movw r24,r12
 400 0026 0E94 0000 		call USB_GetNextDescriptor
 401               	.LVL27:
 131:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
 132:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
 402               		.loc 2 132 0
 403 002a F701      		movw r30,r14
 404 002c 8081      		ld r24,Z
 405 002e 9181      		ldd r25,Z+1
 406 0030 F401      		movw r30,r8
 407 0032 0995      		icall
 408               	.LVL28:
 409 0034 8230      		cpi r24,lo8(2)
 410 0036 01F0      		breq .L18
 133:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 		{
 134:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
 411               		.loc 2 134 0
 412 0038 8130      		cpi r24,lo8(1)
 413 003a 01F4      		brne .L19
 135:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 			{
 136:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 				*CurrConfigLoc = PrevDescLoc;
 414               		.loc 2 136 0
 415 003c F701      		movw r30,r14
 416 003e 7182      		std Z+1,r7
 417 0040 6082      		st Z,r6
 137:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 				*BytesRem      = PrevBytesRem;
 418               		.loc 2 137 0
 419 0042 F601      		movw r30,r12
 420 0044 B182      		std Z+1,r11
 421 0046 A082      		st Z,r10
 422 0048 00C0      		rjmp .L19
 423               	.LVL29:
 424               	.L18:
 425               	.LBE2:
 125:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	while (*BytesRem)
 426               		.loc 2 125 0 discriminator 1
 427 004a F601      		movw r30,r12
 428 004c A080      		ld r10,Z
 429 004e B180      		ldd r11,Z+1
 430 0050 A114      		cp r10,__zero_reg__
 431 0052 B104      		cpc r11,__zero_reg__
 432 0054 01F4      		brne .L20
 138:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 			}
 139:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
 140:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 			return ErrorCode;
 141:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 		}
 142:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	}
 143:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
 144:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
 433               		.loc 2 144 0
 434 0056 82E0      		ldi r24,lo8(2)
 435               	.L19:
 436               	/* epilogue start */
 145:../../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** }
 437               		.loc 2 145 0
 438 0058 FF90      		pop r15
 439 005a EF90      		pop r14
 440               	.LVL30:
 441 005c DF90      		pop r13
 442 005e CF90      		pop r12
 443               	.LVL31:
 444 0060 BF90      		pop r11
 445 0062 AF90      		pop r10
 446 0064 9F90      		pop r9
 447 0066 8F90      		pop r8
 448               	.LVL32:
 449 0068 7F90      		pop r7
 450 006a 6F90      		pop r6
 451 006c 0895      		ret
 452               		.cfi_endproc
 453               	.LFE87:
 455               		.text
 456               	.Letext0:
 457               		.file 3 "/usr/lib/gcc/avr/4.7.1/../../../../avr/include/stdint.h"
 458               		.file 4 "../../LUFA/Drivers/USB/Core/AVR8/../StdDescriptors.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 ConfigDescriptor.c
     /tmp/ccGSfSXc.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccGSfSXc.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccGSfSXc.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccGSfSXc.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccGSfSXc.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccGSfSXc.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccGSfSXc.s:13     .text.USB_GetNextDescriptor:0000000000000000 USB_GetNextDescriptor
     /tmp/ccGSfSXc.s:72     .text.USB_GetNextDescriptorOfType:0000000000000000 USB_GetNextDescriptorOfType
     /tmp/ccGSfSXc.s:159    .text.USB_GetNextDescriptorOfTypeBefore:0000000000000000 USB_GetNextDescriptorOfTypeBefore
     /tmp/ccGSfSXc.s:257    .text.USB_GetNextDescriptorOfTypeAfter:0000000000000000 USB_GetNextDescriptorOfTypeAfter
     /tmp/ccGSfSXc.s:335    .text.USB_GetNextDescriptorComp:0000000000000000 USB_GetNextDescriptorComp

NO UNDEFINED SYMBOLS
